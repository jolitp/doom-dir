#+TITLE: Doom Emacs config
#+AUTHOR: João Luís Teixeira Pinto
* Doom Emacs config
** _
This file is a literate configuration of my Doom Emacs config.

Here are the Emacs LISP code that config Emacs and also the explanation of every part of the config.

In addition to that, I also document here how I use, or intend to use, such configuration.
** Getting Started Guide
https://github.com/hlissner/doom-emacs/blob/master/docs/getting_started.org
* Notes about configuring Doom Emacs
Taken from the Doom Emacs github page
** _
You can configure Doom by tweaking the files found in your =DOOMDIR=. Doom
expects this directory to be found in one of:

=~/.config/doom= (respects =$XDG_CONFIG_HOME)= or =~/.doom.d= This directory is
referred to as your =DOOMDIR=. Only one of these directories should exist (Doom
will only recognize one).

Change the =DOOMDIR= environment variable to change where Doom looks for this
directory. Symlinks will work as well.

When you ran =doom install=, it deployed a simple Doom configuration to your
=DOOMDIR=, comprised of these three files:
** init.el
Where you’ll find your =doom!= block, which controls what Doom modules are
enabled and in what order they will be loaded.

This file is evaluated early when Emacs is starting up; before any other module
has loaded. You generally shouldn’t add code to this file unless you’re
targeting Doom’s CLI or something that needs to be configured very early in the
startup process.
** config.el
Here is where 99.99% of your private configuration should go. Anything in here
is evaluated after all other modules have loaded, when starting up Emacs.
** packages.el
Package management is done from this file; where you’ll declare what packages to
install and where from.
*** Note:
do not use =M-x customize= or the customize API in general. Doom is designed to
be configured programmatically from your config.el, which can conflict with
Customize’s way of modifying variables.

If you’re concerned about =defcustom= setters, Doom has a =setq!= macro that
will trigger them.
** the doom binary CLI utility
This utility is your new best friend. It won’t spot you a beer, but it’ll
shoulder much of the work associated with managing and maintaining your Doom
Emacs configuration, and then some. Not least of which is installation of and
updating Doom and your installed packages.

It exposes a variety of commands. =bin/doom= help will list them all, but here
is a summary of the most important ones:

- =doom sync=: This synchronizes your config with Doom Emacs. It ensures that
  needed packages are installed, orphaned packages are removed and necessary
  metadata correctly generated. Run this whenever you modify your =doom!= block
  or =packages.el= file. You’ll need =doom sync -u= if you override the recipe
  of package installed by another module.

- =doom upgrade=: Updates Doom Emacs (if available) and all its packages.

- =doom env=: (Re)generates an “envvar file”, which is a snapshot of your shell
  environment that Doom loads at startup. If your app launcher or OS launches
  Emacs in the wrong environment you will need this. **This is required for GUI
  Emacs users on MacOS.**

- =doom doctor=: If Doom misbehaves, the doc will diagnose common issues with
  your installation, system and environment.

- =doom purge=: Over time, the repositories for Doom’s plugins will accumulate.
  Run this command from time to time to delete old, orphaned packages, and with
  the =-g= switch to compact existing package repos.

Use =doom help= to see an overview of the available commands that =doom=
provides, and =doom help COMMAND= to display documentation for a particular
=COMMAND=.

I recommend you add =~/.emacs.d/bin= to your =PATH= so you can call =doom=
directly and from anywhere. Accomplish this by adding this to your .bashrc or
.zshrc file: ~export PATH=”$HOME/.emacs.d/bin:$PATH”~
* notes about elisp
** symbols
symbols in lisp stat with a ='= like:
#+begin_src elisp
(a 'symbol)
#+end_src
** lisp learning resources
*** It is not hard to read Lisp code
https://yoo2080.wordpress.com/2014/07/04/it-is-not-hard-to-read-lisp-code/
** Parinfer
https://shaunlebron.github.io/parinfer/
** Inspiring a future Clojure editor with forgotten Lisp UX - Shaun Lebron
https://www.youtube.com/watch?v=K0Tsa3smr1w&t=532s
** Don't make a habit of putting close-parentheses on lines by themselves; Lisp programmers find this disconcerting.
https://www.reddit.com/r/emacs/comments/f6q4yx/dont_make_a_habit_of_putting_closeparentheses_on/
* content about Emacs configs to check out
** David Wilson (system crafters)
*** youtube
**** channel link
https://www.youtube.com/c/SystemCrafters/videos
**** playlists
***** Emacs From Scratch (old)
https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ
****** DONE 1 Getting Started with a Basic Usable Configuration
******* 0 introduction
******* 2:40 how I use Emacs
******* 6:40 start
******* 11:20 start of configuration
******* 13:40 font style config
******* 19:15 ...
******* 22:00 ~ package sources
Doom does not install packages this way, it uses straight instead
******* 27:00 command log mode
******* 31:00 ~ completion frameworks
ivy or helm, etc
******* 33:00 ~ counsel shenanigans
******* 36:00 M-x explanation
******* 37:00 counsel load theme
******* 39:00 use package
******* 40:00 modeline
******* 42:58 swiper
******* 44:00 caps as ctrl
******* 47:00 modeline 2nd time
****** 2 Adding Helpful UI Improvements
****** 3 Key Bindings and Evil
****** 4 Projectile and Magit
****** 5 Org Mode Basics
****** 6 Organize Your Life with Org Mode
****** 7 Configure Everything with Org Babel
****** 8 Build Your Own IDE with lsp-mode
****** 9 Learn to Love the Terminal Modes
****** 10 Effortless File Management with Dired
****** 11 Keeping Your Emacs Packages Up To Date
****** 12 How to Cut Emacs Start Up Time in Half!
***** Emacs Tips
****** SKIP 1 How to Show Reminders for Org Mode Tasks
******* NO org alert
System notifications of org agenda items
https://github.com/spegoraro/org-alert

- no way of configuring how much time before the notification will play
******* NO org wild notifier
- dont fire reliably
******* NO org notify
cant install on doom
****** 2 How to Create Your Own Color Theme
****** 3 How to Use File and Directory Local Variables
****** 4 How to Give Presentations with Org Mode
****** 5 How to Create and Manage Multiple Windows - Emacs Tips
****** 6 Organize Your Windows with the Tab Bar in Emacs 27
****** 7 Dynamic Tiling Windows like dwm in Emacs with Edwina
****** 8 Unlock the Power of the Daemon with emacsclient
****** 9 Give Emacs Psychic Completion Powers with prescient.el
****** 10 Teach Emacs to Keep Your Folders Clean
****** 11 How to Encrypt Your Passwords with Emacs
****** 12 Hey Emacs, Don't Move My Windows! - Customizing display-buffer's behavior
****** 13 Streamline Your Emacs Completions with Vertico
****** 14 Doom Emacs or Spacemacs? Use both with Chemacs2!
***** Emacs IDE
****** 1 Emacs From Scratch #8 - Build Your Own IDE with lsp-mode
****** 2 How to Debug Your Code with dap-mode
****** 3 Python Development Configuration
***** Learning Emacs Lisp
****** 1 Introduction to Emacs Lisp - Learning Emacs Lisp #1
****** 2 Types, Conditionals, and Loops - Learning Emacs Lisp #2
****** 3 Defining Functions and Commands - Learning Emacs Lisp #3
****** 4 Defining Variables and Scopes - Learning Emacs Lisp #4
****** 5 Reading and Writing Buffers in Practice - Learning Emacs Lisp #5
****** 6 Managing Files and Directories in Practice - Learning Emacs Lisp #6
****** 7 Creating Custom Minor Modes - Learning Emacs Lisp #7
***** Managing Your Dotfiles
****** 1 The Basics of Dotfiles
****** 2 How to Create a Dotfiles Folder
****** 3 Give Your Dotfiles a Home with GNU Stow
***** Emacs Essentials
****** 1 The Absolute Beginner's Guide to Emacs
****** 2 Efficient Movement with Emacs Key Bindings - Emacs Essentials #2
****** 3 Efficient Text Selection with Emacs Key Bindings - Emacs Essentials #3
***** System Crafters Live!
****** 1 System Crafters Live! - I'm creating a new Lisp • Emacs News • Q&A
****** 2 System Crafters Live! - Lisp Compiler Progress • Live Lisp Hacking • Q&A
****** 3 System Crafters Live! - Taking a look at Magit 3.0 • Streaming with Emacs Lisp
****** 4 System Crafters Live! - So you've installed GNU Guix, now what?
****** 5 System Crafters Live! - Do we really need use-package in Emacs?
****** 6 System Crafters Live! - The Future of System Crafters
****** 7 System Crafters Live! - Can You Apply Zettelkasten in Emacs?
****** 8 System Crafters Live! - Emacs Package Potluck (Trying Your Suggestions!)
****** 9 System Crafters Live! - Can We Fix a Bug in Emacs?
****** 11 System Crafters Live! - The Many Varieties of Emacs
****** 10 System Crafters Live! - The Many Varieties of Emacs (Part 2)
****** 12 System Crafters Live! - A First Look at Guix Home
****** 13 System Crafters Live! - Why Geeks Don't Use Guix
****** 14 System Crafters Live! - Building the World's WORST Emacs Configuration (Part 2)
****** 15 System Crafters Live! - Configuring Emacs With Only the UI?
****** 16 System Crafters Live! - Planning the New Emacs From Scratch
****** 17 System Crafters Live! - Live Crafting: Rational Emacs
****** 18 System Crafters Live! - Trying New Emacs Packages by Minad
***** Mastering Git with Magit
****** 1 An Introduction to the Ultimate Git Interface, Magit!
****** 2 9 Techniques to Boost Your Git Workflow with Magit
****** 3 Fix Your Git Commits Like a Rebase Expert with Magit
***** Advanced Emacs Package Management
****** 1 straight.el: Advanced Emacs Package Management
***** Effective Window Management in Emacs
****** 1 Declutter Your Buffer Lists in Emacs with Perspective.el
***** Build a Second Brain in Emacs
https://www.youtube.com/playlist?list=PLEoMzSkcN8oN3x3XaZQ-AXFKv52LZzjqD
****** 1 Getting Started with Org Roam - Build a Second Brain in Emacs
******* _
******* DONE question: how to change the name of files that it generates
change the default template
******* question: how to create a new note with the selection in evil mode
******* question: how to create a note inside a specific folder inside the org roam folder
for example a MOC folder and a note inside that

maybe I can create a template and put a folder at the beginning of the filename
****** 2 Capturing Notes Efficiently in Emacs with Org Roam
****** 3 Org Roam: The Best Way to Keep a Journal in Emacs
****** 4 5 Org Roam Hacks for Better Productivity in Emacs
***** Emacs Shorts
****** 1 Emacs Has a Built-in Pomodoro Timer?? #Shorts
***** Hack Sessions
****** 1 Improving EXWM #1 // Hack Sessions
****** 2 Improving EXWM #2 // Hack Sessions
****** 3 "Inverse Literate" Emacs Configurations - Hack Sessions
****** 4 "Inverse Literate" Emacs Configurations (Part 2) - Hack Sessions
***** Publishing Websites with Org Mode
****** 1 Build Your Website with Org Mode
****** 2 Automated Org Mode Website Publishing with GitHub or SourceHut
***** Emacs From Scratch (New)
****** 1 The Basics of Emacs Configuration
****** 2 The 6 Emacs Settings Every User Should Consider
*** github
**** home
https://github.com/daviwil
**** dotfiles
https://github.com/daviwil/dotfiles
***** Emacs.org
https://github.com/daviwil/dotfiles/blob/master/Emacs.org
****** /home/daviwil/.dotfiles Emacs Configuration
https://config.daviwil.com/emacs
******* Rebind C-u
Since I let evil-mode take over C-u for buffer scrolling, I need to re-bind the
universal-argument command to another key sequence. I'm choosing C-M-u for this
purpose.

#+begin_src emacs-lisp
(global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src
******* Set Margins for Modes
#+begin_src emacs-lisp
;; (defun dw/center-buffer-with-margins ()
;;   (let ((margin-size (/ (- (frame-width) 80) 3)))
;;     (set-window-margins nil margin-size margin-size)))

(defun dw/org-mode-visual-fill ()
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . dw/org-mode-visual-fill))
#+end_src
******* org mode
#+begin_src emacs-lisp
;; TODO: Mode this to another section
(setq-default fill-column 80)

;; Turn on indentation and auto-fill mode for Org files
(defun dw/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil)
  (diminish org-indent-mode))

;; Make sure Straight pulls Org from Guix
(when dw/is-guix-system
  (straight-use-package '(org :type built-in)))

(use-package org
  :defer t
  :hook (org-mode . dw/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-fontify-quote-and-verse-blocks t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-startup-folded 'content
        org-cycle-separator-lines 2)

  (setq org-modules
    '(org-crypt
        org-habit
        org-bookmark
        org-eshell
        org-irc))

  (setq org-refile-targets '((nil :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1)))

  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)

  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (ledger . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

  ;; NOTE: Subsequent sections are still part of this use-package block!
#+end_src
******* org mode Fonts and Bullets
#+begin_src emacs-lisp
(use-package org-superstar
  :if (not dw/is-termux)
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

;; Replace list hyphen with dot
;; (font-lock-add-keywords 'org-mode
;;                         '(("^ *\\([-]\\) "
;;                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

;; Increase the size of various headings
(set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))

;; Make sure org-indent face is available
(require 'org-indent)

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

;; Get rid of the background on column views
(set-face-attribute 'org-column nil :background nil)
(set-face-attribute 'org-column-title nil :background nil)

;; TODO: Others to consider
;; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
;; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
;; '(org-property-value ((t (:inherit fixed-pitch))) t)
;; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
;; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
;; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
;; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src
******* org mode Block Templates
These templates enable you to type things like <el and then hit Tab to expand the template. More documentation can be found at the Org Mode Easy Templates documentation page.

#+begin_src emacs-lisp
;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src

documentation (outdated? in web.archive.org!)
http://web.archive.org/web/20190924105433/https://orgmode.org/manual/Easy-templates.html
******* Pomodoro
#+begin_src emacs-lisp
(use-package org-pomodoro
  :after org
  :config
  (setq org-pomodoro-start-sound "~/.dotfiles/.emacs.d/sounds/focus_bell.wav")
  (setq org-pomodoro-short-break-sound "~/.dotfiles/.emacs.d/sounds/three_beeps.wav")
  (setq org-pomodoro-long-break-sound "~/.dotfiles/.emacs.d/sounds/three_beeps.wav")
  (setq org-pomodoro-finished-sound "~/.dotfiles/.emacs.d/sounds/meditation_bell.wav")

  (dw/leader-key-def
    "op"  '(org-pomodoro :which-key "pomodoro")))
#+end_src
******* Searching org files with ripgrep
#+begin_src emacs-lisp
(defun dw/search-org-files ()
  (interactive)
  (counsel-rg "" "~/Notes" nil "Search Notes: "))
#+end_src
******* End use-package org-mode
#+begin_src emacs-lisp
;; This ends the use-package org-mode block
)
#+end_src
******* Update Table of Contents on Save
It's nice to have a table of contents section for long literate configuration
files (like this one!) so I use org-make-toc to automatically update the ToC in
any header with a property named TOC.

#+begin_src emacs-lisp
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))
#+end_src
******* Org Roam
#+begin_src emacs-lisp
(use-package org-roam
  :straight t
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/Notes/Roam/")
  (org-roam-completion-everywhere t)
  (org-roam-completion-system 'default)
  (org-roam-capture-templates
    '(("d" "default" plain
       #'org-roam-capture--get-point
       "%?"
       :file-name "%<%Y%m%d%H%M%S>-${slug}"
       :head "#+title: ${title}\n"
       :unnarrowed t)
      ("ll" "link note" plain
       #'org-roam-capture--get-point
       "* %^{Link}"
       :file-name "Inbox"
       :olp ("Links")
       :unnarrowed t
       :immediate-finish)
      ("lt" "link task" entry
       #'org-roam-capture--get-point
       "* TODO %^{Link}"
       :file-name "Inbox"
       :olp ("Tasks")
       :unnarrowed t
       :immediate-finish)))
  (org-roam-dailies-directory "Journal/")
  (org-roam-dailies-capture-templates
    '(("d" "default" entry
       #'org-roam-capture--get-point
       "* %?"
       :file-name "Journal/%<%Y-%m-%d>"
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("t" "Task" entry
       #'org-roam-capture--get-point
       "* TODO %?\n  %U\n  %a\n  %i"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Tasks")
       :empty-lines 1
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("j" "journal" entry
       #'org-roam-capture--get-point
       "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Log")
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("l" "log entry" entry
       #'org-roam-capture--get-point
       "* %<%I:%M %p> - %?"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Log")
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("m" "meeting" entry
       #'org-roam-capture--get-point
       "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Log")
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")))
  :bind (:map org-roam-mode-map
          (("C-c n l"   . org-roam)
           ("C-c n f"   . org-roam-find-file)
           ("C-c n d"   . org-roam-dailies-find-date)
           ("C-c n c"   . org-roam-dailies-capture-today)
           ("C-c n C r" . org-roam-dailies-capture-tomorrow)
           ("C-c n t"   . org-roam-dailies-find-today)
           ("C-c n y"   . org-roam-dailies-find-yesterday)
           ("C-c n r"   . org-roam-dailies-find-tomorrow)
           ("C-c n g"   . org-roam-graph))
         :map org-mode-map
         (("C-c n i" . org-roam-insert))
         (("C-c n I" . org-roam-insert-immediate))))
#+end_src
****** Org Mode Workflow
https://config.daviwil.com/workflow
**** emacs from scratch
https://github.com/daviwil/emacs-from-scratch
**** system crafters
https://github.com/SystemCrafters
**** System Crafter Configurations
https://github.com/SystemCrafters/crafter-configs
** Jakub Neander(Zaiste Programming)
*** youtube
**** doomcasts playlist
https://www.youtube.com/playlist?list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj
***** DONE 1 Getting Started
****** discord server
https://discord.com/invite/qvGgnVx

How do I connect to the Discord server?
https://github.com/hlissner/doom-emacs/issues/2720

***** DONE 2 Projects with Projectile, File Explorer with Treemacs & EShell
****** "hotkeys" starting with <SPC>
calling =SPC f f= is the same as =SPC .=, this opens a pane with the
location of the current file and you can navigate from there, also it show the
files on the current directory with additional information
****** working in the context of projects
******* discover project in a directory
There is a coomand: =SPC : projectile-discover-projects-in-directory=, where
you give it a directory and emacs tries to guess based on the directory
structure if it is a project or not. If Emacs can't guess right put an empty
=.projectile= file in the folder.
******* making Emacs aware of project directories at startup
Put the following elisp code on =config.el=:

(up-to-date code)
#+begin_src elisp
(setq projectile-project-search-path '("~/projects/" "~/work/" ("~/github" .
1)))
#+end_src

(code from video)
#+begin_src elisp
(setq
    projectile-project-search-path '("~/code/")
)
#+end_src

You can suppress the auto-discovery of projects on startup by setting
=projectile-auto-discover= to =nil=.

You can manually trigger the project discovery using =M-x
projectile-discover-projects-in-search-path=. Or restart Emacs.

******* projectile docs
https://docs.projectile.mx/projectile/usage.html
******* show all projects that Emacs knows of
Pressing =SPC p p=
******* find a file in projcet
Pressing: =SPC SPC=, will show files only from the current project
******* file explorer (side bar tree view)
Type: =SPC o p=
******* using CLI apps inside emacs
Type: =SPC o e= (~not working currently~)
****** oppening the config files by using hotkeys
Pressing =SPC f p= to "find file in private configuration", or the files that
are inside the =.doom.d= directory
****** file-related commands often used
=SPC f r= for recent files (all files)

=SPC f R= for recent files (in the current project)
***** STOPPED 3 A short intro to Dired
****** showing and hiding details
Type to toggle: =(=
****** navigating
since I enabled =ranger= I can use the following keybindings:

=h= goes back up a directory

=j= and =k= go up and down

=l= goes into the selected directory or file
****** creating folders and files
Press: =SPC .= to create files (works everywhere not only in dired)

Pressing =+= on the dired buffer to create a new folder in the current viewed
folder
****** ...,
stopped at 2:27

I didn't take notes on deleting files and directory (he explained that at this
point already)
***** DONE 4 Buffers, Windows and Basic Navigation
****** switch buffers
press: =SPC b b=, or =SPC ,= to have a list of buffer names (only on curent
project, called a =workspace buffer= by Doom Emacs)

To find other buffers (outside of project, including other workspaces), press:
=SPC b B= or =SPC <=. In this buffer, pressing =SPC= will show only the hidden
buffers
****** closing / killing buffers
pressing =SPC b k=
****** showing 2 buffers at the same time
******* splitting windows
by pressing =C-w v= / =SPC w v= to split window vertically (putting 2 buffers
side by side), or =C-w s= / =SPC w s= to split the window horizontally (putting
2 buffers on top of each other)
******* switching windows
To switch between them, =C-w w= / =SPC w w= will cycle between the windows in
order. You can also use the =h=, =j=, =k=, =l= keys to move between windows.
******* change buffer
in the second window press: =SPC b b= to change the buffer of the window
******* closing windows
to delete a window: =C-w d= / =SPC w d= or =C-w q= / =SPC w q= will delete the
active window
******* resizing windows
By pressing:

=C-w <= / =SPC w <= to grow or shrink the current window to the left

=C-w >= / =SPC w >= to grow or shrink the current window to the right

=C-w += / =SPC w += to grow or shrink the current window to the top

=C-w -= / =SPC w -= to grow or shrink the current window to the bottom

***** DONE 5 Installing Packages with org-super-agenda as an example
****** installing packages (example org-super-agenda)
on the packages file put:

#+begin_src elisp
(package! org-super-agenda)
#+end_src

after that on the command line call:

#+begin_src bash
doom refresh
#+end_src

then agree to install the new package:

: proceed? (y or n) y

****** configuring packages (example org-super-agenda)
now go to the =config.el= to config the new package

#+begin_src elisp
(def-package! org-super-agenda
;; ... config goes here
)
#+end_src

to know what can you configure in a package press:

=SPC h f= for describe function, then type =def-package= (should be use-package! now)

since =def-package= is a wraper around =use-package= it is intresting to know
about it first:

github page: https://github.com/jwiegley/use-package
****** use package summary
use package has "sections" (or named parameters on the form of
=:parameter-name=)

the most important ones are:

=:init= that is everything that happens before the package loads

=:config= is everything that happens after the package loads
****** configuring org super agenda

#+begin_src elisp
(def-package! org-super-agenda
   :init ;; everything that should happen before the package loads
   (setq org-super-agenda-groups
         '(
           (:name "today"
                  :time-grid t
                  :scheduled today)
           (:name "due today"
                  :deadline today)
           (:name "important"
                  :priority "A")
           (:name "overdue"
                  :deadline past)
           (:name "due soon"
                  :deadline future)
           (:name "Big Outcomes"
                  :tag "bo")
           )
    )
   :config ;; enable the mode for example
   (org-super-agenda-mode)
   :after ;; this mode should only load after a certain mode
   (org-agenda)
)
#+end_src
****** config packages that are part of Doom Emacs
Packages that comes with Doom Emacs or packages that are part of the modules
enabled in the =init.el= file, there is another macro:

#+begin_src elisp
(after!

)
#+end_src

it is similar to =def-package!= macro, but only allows to specify certain
configuration options after another package has loaded
***** DONE 6 Quick, horizontal movements with evil-snipe
****** basics of evil-snipe
=evil-snipe= is a package that allows us to quickly jump to a character, it is
an improved functionallity that vim provides, it works in the following way:

press =f= in the =normal mode=, followed by a letter by which you want to jump
to (only in the current line!). After that the available letter locations are
highlighted and you can jump to the next one py pressing =;=, or back by
pressing =,=. By pressing any one of those the occurences of the selected letter
will also be highlighted in on the previous and next lines.

there is also =t= that will jump one character before the matching letter
****** improvements over the functionality present in Vim
as explained in the last section, when moving through the occurencies of
letters, you can go beyond the currend line. That is an improvement made by this
package.

By pressing =s= you can enter 2 letters, resulting in more precise movements

If you want to find a letter before the cursor press =F=. =S= works the same way as =F= but with 2 characters

By pressing =,= in =normal mode= you get your last search forwards, and =;= your
last search backwards;
****** selecting text with evil-snip
In =visual mode= pressing =f=, =F=, =s=, =S=, =,= or =;=
****** disabled functionallity in doom
in Doom Emacs this functionallity is disabled
#+begin_quote
 - you can ~repeat searches with =f=, =F=, =t=, =T= (ala Clever-F)~
#+end_quote

***** DONE 7 Moving around the screen with Avy
****** basics of avy
by pressing =g s= in normal mode or visual mode, the text that will be used in
the search changes color to a dark gray, then you can type the letters that you
want to search in rapid succession

if there are more than one occurency of the word/letter, the places where those
words/letters are found changes to letters that are easy to reach, starting on
the home row, like =a=, =s=, =d=, =f=, etc.
****** using avy on one window vs on all windows
there is a variable that can be customized to change the behavior of avy when it
comes to search only in the current window or in all open windows

=avy-all-windows=, can be either =t= or =nil=, for true or false.
****** changing words with avy
By pressing =g s SPC=, type a letter, or word in rapid succession, then press
=x= (to cut it), then the home-row characters presented. It will remove the
matching word (it won't put you in edit mode)
****** integration with ispell
Using the same process as above, but instead of typing =x=, type =i=

A new window will show up, where correction suggestions follows
single-characters between parenthesis. Pressing any of those letters will change
the highlighted word on the buffer.
****** moving/copying words from one part of the text to another
Press =g i SPC= then the letter/word to search, now press =y= (for
yanking/pasting), following the highlighted selection "mnemonics"

to move a word, do the same as above, instead of =y=, use =t= (for teleporting)
***** WATCHED 8 Multiple cursor in Emacs with evil-multiedit
***** DONE 9 Org Mode, Basic Outlines
not a single thing I didn't know
***** DONE 10 Org Mode - Links, Hyperlinks and more
****** links
links in org files are marked by [ [/link/location] [description\] ] (without
the spaces)

to add a link to an org file:

- link to a section of this file:
  + [[configs TODOs]]

you can highlight a section of the text and type =SPC m l l= and choose a type
of link, a name for the link and a description (if there is no highlight)

ex:

[ [file:LICENSE] [license] ] = [[file:LICENSE][license]]

normally file links are relative

[ [file:[[TODOs][README.org::TODOs] [license] ] = [[TODOs][README.org::TODOs]]

file:README.org::TODOs

if the heading does not exist it asks if you want to create one

to target a specific line:

file:README.org::44

by default numbers after the :: in the end refers to line numbers, and words
refer to headlines
****** run elisp code when clicking on a link
the link can link to a =elisp= expression.
***** WATCHED 11 Org Mode - Custom Link Types
***** STOPPED 12 Org Mode - Linking to words & Bookmarks
***** DONE 13 Org Mode, Code Snippets 101
****** opening a code section in another buffer
press =SPC m '=

: looks like it does not work on my computer, because I have the keyboard locale set to en-us international with ghost keys, when I click on ='= key it prints =´=, then I need to press SPC to actually insert the key

#+begin_src elisp
;; dummy elisp
#+end_src
***** TODO 14 Org Mode, Getting Organized with Tasks
***** TODO 15 Org Mode, Priorities for Tasks
***** TODO 16 Org Mode, Marking Tasks with Tags
***** TODO 17 Org Mode - Using Checkboxes
***** TODO 18 Emacs Magit - Getting Started
***** TODO 19 Emacs Magit - The Git Commit Flow in More Detail
***** TODO 20 Emacs Magit with Forge for Issuing Pull Requests
***** TODO 21 Emacs Magit with Forge for merging Pull Requests
***** DONE 22 Deft Mode
****** enable deft
in the =doom.dir= directory, on =init.el= enable =deft= on the =ui= section
****** to setup deft
on =config.el=:

#+begin_src elisp
(setq
      deft-directory "~/Dropbox/org" ; starting point for searching for notes
      deft-extensions '("org" "txt") ; file extensions to match on search
      deft-recurive t ; to force deft to search on subdirectories
)
#+end_src
****** using deft
to go to the deft UI, press: =SPC d=

now, just by typing I can select a specific note
******* other options
by pressing =C-c= on the deft UI you are presented with more options on a
minibuffer at the bottom of the screen. Some options are: refresh contents of
the folder, create a new file, etc..
***** DONE 23 Journaling with org-journal
****** init.el
enable journaling in org mode from =init.el= > languages:
#+begin_src elisp
(doom!
;; ...
  :lang
  ;; ...
  (org      ;; add parenthesis if needed
   ;; ...
   +journal ;; add this line
  )
)
#+end_src
****** using
pressing =SPC n j j= to add a new note, and =SPC n j J= to add a scheduled note

by default it creates a =journal= directory in the =org= directory. The filne
name is wihout any extension.

if there is already a note for the current day, emacs adds a new heading for the
current time inside today's file
****** improving jounaling notes
******* looking up on the documentation
press =SPC h v= to describe variable, then type =org-journal= to filter the
list.
******* changing the date format
#+begin_src elisp
(setq
      org-journal-date-prefix "#+TITLE: "
      org-journal-date-prefix "* "
      org-journal-date-format "%a, %Y-%m-%d" ;; Sun, 2020-12-31
      org-journal-file-format "%Y-%m-%d.org"
)
#+end_src

***** DONE 24 Org Roam Setup
****** setup
******* init.el
enable module in init.el. Remember to run =doom sync= afterwards!
#+begin_src elisp
(doom!
;; ...
  :lang
  ;; ...
  (org      ;; add parenthesis if needed
   ;; ...
   +roam ;; add this line
  )
)
#+end_src

******* config.el
add the location of the folder that org roam will use:
#+begin_src elisp
(setq
      org-roam-directory "~/Dropbox/org/roam"
)
#+end_src

a good idea is to put a =.projectile= file in that directory so Emacs interprets
that as a project directory. Also check if this directory is inside a directory
that projectile looks up at startup
****** adding notes
pressing =SPC n r c= to capture a new note
****** including links
press =SPC n r i= to insert. That will give you a list of all notes Org Roam
knows of. It can create new notes if the file specified does not exists yet.
****** see the backlinks of a note
a backlink is a link that comes to the open note from other notes.
***** DONE 25 Aliases in Org Roam Emacs Doom
an alias is another name for the same thing, like =javascript= is the same as
=js=

there is a meta property (org mode property, #+property_name:) called
#+roam_alias: "javascritp" "js"

by default the note names are taken from the titles and then from the roam_alias
property, and there is a variable called =org-roam-title-sources= that controls
this behavior
***** NO 26 Getting Started with Emacs & Doom in 2021 (on Apple Silicon M1)
I don't use a mac
***** DONE 27 Custom keybindings in Doom Emacs
****** using the map! macro
******* documentation
press =SPC h f= to describe a function, type =map!=. That gives you all the
possibilities of configuration, together with some examples.
******* example, extend the menu from SPC
******** ex 1: export the current org file to html
********* no_prefix
The function/procedure =org-html-export-to-html= is not bound to any key.

#+begin_src elisp
(map!
    :leader
    :desc "Export org to html"
    "A" #'org-html-export-to-html
)
#+end_src
********* with prefix
#+begin_src elisp
(map!
    :leader
    (:prefix ("A" . "applications")
             :desc "Export org to html"
             "A" #'org-html-export-to-html
    )
)
#+end_src
*** github
https://github.com/zaiste
https://github.com/zaiste/.doom.d

non Doom Emacs
https://github.com/zaiste/emacs-config
*** twitter
https://twitter.com/zaiste
** Derik Taylor (distrotube)
*** youtube
**** playlist link
https://www.youtube.com/playlist?list=PL5--8gKSku15uYCnmxWPO17Dq6hVabAB4
**** playlist videos - The Church of Emacs
***** 1 20,000 Page Static Website Written In Org Mode
***** 2 Vim And Emacs Are The Most Important Skills You Should Learn
***** 3 Emacs Is A Gaming Platform for Windows, Mac and Linux
***** 4 Three HUGE Mistakes New Emacs Users Make
***** 5 Rewriting My Website In Org Mode
***** 6 Transform Words Into Pretty Symbols In Emacs
***** 7 What Are The Benefits Of Emacs Over Vim?
***** 8 Leaving Doom Emacs For GNU Emacs? - DT Live!
***** 9 Create Beautiful Websites Using Emacs Org Mode
***** 10 Is The Best RSS Reader An Emacs Package?
***** 11 Setting Up The Mu4e Email Client In Doom Emacs
***** 12 Doom Emacs And EXWM Are My New Window Manager
***** DONE 13 Font And Line Settings In Doom Emacs
***** 14 The Different Shells Available In Emacs
***** 15 Why Isn't Emacs More Popular?
***** 16 Boost Productivity With Emacs, Org Mode and Org Agenda
***** 17 Doom Emacs For Noobs
***** 18 Useful Tools Within Emacs For Writers
***** 19 Man Pages Got Your Panties In A Twist? Use Woman Instead!
***** 20 Want To Rewrite Your Configs In Org-Mode? It's Easy!
***** 21 The Magit Git Client Is The "Killer Feature" In Emacs
***** 22 Turn Emacs Into A Window Manager With EXWM
***** 23 Switching to GNU Emacs
***** 24 The Basics of Emacs as a Text Editor
***** 25 Getting Started With Doom Emacs
***** 26 Bookmarks, Buffers and Windows in Doom Emacs
***** 27 Vim Versus Emacs. Which Is Better?
***** 28 Org Mode Basics In Doom Emacs
***** 29 Friendship With Emacs Is Over, Vim Is My Best Friend
***** 30 I'm Replacing All Of My Programs...With Emacs
*** gitlab
**** home page
https://gitlab.com/dwt1
**** doom config
https://gitlab.com/dwt1/dotfiles/-/tree/master/.config/doom


** Rainer König (org mode)
*** udemy course
**** _
Getting yourself organized with Org-mode
https://www.udemy.com/course/getting-yourself-organized-with-org-mode/?referralCode=D0CB0D077ED5EC0788F7
**** content
8 sections
37 lectures
6h 34m total length
**** welcome
****** introduction
****** The course book
**** the basics of org mode
****** installation of org mode
****** headlines and outline mode
****** ToDo keywords
****** Schedule, deadlines & agenda views
****** Repeating tasks
****** checklists
**** advanced topics
****** Tags
****** Advanced agenda view
****** Customized agenda views
****** Drawers, logging and quick notes
****** Archiving
**** making things more smooth
****** Automatic logging of status changes
****** Splitting your system into several files
****** The first capture template
****** More capture templates
**** workflow and time tracking
****** Ordered tasks
****** Timers
****** Clocking
****** Column view
****** Effort estimates
**** linking, attachments and more
****** Linking (internal)
****** Linking (external)
****** Attachments
****** Priorities
****** Tables
**** exporting and publishing
****** Exporting
****** Advanced exporting
****** Publishing
**** more advanced topics
****** Dynamic blocks
****** Tracking habits
****** Bulk agenda actions
****** Google calendar import
****** Working with source code blocks
****** Goal setting and tracking
****** Presenting my system
*** link to youtube playlist
https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE
*** episodes
**** OrgMode E01S01: Headlines & outline mode
**** Orgmode E01S02: ToDo keywords
**** OrgMode E01S03: Schedule, deadlines & agenda views
**** OrgMode E01S04: Repeating tasks
**** OrgMode E01S05: Checklists
**** OrgMode E02S01: Tags
**** OrgMode E02S02: Agenda view (advanced)
**** OrgMode E02S03: Customized agenda views
**** Orgmode E02S04: Drawers, Logging & quick notes
**** OrgMode E02S05: Archiving
**** OrgMode E03S01: Automatic logging of status changes
**** Orgmode E03S02: Splitting your system up to several files
**** OrgMode E03S03: The first capture template(s)
**** OrgMode E03S04: The :PROPERTIES: drawer
**** OrgMode E03S05: Archiving to different files
**** OrgMode E04S01: Ordered tasks
**** OrgMode E04S02: Timers
**** Orgmode E04S03: Clocking (aka time tracking)
**** OrgMode E04S04: Column view
**** OrgMode E04S05: Effort estimates
**** OrgMode E05S01: Linking (internal)
**** OrgMode E05S02: Linking (external)
**** OrgMode E05S03: Attachments
**** OrgMode E05S04: Priorities
**** OrgMode E05S05: Tables
**** OrgMode E06S01: Exporting
**** OrgMode E06S02: Advanced exporting
**** OrgMode E06S03: Publishing
**** OrgMode E06S04: Dynamic blocks
**** OrgMode E06S05: Tracking habits
**** OrgMode E07S01: Bulk agenda actions
**** Orgmode E07S02: Presenting my system
**** OrgMode E07S03: Google Calendar integration
**** OrgMode E07S04: Source code in OrgMode
**** OrgMode E07S05: Goal setting & Goal Tracking
**** OrgMode - A third approach to goal setting & tracking
**** Orgmode TV - News about the future plans
**** Orgmode TV - A new episode
**** Orgmode-TV: How do I plan my days
**** My course is online on Udemy
** Rafael Accácio
*** youtube
**** channel link
https://www.youtube.com/channel/UC6TH30TksyUf-MHbt5hMdQQ/videos
**** playlists
***** Emacs / org-mode
****** 1 Mantenha-se informado usando Emacs (notícias, artigos, podcasts usando rss) 🇧🇷
****** 2 Apresentações usando reveal.js e org-mode 🇧🇷
****** 3 Configurando Emacs (usando doom-emacs org-roam ) 🇧🇷
****** 4 Anotações usando emacs (org-roam Zettelkasten) 🇧🇷
****** 5 Programação Literária e Org-mode 🇧🇷
****** 6 org-mode demo 🇧🇷
****** 7 Rodando código python dentro de apresentação ( org-mode + reveal.js) 🇧🇷
****** 8 Configurando doom-emacs org-mode Android ↭ Computador 🇧🇷
****** 9 Criando marcos em arquivos no Emacs ( imenu ) 🇧🇷
*** github
https://github.com/Accacio/doom
https://github.com/Accacio/.emacs.d
** Lukewh
*** youtube
**** channel link
https://www.youtube.com/c/Lukewh/videos
**** playlists
***** Emacs
****** 1 Emacs - 01 - Intro, files and movement
****** 2 Emacs - 02 - Frames, Windows and Buffers
****** 3 Emacs - 04 - Customization with init.el
****** 4 Emacs - 05 - Themes
****** 5 Emacs bites - Startup config selector
****** 6 Emacs - 06 - Toolbar, menubar, scrollbar and other settings
****** 7 Emacs - 07 - ido and helm
****** 8 Emacs - 08 - Projectile
****** 9 Emacs - 09 - Dashboard
****** 10 Emacs - 10 - Treemacs
****** 11 Emacs - 11 - Clean configs with org-mode
****** 12 Emacs - 12 - Bookmarks
****** 13 Emacs - 13 - Expand region
****** 14 Emacs bites - Named term
****** 15 Emacs - 14 - Org-bullets and support-shift-select
****** 16 Emacs - 15 - Centaur tabs
****** 17 Emacs - 16 - Company mode (auto-complete) and some thanks
****** 18 Emacs - 18 - JavaScript with Tide, Prettier and RJSX mode
****** 19 Emacs - 03 - Modes
****** 20 Emacs - 17 - Flycheck | Syntax checking
****** 21 Setting up Emacs for Typescript React projects with lsp-mode and prettier
****** 22 Emacs: Updating init.el for Typescript React
** Mike Zamansky
*** blog
https://cestlaz.github.io/
https://cestlaz-nikola.github.io/
*** youtube
**** playlist link
https://www.youtube.com/playlist?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg
**** Using Emacs
****** 1 setting up the package manager
****** 2 org
****** 3 Elisp
****** 4 Buffers
****** 5 Windows
****** 6 Search (Swiper)
****** 7 Navigating with Avy
****** 8 Auto-complete
****** 9 Themes
****** 10 org init file
****** 11 reveal.js and org-mode
****** 12 flycheck and Jedi for Python
****** 13 yasnippet
****** 14 Thoughts on Using Emacs
****** 15 macros
****** 16 undo tree
****** 17 Misc features
****** 18 iedit, narrowing, and widening
****** 19 moving to a live config
****** 20 yanking
****** 21 Web Mode
****** 22 emacsclient
****** 23 capture
****** 24 links
****** 25 tramp
****** 26 Google Calendar sync and Org Agenda (Bad quality version)
****** 27 Google Calendar and Org Agenda (good version)
****** 28 shell and eshell
****** 29 rectangles
****** 30 elfeed part 1
****** 31 elfeed and hydras
elfid

...





****** 32 elfeed and macros
****** 33 emacs c++
****** 34 projectile and dumb-jump
****** 35 IBuffer and Emmet mode
****** 36 blogging
****** 37 A touch of elisp
****** 38 Treemacs file view
****** 39 Dired
****** 40 mu4e
****** 41 atomic-chrome
****** 42 pandoc
****** 43 Git Gutter and Timemachine
****** 44 Music
****** 45 An Org mode and PDF-tools workflow
****** 46 Company or Autocomplete
****** 47 auto yasnippets
****** 48 Magit
****** 49 silversearcher
****** 50 mu4e-conversation
****** 51 presentations
****** 52 day to day with org-mode
****** 53 eyebrowse
****** 54 emailing org-agenda
****** 55 Org Tables
****** 56 C++ Irony Completions
****** 57 dictionaries
****** 58 dired-narrow
****** 59 lsp-mode
****** 60 Markdown
****** 61 Restclient
****** 62 org-msg
****** 63 62 Magit Forge
****** 64 63 ClojureScript
****** 65 notmuch
****** 66 Live Python
****** 67 Switching Eshell buffers in Elisp
****** 68 An Emacs vs Vim rant
****** 69 Tramp and org-publish
****** 70 Floobits
****** 71 70
****** 72 openwith
****** 73 customizing elfeed
****** 74 Ripgrep and updating my blog
****** 75 Eglot
****** 76 bufler
****** 77 Bookmarks and Burly
****** 78 Clojure Demo and Advent of Code
****** 79 a grading workflow
****** 80 project
****** 81 Vertico, Marginalia, Consult, and Embark
** Protesilaos Stavrou
*** youtube
**** channel link
https://www.youtube.com/c/ProtesilaosStavrou/videos
**** playlists
***** GNU Emacs
****** 1 Live: Emacs videos, LibrePlanet 2022, philosophy presentations
****** 2 Emacs: Learn to ask for Help and write Elisp
****** 3 Emacs: Context-specific faces (face-remap-add-relative)
****** 4 Emacs: custom Org emphasis faces (org-emphasis-alist)
****** 5 EmacsConf 2021: How Emacs made me appreciate software freedom
****** 6 Emacs: custom Org agenda
****** 7 Live: Status update on my Emacs work
****** 8 Live: Impostor syndrome and the Emacs community
****** 9 Emacs: Demo of Minibuffer and Completions in Tandem (mct.el)
****** 10 Live: Emacs and the Unix philosophy
****** 11 Emacs: introduction to bookmarks
****** 12 Live: Emacs note-taking and the mindful attitude
****** 13 The Emacs community bought me a new computer
****** 14 Emacs: various custom commands
****** 15 Emacs: custom Dired extras
****** 16 Emacs: Modus themes status update (2021-05-19)
****** 17 Emacs: Notmuch demo (notmuch.el)
****** 18 Vlog: Moral lessons from switching to Emacs
****** 19 Emacs: Diary and Calendar
****** 20 Emacs: EWW and my extras (text-based browser)
****** 21 Emacs: workflow with VC for Git
****** 22 Emacs: vc-git extras
****** 23 Emacs: Embark and my extras
****** 24 Emacs: completion framework (Embark,Consult,Orderless,etc.)
****** 25 Vlog: Emacs is my "favourite Emacs package"
****** 26 Emacs: podcast manager with Elfeed+Bongo
****** 27 The Modus themes are built into Emacs!!!
****** 28 Emacs: BONGO and my extras
****** 29 Emacs: custom functions for various tasks
****** 30 Emacs: outline-minor-mode and imenu
****** 31 Emacs: mixed fonts for Org mode
****** 32 Emacs: tools for "focused editing"
****** 33 Emacs: ELFEED demo
****** 34 Emacs: ELFEED demo
****** 35 Emacs: ESHELL demo
****** 36 Emacs: ESHELL demo
****** 37 Emacs: resolve Git conflicts with SMERGE and EDIFF
****** 38 Emacs: introduction to MAGIT
****** 39 Emacs: introduction to IBUFFER
****** 40 Emacs: introduction to VC (version control framework)
****** 41 Emacs: ripgrep with rg.el
****** 42 Emacs: edit keyboard macros
****** 43 Emacs: my Modus Themes are in ELPA
****** 44 Emacs: introduction to REGISTERS
****** 45 Emacs: ICOMPLETE demo
****** 46 Emacs: Introduction to ORG-CAPTURE
****** 47 Emacs: introduction to GNUS
****** 48 Emacs: basics of regular expressions (regexp)
****** 49 Emacs: isearch powers for keyboard macros
****** 50 Emacs: window rules and parameters (`display-buffer-alist' and extras)
****** 51 Vlog: switching to emacs
****** 52 Emacs: FZF integration with ace-window (Ivy actions)
****** 53 Emacs: fuzzy find files (fzf, ripgrep, Ivy+Counsel)
****** 54 Emacs: Seach+Replace in multiple files (Ivy, ibuffer, Dired…)
****** 55 Emacs: Ivy tips and tricks
****** 56 My Modus themes for Emacs are on MELPA
****** 57 Emacs quick demo: git commit fixup with Magit
****** 58 Emacs: interactively rebase git commits with Magit
****** 59 Emacs: store music playlists (Dired+Bongo)
****** 60 Emacs: change multi-file permissions in Dired
****** 61 Emacs music management with Bongo and Dired
****** 62 Basics of Emacs client (`emacsclient' program)
****** 63 Channel update: BSPWM + Emacs
****** 64 Vlog: Emacs documentation culture and the GNU telos
****** 65 Emacs: transpose text
****** 66 Emacs: easier kmacro counter
****** 67 Emacs: comment functions and their behaviour
****** 68 Emacs: recentf and virtual buffers
****** 69 Emacs: Dired subtree has a toggle!
****** 70 Emacs micro motions and hacks
****** 71 Emacs: techniques to narrow Dired
****** 72 Emacs: M-x append-to-buffer (quick demo)
****** 73 Emacs: IDO features and concepts
****** 74 Emacs: DIRED and keyboard macros (quick demo)
****** 75 Emacs: manage window layouts
****** 76 Emacs: discovery with M-x customize
****** 77 Emacs: documentation and feature discovery
****** 78 Emacs: keyboard macro counter (quick demo)
****** 79 Emacs: buffer and window management
****** 80 Emacs: ISEARCH features and extras
****** 81 Emacs DIRED tweaks and improvements
****** 82 Vlog: Emacs mindset and Unix philosophy
****** 83 My accessible Emacs themes
****** 84 Emacs: use "occur" in practice
****** 85 Practical Emacs macros (based on Vim Golf)
****** 86 Introduction to keyboard macros in Emacs
****** 87 Emacs DIRED: list sub-directories, search results, images, diffs
****** 88 Basics of the Emacs file manager (dired == directory editor)
****** 89 Vim user's first impressions of GNU EMACS
*** blog / site
https://protesilaos.com/
** Marco Avelar
*** youtube
**** channel link
https://www.youtube.com/channel/UCy8M-JO9RfnmBZQ1bEoc8PQ
**** playlists
***** emacs
https://www.youtube.com/playlist?list=PLSjT1fDWcwAJYSwKnzwPw4VYVsWWdBMSr
****** 1 Improve project workflow with Projectile! (Emacs)
****** 2 Easy buffer navigation with avy! (Emacs)
****** 3 Improve project workflow with Ivy, Counsel, and Swiper! (Emacs)
****** 4 EXWM is love! (Emacs)
****** 5 Code completion with company-mode! (Emacs)
****** 6 Save yourself some time with flycheck-mode! (Emacs)
****** 7 Easy window movement with winum-mode! (Emacs)
****** 8 Emacs? Vim? Just go modal with Emacs!
****** 9 Improve project workflow with GNU Global! (Emacs)
****** 10 Emacs + LSP = Heaven
****** 11 Emacs + LSP Setup (clangd)
****** 12 Emacs: Help section & Elisp
****** 13 Emacs + dmenu is awesome! bye bye Ivy!
****** 14 Emacs + Minimal LSP = Happy dev
*** youtube
https://www.youtube.com/playlist?list=PL6N_e9hIrvFfmFkXm8fQJpzdx2-rAt00s
** Christopher Maiorana
*** youtube
**** channel link
https://www.youtube.com/channel/UCxpeu8gvV77Z1wUrTpu5BUQ
**** playlists
***** Emacs
****** 1 Org Mode GTD Basics
****** 2 Some Emacs Text Mode Hooks I Like
****** 3 Emacs Obscure Filename Patterns and Auto Mode Alist Addition
****** 4 6 Months of Org Mode Nearly Broke Me (Emacs Life)
****** 5 Sort Yourself Out With Emacs Org Mode GTD (Simplified!)
****** 6 Emacs For Writers | Count Words, Goals In Buffer
****** 7 Emacs Macros | Save Time and Typing
****** 8 Emacs as a Typewriter | LaTeX Standard Manuscript Format
****** 9 Emacs | Keeping a Journal In Org Mode
****** 10 Enjoy Reading Documentation With "Info" in Emacs
****** 11 Emacs Bookmarks Save Your Place
****** 12 Talking about Emacs and Other Things
****** 13 6 Months of EXWM - And This Is What Happened!
** Gavin Freeborn
*** youtube
**** channel link
https://www.youtube.com/playlist?list=PLknodeJt-I5GJmcd7ENakYf_M0x9q50d1
**** playlists
***** Emacs
****** 1 Getting Evil (aka Vim keys) in Emacs without Doom Emacs
****** 2 From Vim to Emacs - Is this even my final form?
****** 3 Bring a Web Browser, Python, Javascript and more to EMACS - Emacs Application Framework

** Jake B
*** youtube
**** channel link
https://www.youtube.com/c/JakeBox0/videos
**** playlists
***** Straightforward Emacs
****** 1 Perfect Emacs Org Mode Exports to LaTeX – Straightforward Emacs
****** 2 Export Emacs Org Mode to HTML – Straightforward Emacs
****** 3 Powerful Text Snippets – Emacs YASnippet – Straightforward Emacs
****** 4 Org Mode Time and Task Tools – Straightforward Emacs
****** 5 Classy Slideshows From Emacs Org Mode + org-reveal – Straightforward Emacs
****** 6 Registers for File Shortcuts – A Better Bookmark – Straightforward Emacs
***** Emacs Org Mode Videos
****** 1 Emacs Org Mode Demo 2021
****** 2 Perfect Emacs Org Mode Exports to LaTeX – Straightforward Emacs
****** 3 Export Emacs Org Mode to HTML – Straightforward Emacs
****** 4 Org Mode Time and Task Tools – Straightforward Emacs
****** 5 Classy Slideshows From Emacs Org Mode + org-reveal – Straightforward Emacs
***** LaTeX Videos
****** 1 LaTeX for Students – A Simple Quickstart Guide
** James Cash
*** youtube
**** channel link
https://www.youtube.com/user/jamesnvc000/videos
**** videos
***** Customizing the Emacs Modeline
***** Getting Evil With Emacs
***** Introspective Emacs: Learning How Things Work & Changing Them
***** Reading PDFs with Emacs
***** Intermediate Emacs: Extending & Creating Helm Sources
***** An Emacs Configuration Overview
** Seorenn
*** youtube
https://www.youtube.com/channel/UCsJXkw_Ssp-1myJFm4_SMJA
**** playlists
***** doom emacs
****** 1 Just started
****** 2 How to configure Doom Emacs | 둠 이맥스 설정 기초
****** 3 Just a beginner's guide for Doom Emacs | 그냥 기본적인 편집 가이드
****** 4 Just a beginner's guide for Doom Emacs | 그냥 기본적인 편집 가이드
****** 5 Projects and Workspaces | Doom Emacs | 프로젝트와 워크스페이스
****** 6 Simple Editing Tips | Doom Emacs | 둠 이맥스의 간단한 편집 팁 몇 가지
** thoughtbot Emacs Meetups
*** youtube
**** playlist link
https://www.youtube.com/playlist?list=PL8tzorAO7s0he-pp7Y_JDl7-Kz2Qlr_Pj
**** playlists
***** Emacs Meetups
****** 1 Conquering Kubernetes with Emacs
****** 2 Spin Your Own Spacemacs-lite
****** 3 Virtualized Emacs as an IDE
****** 4 Fun Shell Commands
****** 5 Embedding WebKit in Emacs: XWidgets+WebKit Feature Preview
****** 6 Have Emacs Teach You Chinese
****** 7 Getting Started With Org Mode
****** 8 Conquering Your Finances with Emacs and Ledger
****** 9 How to Order Salads From Inside Emacs
****** 10 Emacs For Writers
****** 11 Searching the Web with engine-mode
****** 12 How I Use org-capture and Stuff
****** 13 A Pretty Good Introduction to Pretty Good Privacy
****** 14 Org-mode for Reproducible Research
****** 15 Keyboard Macro Workshop
****** 16 The Editor of a Lifetime
****** 17 Turtle Graphics with Emacs Lisp
****** 18 Writing Games with Emacs
****** 19 Introduction to evil-mode
****** 20 Emacs as a Python IDE
****** 21 Upgrading IPython with Emacs
****** 22 An Introduction to Emacs Lisp
****** 23 IRC With ERC
* intresting packages to check out
** DONE org-appear
Toggle visibility of hidden Org mode element parts upon entering and leaving an
element
** DONE org-transclusion
https://github.com/nobiot/org-transclusion
** org-mime
org-mime can be used to send HTML email using Org-mode HTML export.
https://github.com/org-mime/org-mime
** org-roam-ui
A graphical frontend for exploring your org-roam Zettelkasten
https://github.com/org-roam/org-roam-ui
** super-save
Save Emacs buffers when they lose focus
https://github.com/bbatsov/super-save
** org-clock-csv
Export Emacs org-mode clock entries to CSV format.
https://github.com/atheriel/org-clock-csv
** bufler.el
A butler for your buffers. Group buffers into workspaces with programmable
rules, and easily switch to and manipulate them.
https://github.com/alphapapa/bufler.el
** org-clock-convenience
Convenience functions to work with emacs org mode clocking

My aim is to do as much of the clocking from the agenda buffer without ever
having to leave it, except to open a new task.

https://github.com/dfeich/org-clock-convenience
** anki-editor
Emacs minor mode for making Anki cards with Org
https://github.com/louietan/anki-editor
** org-clock-budget
Budget your time with org!
https://github.com/Fuco1/org-clock-budget
** org-mru-clock
timr_clock Effortlessly clock in/out of org-mode tasks, with completion and
peristent history
htts://github.com/unhammer/org-mru-clock
** counsel-org-clock
Cousel (Ivy) interface for org-clock
htts://github.com/akirak/counsel-org-clock
** clocker.el
Note taker and org-clock-in enforcer
https://github.com/roman/clocker.el
** org-clock-split
Split org-mode CLOCK entry while preserving time.
https://github.com/justintaft/org-clock-split
** org-clock-helpers
Past clock insertion helpers
https://github.com/mskorzhinskiy/org-clock-helpers#past-clock-insertion-helpers
** ednc (The Emacs Desktop Notification Center)
The Emacs Desktop Notification Center
https://github.com/sinic/ednc
** alert
A Growl-like alerts notifier for Emacs
https://github.com/jwiegley/alert
** notdeft
NotDeft note manager for Emacs

Notdeft is a fork of Deft that uses an external search engine and indexer.

https://github.com/hasu/notdeft
** Git time machine
https://gitlab.com/pidu/git-timemachine
** crux
A Collection of Ridiculously Useful eXtensions for Emacs

https://github.com/bbatsov/crux
** HideShow (built-in package)
https://www.emacswiki.org/emacs/HideShow
** DOCT: Declarative Org Capture Templates
*** github
https://github.com/progfolio/doct
*** melpa
recipe
#+begin_src elisp
(doct
 :repo "progfolio/doct"
 :fetcher github)
#+end_src
*** fixes
**** Method to combine doct with org-roam templates?
https://github.com/progfolio/doct/issues/18
** dirvish
Dired can be a nice file manager.
https://github.com/alexluigit/dirvish
** [#C] writefreely.el
*Frictionless* blogging with Org Mode. No setup required.

https://github.com/dangom/writefreely.el

This small library allows you to publish and update your Org-mode files as posts
to any instance of the federated blogging platform write freely. No account nor
registration is required for anonymous posts in the platform.

https://writefreely.org/
** Calfw - A calendar framework for Emacs
https://github.com/kiwanami/emacs-calfw
** vertico-posframe
vertico-posframe is an vertico extension, which lets vertico use posframe to
show its candidate menu.

https://github.com/tumashu/vertico-posframe

https://elpa.gnu.org/packages/vertico-posframe.html
** org-super-agenda
** org-noter
included with doom?
https://github.com/weirdNox/org-noter
** transcription-mode
Emacs mode for editing transcripts.
https://github.com/skeeto/transcription-mode
** Ace Jump Mode
https://github.com/winterTTr/ace-jump-mode
** vue-mode
Emacs major mode for vue.js based on mmm-mode.
https://github.com/AdamNiederer/vue-mode
** android-mode
Emacs minor mode for Android application development
https://github.com/remvee/android-mode
** filldent.el
Fill or indent depending on mode
https://github.com/duckwork/filldent.el
** region-occurrences-highlighter
This emacs package implements a local minor mode that highlights occurrences of
the current selected region.
https://github.com/alvarogonzalezsotillo/region-occurrences-highlighter
** anki-editor
Emacs minor mode for making Anki cards with Org
https://github.com/louietan/anki-editor
** origami.el
A folding minor mode for Emacs
https://github.com/gregsexton/origami.el
** lsp-origami
lsp-mode heart origami.el
https://github.com/emacs-lsp/lsp-origami
** diffview-mode
View diffs side-by-side in Emacs
https://github.com/mgalgs/diffview-mode
** highlight-sexp
A GNU/Emacs minor mode that highlights s-exp at the current position.
https://github.com/daimrod/highlight-sexp
** siege-mode
An emacs minor mode to surround the region with smart delimiters interactively.
https://github.com/tslilc/siege-mode
** polymode
Framework for Multiple Major Modes in Emacs (core library)
https://github.com/polymode/polymode
** Highlight-Indentation-for-Emacs
Minor modes to highlight indentation guides in emacs.

different than =highligh-indent=, this one colors up the first coluomn of characters
https://github.com/antonj/Highlight-Indentation-for-Emacs
** aggressive-indent-mode
Emacs minor mode that keeps your code always indented. More reliable than
electric-indent-mode.

https://github.com/Malabarba/aggressive-indent-mode
** highlight-indent-guides
Emacs minor mode to highlight indentation

https://github.com/DarthFennec/highlight-indent-guides

this only shows a thin line

(not showing on org babel blocks)
** cargo.el
Emacs Minor Mode for Cargo, Rust's Package Manager.
https://github.com/kwrooijen/cargo.el
** yasnippet-org-mode
A YASnippet bundle for Emacs org-mode. A collection of yasnippet files

https://github.com/RickMoynihan/yasnippet-org-mode
** org-babel-examples
Examples using emacs org mode babel inline source code with different backend
languages
https://github.com/dfeich/org-babel-examples
** ztree
Directory tree comparison mode for Emacs
https://github.com/fourier/ztree
** engine-mode
Minor mode for defining and querying search engines through Emacs.
https://github.com/hrs/engine-mode
** org-transclusion
Emacs package to enable transclusion with Org Mode
https://github.com/nobiot/org-transclusion
** org-fc
Spaced Repetition System for Emacs org-mode

https://www.leonrische.me/fc/index.html
https://github.com/l3kn/org-fc
**  pamparam
Simple and fast flashcards for Emacs
https://github.com/abo-abo/pamparam
** emacs-bash-completion
Add programmable bash completion to Emacs shell-mode
https://github.com/szermatt/emacs-bash-completion
** color-identifiers-mode
Emacs minor mode to highlight each source code identifier uniquely based on its name
https://github.com/ankurdave/color-identifiers-mode
** selectric-mode
keyboard Make your Emacs sound like a proper typewriter.
https://github.com/rbanffy/selectric-mode
** typewriter-mode.el
Typewriter sound effect for Emacs
https://github.com/tungd/typewriter-mode.el
** emacs-modern-fringes
Replaces the ugly looking default emacs fringe bitmaps and replaces them with
better, modern looking ones.
https://github.com/SpecialBomb/emacs-modern-fringes
** tracker-mode
a music tracker/sequencer for emacs
https://github.com/defaultxr/tracker-mode
** modern-cpp-font-lock
C++ font-lock for Emacs
https://github.com/ludwigpacifici/modern-cpp-font-lock

I'm putting it here not because I want to use it, but to study it.

It does font locking for a specific major mode.

I want to do something similar in the future.
** org-protocol-capture-html
Capture HTML from the browser selection into Emacs as org-mode content
https://github.com/alphapapa/org-protocol-capture-html
** ob-mermaid
Generate mermaid diagrams within Emacs org-mode babel
https://github.com/arnm/ob-mermaid
** org-mind-map
This is an emacs package that creates graphviz directed graphs.
https://github.com/the-ted/org-mind-map
** org-graph-view
View Org buffers as a clickable, graphical mind-map
https://github.com/alphapapa/org-graph-view
** spinner.el
Emacs mode-line spinner for operations in progress
https://github.com/Malabarba/spinner.el
** org-ql
An Org-mode query language, including search commands and saved views
https://github.com/alphapapa/org-ql
** svelte-mode
Emacs major mode for Svelte.
https://github.com/leafOfTree/svelte-mode
** emacs-solaire-mode
If only certain buffers could be so grossly incandescent.
https://github.com/hlissner/emacs-solaire-mode

already installed in Doom Emacs
** electric-operator
An emacs minor mode to automatically add spacing around operators
https://github.com/davidshepherd7/electric-operator
** org-clock-convenience
Convenience functions to work with emacs org mode clocking
https://github.com/dfeich/org-clock-convenience
** auto-dictionary-mode
Emacs: automatic dictionary switcher for flyspell
https://github.com/nschum/auto-dictionary-mode
** magic-latex-buffer
Magical syntax highlighting for LaTeX-mode buffers
https://github.com/zk-phi/magic-latex-buffer
** yasnippet-latex-mode
Collection of latex-mode snippets for yasnippet in Emacs
https://github.com/shanecelis/yasnippet-latex-mode
** synosaurus
An extensible thesaurus mode for emacs
https://github.com/hpdeifel/synosaurus

Quite old and unmaintained (2 years)

the backends work with German and English, no Portuguese option
** ink-mode
An Emacs major mode for the interactive fiction scripting language Ink, by Inkle Studios.
https://github.com/Kungsgeten/ink-mode
** dotnet.el
dotnet CLI minor mode for Emacs
https://github.com/julienXX/dotnet.el
** love-minor-mode
An Emacs minor mode for LÖVE
https://github.com/ejmr/love-minor-mode
** org-kanban
Simple approach to kanban with emacs' org-mode
https://github.com/hagmonk/org-kanban
** journalctl-mode
Major mode to view journalctl's output in Emacs
https://github.com/SebastianMeisel/journalctl-mode
** evil-tutor
Vimtutor adapted to Emacs+Evil and wrapped in a major mode.
https://github.com/syl20bnr/evil-tutor
** org-dashboard
Visual summary of progress in projects and tasks for Emacs Org Mode
https://github.com/bard/org-dashboard
** org-special-block-extras
A number of new custom blocks and link types for Emacs' Org-mode ^_^
https://github.com/alhassy/org-special-block-extras
** evil-textobj-tree-sitter
Tree-sitter powered textobjects for evil mode in Emacs
https://github.com/meain/evil-textobj-tree-sitter
** org-d20
Emacs minor mode for tabletop roleplaying games that use a d20
https://github.com/spwhitton/org-d20
** manage-minor-mode
Manage your minor-mode on the dedicated interface buffer. Emacs.
https://github.com/emacsorphanage/manage-minor-mode
** manage-minor-mode-table
Manage minor-modes in table.
https://github.com/jcs-elpa/manage-minor-mode-table
** snapshot-timemachine
Emacs-mode to step through (Btrfs, ZFS, ...) snapshots of files
https://github.com/mrBliss/snapshot-timemachine
** literate-programming-examples
A collection of literate programming examples using Emacs Org mode; these
examples are directly usable (copy and start hacking), and/or can serve as
educational literate programs. Clojure will be the preferred language.
https://github.com/limist/literate-programming-examples
** rust-playground
GNU/Emacs mode that setup local playground for code snippets in Rust language.
https://github.com/grafov/rust-playground
** perfect-margin
[emacs] auto center emacs windows, work with minimap and/or linum-mode
https://github.com/mpwang/perfect-margin
** wakib-keys
Emacs mode that moves to modern keybindings
https://github.com/darkstego/wakib-keys

workaround CUA mode
** prettify-utils.el
Helper functions for emacs' prettify-symbols-mode
https://github.com/Ilazki/prettify-utils.el/blob/master/prettify-utils.el
** speed-of-thought-lisp
Write elisp at the speed of thought. Emacs minor mode with abbrevs and keybinds.
https://github.com/Malabarba/speed-of-thought-lisp
** org-remark
Highlight and annotate any text file with using Org mode
https://github.com/nobiot/org-remark
** wat-mode
An Emacs major mode for WebAssembly's text format
https://github.com/devonsparks/wat-mode
** power-mode.el
Imbue Emacs with power!
https://github.com/elizagamedev/power-mode.el

particles and screen shake while you type
** guess-language.el
Emacs minor mode that detects the language you're typing in. Automatically
switches spell checker. Supports multiple languages per document.
https://github.com/tmalsburg/guess-language.el
** mode-line-stats
A bunch of easy to set up stats for the Emacs mode-line.
https://github.com/Idorobots/mode-line-stats
** pdf-continuous-scroll-mode.el
A minor mode for Emacs that implements a two-buffer hack to provide continuous
scrolling in pdf-tools
https://github.com/dalanicolai/pdf-continuous-scroll-mode.el
** mlscroll
Lightweight scrollbar for the Emacs mode line
https://github.com/jdtsmith/mlscroll
** org-fragtog
Automatically toggle Org mode LaTeX fragment previews as the cursor enters and exits them
https://github.com/io12/org-fragtog
** org-recur
Simple recurring org-mode tasks
https://github.com/m-cat/org-recur
** org-menu
A discoverable menu for Emacs org-mode using transient
https://github.com/sheijk/org-menu
** too-long-lines-mode
A global minor mode to hide lines that are too long and make emacs slow.
https://github.com/rakete/too-long-lines-mode
** dtrt-indent
A minor mode that guesses the indentation offset originally used for creating
source code files and transparently adjusts the corresponding settings in Emacs,
making it more convenient to edit foreign files.
https://github.com/jscheid/dtrt-indent
** emacs-org-transform-tree-table
Transform an org-mode outline and its properties to a table format (org-table,
CSV)
https://github.com/jplindstrom/emacs-org-transform-tree-table
** indent-control
Generic control the indentation level for each mode.
https://github.com/jcs-elpa/indent-control
** emmet-mode
Unofficial Emmet's support for emacs
https://github.com/emacsmirror/emmet-mode
* configs from the net to check out
** DONE Temporarily show emphasis markers when the cursor is on it
https://www.reddit.com/r/orgmode/comments/43uuck/temporarily_show_emphasis_markers_when_the_cursor/
*** question
I'm using (setq org-hide-emphasis-markers t) to hide the emphasis markers in
*bold* and /italics/ etc.

However, is it possible to display the markers only when the cursor is on or
between them to simplify editing and removal?
*** answer
Probably far from perfect, but the following is inspired by
=prettify-symbols-unprettify-at-point=. The hook is buffer-local:
#+begin_src elisp
(defun org-show-emphasis-markers-at-point ()
  (save-match-data
    (if (and (org-in-regexp org-emph-re 2)
            (>= (point)
                (match-beginning 3)
            )
            (<= (point)
                (match-end 4)
            )
            (member (match-string 3)
                    (mapcar 'car org-emphasis-alist)
            )
        )
	      (with-silent-modifications
	        (remove-text-properties
	          (match-beginning 3) (match-beginning 5)
	         '(invisible org-link)
          )
        )
        (apply 'font-lock-flush
               (list (match-beginning 3)
                     (match-beginning 5))
        )
    )
  )
)

(add-hook 'post-command-hook
	  'org-show-emphasis-markers-at-point nil t)
#+end_src
** Awesome Emacs
a community driven list of useful Emacs packages, utilities and libraries
https://github.com/emacs-tw/awesome-emacs
** howardabrams dot-files
My Emacs initialization code and standard scripts I use for client and servers alike.
https://github.com/howardabrams/dot-files
** daedreth UncleDavesEmacs
https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org
** dakrone dakrone-dotfiles
misc configuration files
https://github.com/dakrone/dakrone-dotfiles
** jinnovation .emacs.d
Configs of an Emacs enthusiast
https://github.com/jinnovation/.emacs.d
** writequit's config
This file takes a page out of the book of Hardcore Freestyle Emacs, in which a
single org-file can be tangled to create all the necessary dotfiles required for
my everyday computer usage.

This file was last exported: 2015-12-12 14:45
https://writequit.org/org/
** Making org-mode pretty with icons
https://thibautbenjamin.github.io/emacs/org-icons
** Doom Emacs Configuration
The Methods, Management, and Menagerie of Madness
https://tecosaur.github.io/emacs-config/config.html
** Colored text in org-mode with export to HTML
https://kitchingroup.cheme.cmu.edu/blog/2016/01/16/Colored-text-in-org-mode-with-export-to-HTML/

Just for fun, I want to put colored text in org-mode using links. This is a
simple hack that uses the description in an org-mode link as the text to color,
and the path in link to specify the color. I use an overlay to do this because I
could not figure out how to change the face foreground color. We provide a
simple export to HTML. LaTeX is also doable, but a trickier export as you need
to define the colors in the LaTeX header also.

Here is the code to make the color link, and put overlays on them with
font-lock.
** Hugo Cisneros - Org-mode configuration
https://hugocisneros.com/org-config/
TODO faces and export settings

Org “TODO” bullets
** Org Mode - Organize Your Life In Plain Text!
http://doc.norang.ca/org-mode.html
** Org ad hoc code, quick hacks and workarounds
https://orgmode.org/worg/org-hacks.html
** Awesome emacs config files
https://github.com/caisah/emacs.dz
** awesome-emacs
https://github.com/emacs-tw/awesome-emacs
** Towards a Vim-like Emacs
** evil-guide
Draft of a guide for using emacs with evil
https://github.com/noctuid/evil-guide
https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
* config emacs by purpose
** edit org files to become pdf files
** write literate configuration in org mode then tangle to the respective config files
** take notes in org mode from books, videos, sites, etc.
** organize life with org mode
*** use the agenda
*** have specific TODOs for important stuff
**** bills due dates
**** medicine depleting dates
**** university due dates
**** recurring tasks
*** capture
**** thoughts
**** dreams
**** TODOs
** develop a personal knowledge management system (PKMS)
*** a reference place for the things I learn
** programming environment for different languages and technologies
*** gdscript
*** python
*** web / mobile apps
**** html
**** css
**** javascript
**** vue
**** svelte
**** nativescript
**** webassembly
*** rust
*** C/C++
*** docker
*** shell
**** zsh
**** fish
* configs TODOs
** TODO + hydras
*** documentation
https://github.com/abo-abo/hydra
*** TODO + manipulate windows
**** TODO splitting
**** TODO switching
**** TODO change buffer
**** TODO closing
**** TODO resizing
*** TODO + org mode
**** TODO export options
the default org export is shit
*** TODO + text editing
**** TODO + commenting text
***** TODO comment reagion
***** TODO comment s-expression
***** TODO comment block
***** TODO comment paragraph
***** TODO add comment to the end of the line
**** TODO selecting text
**** TODO + checkers
***** TODO syntax
***** TODO grammar
****** TODO languagetool functions
** TODO + text editing
*** TODO search words é and ê with only e
emacs Diacritical Character search

CharacterFoldPlus

"This page is about package CharacterFold+, which enhances character folding for Isearch."

https://www.emacswiki.org/emacs/CharacterFoldPlus

https://www.emacswiki.org/emacs/download/character-fold%2b.el
*** TODO make the screen scroll below the end of file
*** TODO remove writegood passive voice warnings
*** TODO get a message on top of cursor when in a word that is not right
as in have wrong syntax or grammar
*** TODO make it so that sentences are separated by 2 spaces
*** TODO get spell checking working in portuguese
*** TODO ? how can I recreate the behavior of comment regions that I had in VS code for any type of code file?
#region folding for VS Code
https://marketplace.visualstudio.com/items?itemName=maptz.regionfolder
** TODO + changes to org mode
*** DONE add org roam
*** DONE hide synthax markers in org mode
*** DONE change the ... when a header is folded
*** DONE change the bullet point symbol used
*** DONE install and configure org-appear
*** DONE change the default TODO states
*** DONE change the color of TODO states
*** DONE start org files folded
*** DONE change the symbols for the TODO/DONE, etc
it can be done with org-superstar
*** DONE don't indent org headers and text
*** DONE BUG adding new entries to an ordered list does not add the next number
work around:

instead of adding bullets below with =C-RET=, add a bullet above with =M-RET=, that will recalculate the numbering
*** DONE configure org agenda and org super agenda
*** TODO change the symbols and steps inside check boxes
ex:

- [ ]
- [-]
- [X]
*** TODO ? can I make the TOC inside a heading?
*** TODO ? how to make my own expanding code blocks?
like =<= for source block, I want =<el= for elisp for example
*** TODO ? can I make the changed bullet, like the TODOs, a different color?
*** TODO install and configure org drill/pamparam/org-fc
*** TODO make a ABNT css file to use with org export
**** references
https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html

https://pt.stackoverflow.com/questions/149014/como-imprimir-p%C3%A1ginas-em-a4-utilizando-css

https://github.com/cognitom/paper-css
*** TODO change the style of links
instead of blue bold and underline, put a square with outup arrow, like obsidian, to the right
*** TODO show an additional unicode icon for links of different types
*** TODO check out org-transclusion
*** TODO FIX images at arbitrary sizes
not the actual size, that may be too small or too big
*** TODO ? render org tables with unicode characters?
change the presentation only
*** TODO justify text in org mode?
*** TODO BUG? remove the black line that shows on the folded heading
when there is a code snippet inside the heading
*** TODO add headers/bullets on the line the cursor is on
not after the last item of the current sub-tree

(+org/insert-item-below COUNT)
*** TODO change color of headers
** TODO + add addional programming language support that does not have a module for it
*** TODO vue
*** TODO svelte
** TODO + UI improvements
*** DONE change how the cursor traverses lines that are wraped
https://www.emacswiki.org/emacs/VisualLineMode

https://stackoverflow.com/questions/20882935/how-to-move-between-visual-lines-and-move-past-newline-in-evil-mode
*** SKIP + tabs
**** SKIP the tabs are showing on the completion list
either hide that or make it show the name of the key pressed before (category)
**** SKIP get the minimap working
**** SKIP show all tabs, not just tabs of files of same extension
or show tabs for the groups of buffers present
*** DONE center text
**** NO centered-window-mode
didn't work
https://github.com/anler/centered-window-mode

https://github.com/hlissner/doom-emacs/issues/225

**** NO zen mode (doom module)
neither with zen mode
**** NO darkroom
https://github.com/joaotavora/darkroom
**** MAYBE Setting default Emacs window margins
https://superuser.com/questions/307751/setting-default-emacs-window-margins/645114
*** TODO change the behavior on org mode, edit mode, when pressing tab demotes a heading
**** TODO rebind TAB when in visual mode to no more insert snippet
*** TODO add and customize showing whitespace characters
*** TODO smooth scrolling
*** TODO ? how can I make a window colored and another (unfocused) window grayscale?
*** TODO change behavior of M-q, instead of separating lines to a given width
make it join everything in one single line

or bind this desired behaior to another key, like C-q
*** TODO get the scrollbar on the right back
**** TODO style the scrollbar
thicker but less prominent, less call for attention
*** NO change the which key position to the middle of the screen or on the vertical
I am using vertico now so it may not be which key anymore

which key github page / documentation
https://github.com/justbur/emacs-which-key#popup-type-options

I can't do it...
*** TODO change the size of which key to go beyond 50% of the screen
*** TODO configure the dashboard
what you want in it?
*** TODO configure org capture templates
what will you capture?
**** TODO brain dump / fleeting thoughts
*** TODO how to fix the "us international with dead keys" problem on Emacs
maybe this can solve the issue:
https://www.emacswiki.org/emacs/DeadKeys

another resource trying to fix by having 2 keyboard layouts:
https://askubuntu.com/questions/364292/dead-keys-in-emacs-with-ibus

how to test it?

there wass something I couldn't do in evil mode
*** TODO ? find a way to show the other options on which key
preferably bind =C-h= and =C-l=, or =C-j= and =C-k= to go forwards and backwards
on the list

maybe it is not needed, because you can type =?=, and get a searchable list

** TODO + text formatting / styling / completion
*** DONE show syntax markers when inside the word that is surounded by them
the name of the package is =org-reveal=
*** TODO change fundamental mode to org mode?
*** TODO ? how to make emacs highlight given words with different colors no metter what mode it is in
https://kitchingroup.cheme.cmu.edu/blog/2016/01/16/Colored-text-in-org-mode-with-export-to-HTML/
*** TODO change elisp formatting rules
make end of parenthesis line up with the oppening parenthesis on its own line
*** TODO add code completion on emacs lisp blocks (or any org-babel block really)
*** TODO configure snippets
*** TODO configure grammar with that proram I found
**** TODO install
look on email for grammar, synthax or spelling

https://languagetool.org/

https://github.com/mhayashi1120/Emacs-langtool
**** TODO configure
** TODO + keybindings
*** TODO add documentation to this config about every key mapping in Emacs and Doom Emacs
making the distinction of the keybinding comming from Emacs or Doom Emacs, including which package overrides that keybinding, also document if the keybinding is changed by me
** TODO + fixes
*** TODO emacs is slow in org files
how to troubleshoot emacs performance
https://emacs.stackexchange.com/questions/5359/how-can-i-troubleshoot-a-very-slow-emacs

https://www.reddit.com/r/emacs/comments/lt51wy/how_to_diagnose_slow_emacs_at_runtime/

https://www.emacswiki.org/emacs/ProfileDotEmacs

https://stardiviner.github.io/Blog/Emacs-slow-and-heavy-Profile,-Benchmark-your-Emacs,-and-speed-it-up.html
* documentation
** org
*** org-roam
**** link
https://www.orgroam.com/manual.html
**** exerpts
***** 5 Getting Started
****** 5.1 The Org-roam Node
#+begin_quote
A node is any *headline* or *top level file* /with an ID/.
#+end_quote

Headlines without IDs will not be considered Org-roam nodes.

Org IDs can be added to files or headlines via the interactive command =M-x
org-id-get-create=.
****** 5.2 Links between Nodes
We link between nodes using Org’s standard ID link (e.g. \id:\foo).

While only ID links will be considered during the computation of links between
nodes, Org-roam caches all other links in the documents for external use.
****** 5.3 Setting up Org-roam
To start using Org-roam, pick a location to store the Org-roam files.

The directory that will contain your notes is specified by the variable
=org-roam-directory=.

=(org-roam-db-autosync-mode)= is used to run functions on file changes to maintain
cache consistency
****** 5.4 Creating and Linking Nodes
- =org-roam-node-insert=:
  + creates a node if it does not exist, and inserts a link to the node at
    point.
  + This brings up the list of nodes
  + Selecting the node will insert an =id:= link to the node.
  + If you instead entered a title that does not exist it prompts to create a
    node

- =org-roam-node-find=:
  + creates a node if it does not exist, and visits the node.
  + will show a list of titles for nodes that reside in =org-roam-directory=.

- =org-roam-capture=:
  + creates a node if it does not exist, and restores the current window
    configuration upon completion.
****** 5.5 Customizing Node Completions
Using a completion engine:

For example, to include a column for tags up to 10 character widths wide, one
can set org-roam-node-display-template as such:

#+begin_src elisp
(setq org-roam-node-display-template
      (concat "${title:*} "
              (propertize "${tags:10}" 'face 'org-tag)
      )
)

#+end_src
***** 6 Customizing Node Caching
****** 6.1 How to cache
sqline vs sqlite3
****** 6.2 What to cache
There are instances where you may want to have headlines with ID, but not have
them cached by Org-roam.

To exclude a headline from the Org-roam database, set the =ROAM_EXCLUDE= property
to a non-nil value.

For example:

#+begin_src org
/* Foo
/  :PROPERTIES:
/  :ID:       foo
/  :ROAM_EXCLUDE: t
/  :END:
#+end_src

exlude the =:ATTACH:= tag

#+begin_src elisp
(setq org-roam-db-node-include-function
      (lambda ()
        (not (member "ATTACH" (org-get-tags)))))
#+end_src

links inside property drawers

Use =org-roam-db-extra-links-elements= to specify which additional Org AST element
types to consider.

Additionally, one may want to ignore certain keys from being excluded within
property drawers.

For example, we would not want ROAM_REFS links to be self-referential.

Hence, to exclude specific keys, we use =org-roam-db-extra-links-exclude-keys=.
****** 6.3 When to cache
You can disable the automatic updating of the database by setting
=org-roam-db-update-on-save= to nil.

Disable this if your files are large and updating the database is slow.
***** 7 The Org-roam Buffer
****** _
Org-roam provides the Org-roam buffer: an interface to view relationships with other notes (backlinks, reference links, unlinked references etc.). There are two main commands to use here:

- =org-roam-buffer-toggle=:
  + Launch an Org-roam buffer that tracks the node currently at point. This
    means that the content of the buffer changes as the point is moved, if
    necessary.

- =org-roam-buffer-display-dedicated=:
  + Launch an Org-roam buffer for a specific node without visiting its file.
    Unlike org-roam-buffer-toggle you can have multiple such buffers and their
    content won’t be automatically replaced with a new node at point.
****** 7.1 Navigating the Org-roam Buffer
Here are several of the more useful magit-section keybindings:

    - M-{N}: magit-section-show-level-{N}-all

    - n: magit-section-forward

    - <TAB>: magit-section-toggle

    - <RET>: org-roam-buffer-visit-thing
****** 7.2 Configuring what is displayed in the buffer
To configure what sections are displayed in the buffer, set ~org-roam-mode-sections.

(this is the default)
#+begin_src elisp
(setq org-roam-mode-sections
      (list
       #'org-roam-backlinks-section
       #'org-roam-reflinks-section
    ;; #'org-roam-unlinked-references-section
      )
)
#+end_src

For each section function, you can pass args along to modify its behaviour.

For example, if you want to render unique sources for backlinks (and also keep
rendering reference links), set =org-roam-mode-sections= as follows:

#+begin_src elisp
(setq org-roam-mode-sections
      '(
        (org-roam-backlinks-section
         :unique t)
        org-roam-reflinks-section)
)
#+end_src
****** 7.3 Configuring the Org-roam buffer display
The author’s recommended configuration is as follows:

(regular window)
#+begin_src elisp
(add-to-list 'display-buffer-alist
             '(
               "\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)
              )
)
#+end_src

(side-window)
#+begin_src elisp
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-side-window)
               (side . right)
               (slot . 0)
               (window-width . 0.33)
               (window-parameters . ((no-other-window . t)
                                     (no-delete-other-windows . t)))
              )
)
#+end_src
****** 7.4 TODO Styling the Org-roam buffer
empty
***** 8 Node Properties
****** 8.1 Standard Org properties
****** 8.2 Titles and Aliases
alias

To assign an alias to a node, add the “ROAM_ALIASES” property to the node:

#+begin_src org
\* Artificial Intelligence
\:PROPERTIES:
\:ROAM_ALIASES: AI
\:END:
#+end_src

functions to add or remove alias: =org-roam-alias-add alias=, =org-roam-alias-remove=
****** 8.3 Tags
Tags for top-level (file) nodes are pulled from the =#+filetags= keyword

Tags for headline level nodes are regular Org tags.

Note that the #+filetags keyword results in tags being inherited by headers
within the file.
****** 8.4 Refs
Refs are unique identifiers for nodes. These keys allow references to the key to
show up in the Org-roam buffer.

For example, a node for a website may use the URL as the ref, and a node for a
paper may use an Org-ref citation key.

To add a ref, add to the “ROAM_REFS” property as follows:

#+begin_src org
\* Google
\:PROPERTIES:
\:ROAM_REFS: https://www.google.com/
\:END:
#+end_src

With the above example, if another node links to https://www.google.com/, it
will show up as a “reference backlink”.

You may assign multiple refs to a single node, for example when you want
multiple papers in a series to share the same note, or an article has a citation
key and a URL at the same time

functions:

Function: org-roam-ref-add ref

    Add REF to the node at point. When called interactively, prompt for the ref
    to add.

Function: org-roam-ref-remove

    Remove a ref from the node at point.
***** 9 Citations
Org-roam supports the caching of both org roam citations and in-built (org mode)
citations (of form [cite:@key]) and =org-ref= citations (of form cite:key).
****** 9.1 Using the Cached Information
To designate the node to be the canonical node for the academic paper, we can
use its unique citation key:

for org-ref.

#+begin_src org
\* Probabilistic Robotics
\:PROPERTIES:
\:ID:       51b7b82c-bbb4-4822-875a-ed548cffda10
\:ROAM_REFS: cite:thrun2005probabilistic
\:END:
#+end_src
***** 10 Completion
****** 10.1 Completing within Link Brackets
****** 10.2 Completing anywhere
***** 11 Encryption
***** 12 Org-roam Protocol
Org-roam provides extensions for capturing content from external applications
such as the browser, via =org-protocol=.

Org-roam extends org-protocol with 2 protocols: the =roam-node= and =roam-ref=
protocols.
****** 12.1 Installation
******* _
To enable Org-roam’s protocol extensions, simply add the following to your init
file:

#+begin_src elisp
(require 'org-roam-protocol)
#+end_src

set up org-protocol:

to use org-protocol, once must:

- launch the emacsclient process
- Register org-protocol:// as a valid scheme-handler
******* 12.1.1 Linux
For Linux users, create a desktop application in
=~/.local/share/applications/org-protocol.desktop=:

#+begin_src conf
[Desktop Entry]
Name=Org-Protocol
Exec=emacsclient %u
Icon=emacs-icon
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol
#+end_src

Associate org-protocol:// links with the desktop application by running in your
shell:

#+begin_src bash
xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_src

To disable the “confirm” prompt in Chrome, you can also make Chrome show a
checkbox to tick, so that the Org-Protocol Client app will be used without
confirmation.

To do this, run in a shell:

#+begin_src bash
sudo mkdir -p /etc/opt/chrome/policies/managed/
sudo tee /etc/opt/chrome/policies/managed/external_protocol_dialog.json >/dev/null <<'EOF'
{
  "ExternalProtocolDialogShowAlwaysOpenCheckbox": true
}
EOF
sudo chmod 644 /etc/opt/chrome/policies/managed/external_protocol_dialog.json
#+end_src

and then restart Chrome (for example, by navigating to <chrome://restart>) to
make the new policy take effect.
******* 12.1.2 Mac OS
******* 12.1.3 Windows
****** 12.2 The roam-node protocol
The roam-node protocol opens the node with ID specified by the node key (e.g.
org-protocol://roam-node?node=node-id). org-roam-graph uses this to make the
graph navigable.
****** 12.3 The roam-ref protocol
This protocol finds or creates a new note with a given =ROAM_REFS=:

To use this, create the following bookmarklet in your browser:

#+begin_src javascript
javascript:location.href =
    'org-protocol://roam-ref?template=r&ref='
    + encodeURIComponent(location.href)
    + '&title='
    + encodeURIComponent(document.title)
    + '&body='
    + encodeURIComponent(window.getSelection())
#+end_src

where template is the template key for a template in
org-roam-capture-ref-templates (see The Templating System).
***** 13 The Templating System
****** _
Org-roam extends the =org-capture= system, providing a smoother note-taking
experience.

However, these extensions mean =Org-roam= capture templates are
incompatible with =org-capture= templates.

Org-roam’s templates are specified by org-roam-capture-templates.

Just like =org-capture-templates=, =org-roam-capture-template= can contain multiple
templates.

If =org-roam-capture-templates= only contains one template, there will be no
prompt for template selection.
****** 13.1 Template Walkthrough
(default template)
#+begin_src elisp
(("d" "default" plain "%?"
  :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                     "#+title: ${title}\n")
  :unnarrowed t)
)
#+end_src

- The template has short key "d".
  + If you have only one template, org-roam automatically chooses this template
    for you.

- The template is given a description of "default".

- plain text is inserted.
  + Other options include Org headings via entry.

- Notice that the target that’s usually in Org-capture templates is missing
  here.

- "%?" is the template inserted on each call to org-roam-capture-.
  + This template means don’t insert any content, but place the cursor here.

- :target is a compulsory specification in the Org-roam capture template.
  + The first element of the list indicates the type of the target, the second
    element indicates the location of the captured node, and the rest of the
    elements indicate prefilled template that will be inserted and the position
    of the point will be adjusted for.
  + The latter behavior varies from type to type of the capture target.

- :unnarrowed t tells org-capture to show the contents for the whole file,
  rather than narrowing to just the entry.
  + This is part of the Org-capture templates.

See the =org-roam-capture-templates= documentation for more details and
customization options.
****** 13.2 Org-roam Template Expansion
Org-roam provides the ${foo} syntax for substituting variables with known
strings.

...
***** 14 Graphing
****** 14.1 Graph Options
***** 15 Org-roam Dailies
Org-roam provides journaling capabilities akin to Org-journal with
org-roam-dailies.
****** 15.1 Configuration
******* _
For org-roam-dailies to work, you need to define two variables:

Variable: org-roam-dailies-directory

    Path to daily-notes. This path is relative to org-roam-directory.

Variable: org-roam-dailies-capture-templates

    Capture templates for daily-notes in Org-roam.

Here is a sane default configuration:

#+begin_src elisp
(setq org-roam-dailies-directory "daily/")

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :target (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n")
        )
       )
)
#+end_src
******* 15.2 Usage
***** 16 Performance Optimization
***** 17 The Org-mode Ecosystem
****** 17.1 Browsing History with winner-mode
winner-mode is a global minor mode that allows one to undo and redo changes in
the window configuration.

winner-mode can be used as a simple version of browser history for Org-roam.

Each click through org-roam links (from both Org files and the backlinks buffer)
causes changes in window configuration, which can be undone and redone using
winner-mode.

To use winner-mode, simply enable it, and bind the appropriate interactive
functions:

#+begin_src emacs-lisp
(winner-mode +1)
(define-key winner-mode-map (kbd "<M-left>") #'winner-undo)
(define-key winner-mode-map (kbd "<M-right>") #'winner-redo)
#+end_src
****** 17.2 Versioning Notes
****** 17.3 Full-text search with Deft
#+begin_src elisp
(use-package deft
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory org-roam-directory))
#+end_src
****** 17.4 Org-journal
#+begin_src emacs-lisp
(use-package org-journal
  :bind
  ("C-c n j" . org-journal-new-entry)
  :custom
  (org-journal-date-prefix "#+title: ")
  (org-journal-file-format "%Y-%m-%d.org")
  (org-journal-dir "/path/to/journal/files/")
  (org-journal-date-format "%A, %d %B %Y"))
#+end_src
****** 17.5 Org-download
#+begin_src emacs-lisp
(use-package org-download
  :after org
  :bind
  (:map org-mode-map
        (("s-Y" . org-download-screenshot)
         ("s-y" . org-download-yank))))
#+end_src
****** 17.6 mathpix.el
****** 17.7 Org-noter / Interleave (abandomware)
****** 17.8 Bibliography
org-roam-bibtex offers tight integration between org-ref, helm-bibtex and
org-roam.

This helps you manage your bibliographic notes under org-roam.
****** 17.9 Spaced Repetition
***** 18 FAQ
****** 18.1 How do I have more than one Org-roam directory?
Emacs supports directory-local variables, allowing the value of
org-roam-directory to be different in different directories.

It does this by checking for a file named .dir-locals.el.

To add support for multiple directories, override the org-roam-directory
variable using directory-local variables.

This is what .dir-locals.el may contain:

#+begin_src emacs-lisp
((nil . ((org-roam-directory . "/path/to/alt/org-roam-dir")
         (org-roam-db-location . "/path/to/alt/org-roam-dir/org-roam.db"))))
#+end_src

Note org-roam-directory and org-roam-db-location should be an absolute path, not
relative.

Alternatively, use eval if you wish to call functions:

#+begin_src emacs-lisp
(
 (nil .
        (
         (eval .
                 (setq-local
                  org-roam-directory
                    (expand-file-name
                      (locate-dominating-file
                        default-directory ".dir-locals.el")
                    )
                 )
         )
         (eval . (setq-local
                  org-roam-db-location
                    (expand-file-name "org-roam.db"
                      org-roam-directory)
                 )
         )
        )
 )
)
#+end_src

All files within that directory will be treated as their own separate set of
Org-roam files. Remember to run org-roam-db-sync from a file within that
directory, at least once.
****** 18.2 How do I create a note whose title already matches one of the candidates?
****** 18.3 How can I stop Org-roam from creating IDs everywhere?
check the value you have set for org-id-link-to-org-use-id: setting it to
'create-if-interactive is a popular option.
****** 18.4 How do I migrate from Roam Research?
****** 18.5 How to migrate from Org-roam v1?
****** 18.6 How do I publish my notes with an Internet-friendly graph?
******* 18.6.1 Configure org-mode for publishing
******* 18.6.2 Overriding the default link creation function
******* 18.6.3 Copying the generated file to the export directory
****** 18.7 I’m seeing this “Selecting deleted buffer” error. What do I do?
****** 19 Developer’s Guide to Org-roam
****** 20 Appendix
******* 20.1 Note-taking Workflows
******** Books
********* How To Take Smart Notes
https://www.goodreads.com/book/show/34507927-how-to-take-smart-notes
******** Articles
********* The Zettelkasten Method - LessWrong 2.0
https://www.lesswrong.com/posts/NfdHG6oHBJ8Qxc26s/the-zettelkasten-method-1
********* Building a Second Brain in Roam…And Why You Might Want To : RoamResearch
https://www.reddit.com/r/RoamResearch/comments/eho7de/building_a_second_brain_in_roamand_why_you_might
********* Roam Research: Why I Love It and How I Use It - Nat Eliason
https://www.nateliason.com/blog/roam
********* Adam Keesling’s Twitter Thread
https://twitter.com/adam_keesling/status/1196864424725774336?s=20
********* How To Take Smart Notes With Org-mode · Jethro Kuan
https://blog.jethro.dev/posts/how_to_take_smart_notes_org/
******** Threads
********* Ask HN: How to Take Good Notes
https://news.ycombinator.com/item?id=22473209
******** Videos
********* How to Use Roam to Outline a New Article in Under 20 Minutes
https://www.youtube.com/watch?v=RvWic15iXjk
****** 20.2 Ecosystem
empty
**** questions
***** how can I delete an org-roam note/node?
****** simple way
Right now, deleting a file will result in links to the current file breaking.

If you delete the file using Emacs (with dired, or calling =M-x delete-file=), the
cache remains consistent.

If you delete the file from outside Emacs, it won’t, but is not a big issue,
because running =M-x org-roam-db-build-cache= once more will bring it to a
consistent state.
****** more sofisticated way

I currently handle that with a script to remove all the references first, then I
delete the file:

#+begin_src python
#!/usr/bin/env python3

import re
import os
import subprocess
import sys

def get_id(fname):
    with open(fname) as f:
        content = f.read()
        return re.findall(r":ID:\s+(.*)", content)[0]

def notes_with_pattern(pat):
    roam_folder = os.path.expanduser("~/.roam/")
    raw = subprocess.check_output(f"rg -l {pat} {roam_folder}", shell=True).decode("utf-8")
    return raw.splitlines()

def subid(content, ident):
    pat = f"\[\[id:{ident}\]\[(.*?)\]\]"
    return re.sub(pat, "\\1", content)

def remove_note_mention(fn, ident):
    with open(fn) as f:
        content = f.read()
    newcontent = subid(content, ident)
    with open(fn, "w") as f:
        f.write(newcontent)
    print(f"Edited {fn}")

def delete_note(fname):
    ident = get_id(fname)
    print(f"Removing id {ident}")
    to_edit = [n for n in notes_with_pattern(ident)
               if n != fname]
    for fn in to_edit:
        remove_note_mention(fn, ident)

if __name__ == '__main__':
    delete_note(sys.argv[1])
#+end_src

And I call it from emacs with:

#+begin_src elisp
(defun delete-org-roam-note-references ()
  (interactive)
  (async-shell-command (s-concat "delete_note.py " (buffer-file-name))))
#+end_src

Note: It does not work with heading references just whole notes ones.
* Config files
** init.el
#+begin_src emacs-lisp :tangle ./init.el

#+end_src
*** introduction
This file controls *what Doom modules are enabled* and *what order they load in*.
*Remember to run =doom sync= after modifying it!*

NOTE Press =SPC h d h= (or =C-h d h= for non-vim users) to access Doom's
documentation. There you'll find a "Module Index" link where you'll find a
comprehensive list of Doom's modules and what flags they support.

NOTE Move your cursor over a module's name (or its flags) and press =K= (or =C-c
c k= for non-vim users) to view its documentation. This works on flags as well
(those symbols that start with a plus).

Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
directory (for easy access to its source code).

*** doom block start
#+begin_src emacs-lisp :tangle ./init.el
;;; init.el -*- lexical-binding: t; -*-
(doom!
#+end_src
*** input
**** input start
#+begin_src emacs-lisp :tangle ./init.el
       :input
#+end_src
**** NO chinese
***** code
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;chinese
#+end_src
**** NO japanese
***** code
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;japanese
#+end_src
**** NO layout
***** code
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;(layout            ; auie,ctsrnm is the superior home row
       ;; +azerty
       ;; +bepo
       ;; )
#+end_src
*** completion
Modules that provide new interfaces or frameworks for completion, including code
completion.
**** completion start
#+begin_src emacs-lisp :tangle ./init.el
       :completion
#+end_src
**** YES company
+ company =+childframe +tng= - The ultimate code completion backend
#+begin_src emacs-lisp :tangle ./init.el
       (company           ; the ultimate code completion backend
       ;; +childframe
       ;; +tng
        )
#+end_src
**** NO helm
+ helm =+fuzzy +childframe= - *Another* search engine for love and life
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;(helm              ; the *other* search engine for love and life
       ;; +fuzzy
       ;; +childframe
       ;; )
#+end_src
**** NO ido
+ ido - The /other/ *other* search engine for love and life
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;ido               ; the other *other* search engine...
#+end_src
**** NO ivy
+ ivy =+fuzzy +prescient +childframe +icons= - /The/ search engine for love and
  life
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;(ivy              ; a search engine for love and life
       ;; +fuzzy
       ;; +childframe
       ;; +prescient
       ;; +icons
       ;;)
#+end_src
**** YES vertico
+ vertico =+icons= - The search engine of the future
#+begin_src emacs-lisp :tangle ./init.el
       (vertico           ; the search engine of the future
        +icons
        )
#+end_src
*** UI
Aesthetic modules that affect the Emacs interface or user experience.

**** UI start
#+begin_src emacs-lisp :tangle ./init.el
       :ui
#+end_src
**** NO deft
+ deft - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; deft              ; notational velocity for Emacs
#+end_src
**** YES doom
+ doom - TODO
#+begin_src emacs-lisp :tangle ./init.el
       doom              ; what makes DOOM look the way it does
#+end_src
**** YES doom-dashboard
+ doom-dashboard - TODO
#+begin_src emacs-lisp :tangle ./init.el
       doom-dashboard    ; a nifty splash screen for Emacs
#+end_src
**** YES doom-quit
+ doom-quit - TODO
#+begin_src emacs-lisp :tangle ./init.el
       doom-quit       ; DOOM quit-message prompts when you quit Emacs
#+end_src
**** YES emoji
+ emoji =+ascii +github +unicode= - Adds emoji support to Emacs
#+begin_src emacs-lisp :tangle ./init.el
       (emoji            ; 🙂
       ;; +ascii
       ;; +github
        +unicode
       )
#+end_src
**** YES hl-todo
+ hl-todo - TODO
#+begin_src emacs-lisp :tangle ./init.el
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
#+end_src
**** YES hydra
+ hydra - TODO
#+begin_src emacs-lisp :tangle ./init.el
      ;; hydra
#+end_src
**** NO indent-guides
+ indent-guides - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; indent-guides     ; highlighted indent columns
#+end_src
**** NO ligatures
+ ligatures =+extra +fira +hasklig +iosevka +pragmata-pro= - Ligature support for Emacs

+ =+fira= Enables =Fira Code= ligatures. This requires Fira Code Symbol and a
  patched version of Fira Code (see below).
+ =+hasklig= Enable =Hasklig= ligatures. This requires a patched version of the
  HaskLig font (see below).
+ =+iosevka= Enable =Iosevka= ligatures. This requires a patched version of the
  Iosevka font (see below).
+ =+pragmata-pro= Enable =Pragmata Pro= ligatures. This requires the [[https://www.fsd.it/shop/fonts/pragmatapro/][Pragmata
  Pro font]].
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; (ligatures         ; ligatures and symbols to make your code pretty again
       ;; +extra
       ;; +fira
       ;; +hasklig
       ;; +iosevka
       ;; +pragmata-pro
       ;; )
#+end_src
**** NO minimap
+ minimap - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; minimap           ; show a map of the code on the side
#+end_src
**** YES modeline
+ modeline =+light= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (modeline          ; snazzy, Atom-inspired modeline, plus API
       ;; +light
        )
#+end_src
**** NO nav-flash
+ nav-flash - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;nav-flash         ; blink cursor line after big motions
#+end_src
**** NO neotree
+ neotree - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;neotree           ; a project drawer, like NERDTree for vim
#+end_src
**** NO ophints
+ ophints - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; ophints           ; highlight the region an operation acts on
#+end_src
**** NO popup
+ popup =+all +defaults= - Makes temporary/disposable windows less intrusive
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; (popup            ; tame sudden yet inevitable temporary windows
      ;;  +defaults
      ;;  +all
      ;;  )
#+end_src
**** NO tabs
+ tabs - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; tabs              ; a tab bar for Emacs
#+end_src
**** NO treemacs
+ treemacs - =+lsp= - A tree layout file explorer for Emacs
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; (treemacs          ; a project drawer, like neotree but cooler
      ;;  +lsp
      ;;  )
#+end_src
**** YES unicode
+ unicode - TODO
#+begin_src emacs-lisp :tangle ./init.el
       unicode           ; extended unicode support for various languages
#+end_src
**** YES vc-gutter
+ vc-gutter - TODO
#+begin_src emacs-lisp :tangle ./init.el
       vc-gutter         ; vcs diff in the fringe
#+end_src
**** NO vi-tilde-fringe
+ vi-tilde-fringe - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; vi-tilde-fringe   ; fringe tildes to mark beyond EOB
#+end_src
**** YES window-select
+ window-select =+switch-window +numbers= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (window-select     ; visually switch windows
        +numbers
        )
#+end_src
**** NO workspaces
+ workspaces - Isolated workspaces
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; workspaces        ; tab emulation, persistence & separate workspaces
#+end_src
**** YES zen
+ zen - Distraction-free coding (or writing)
#+begin_src emacs-lisp :tangle ./init.el
       zen               ; distraction-free coding or writing
#+end_src
*** Editor
Modules that affect and augment your ability to manipulate or insert text.

**** Editor start
#+begin_src emacs-lisp :tangle ./init.el
       :editor
#+end_src
**** YES evil
+ evil =+everywhere= - transforms Emacs into Vim
#+begin_src emacs-lisp :tangle ./init.el
       (evil               ; come to the dark side, we have cookies
        +everywhere
        )
#+end_src
**** NO file-templates
+ file-templates - Auto-inserted templates in blank new files
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; file-templates    ; auto-snippets for empty files
#+end_src
**** NO fold
+ fold - universal code folding
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; fold                ; (nigh) universal code folding
#+end_src
**** NO format
+ format =+onsave= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;(format             ; automated prettiness
       ;; +onsave
       ;; )
#+end_src
**** NO god
+ god - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;god               ; run Emacs commands without modifier keys
#+end_src
**** NO lispy
+ lispy - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;lispy             ; vim for lisp, for people who don't like vim
#+end_src
**** NO multiple-cursors
+ multiple-cursors - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;multiple-cursors  ; editing in many places at once
#+end_src
**** NO objed
+ objed =+manual= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;(objed             ; text object editing for the innocent
       ;; +manual
       ;; )
#+end_src
**** NO parinfer
+ parinfer - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;parinfer          ; turn lisp into python, sort of
#+end_src
**** NO rotate-text
+ rotate-text - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;rotate-text       ; cycle region at point between text candidates
#+end_src
**** YES snippets
+ snippets - Snippet expansion for lazy typists
#+begin_src emacs-lisp :tangle ./init.el
       snippets          ; my elves. They type so I don't have to
#+end_src
**** NO word-wrap
+ word-wrap - soft wrapping with language-aware indent
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;word-wrap         ; soft wrapping with language-aware indent
#+end_src
*** Emacs
Modules that reconfigure or augment packages or features built into Emacs.
**** Emacs sart
#+begin_src emacs-lisp :tangle ./init.el
       :emacs
#+end_src
**** YES dired
+ dired =+ranger +icons= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (dired             ; making dired pretty [functional]
        +ranger
        +icons
        )
#+end_src
**** NO electric
+ electric - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; electric          ; smarter, keyword-based electric-indent
#+end_src
**** YES ibuffer
+ ibuffer =+icons= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (ibuffer          ; interactive buffer management
        +icons
        )
#+end_src
**** YES undo
+ undo =+tree= - A smarter, more intuitive & persistent undo history
#+begin_src emacs-lisp :tangle ./init.el
       (undo             ; persistent, smarter undo for your inevitable mistakes
        +tree
        )
#+end_src
**** YES vc
+ vc - TODO
#+begin_src emacs-lisp :tangle ./init.el
       vc                ; version-control and Emacs, sitting in a tree
#+end_src

*** Term
Modules that offer terminal emulation.
**** Term start
#+begin_src emacs-lisp :tangle ./init.el
       :term
#+end_src
**** NO eshell
+ eshell - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;eshell            ; the elisp shell that works everywhere
#+end_src
**** NO shell
+ shell - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;shell             ; simple shell REPL for Emacs
#+end_src
**** NO term
+ term - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;term              ; basic terminal emulator for Emacs
#+end_src
**** NO vterm
+ vterm - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;vterm             ; the best terminal emulation in Emacs
#+end_src
*** Checkers
**** Checkers start
#+begin_src emacs-lisp :tangle ./init.el
       :checkers
#+end_src
**** NO syntax
+ syntax =+childframe= - Live error/warning highlights
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; (syntax              ; tasing you for every semicolon you forget
      ;; +childframe
      ;; )
#+end_src
**** NO spell
+ spell =+aspell +flyspell +enchant +everywhere +hunspell= - Spell checking
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; (spell              ; tasing you for misspelling mispelling
      ;; +flyspell
      ;; )
#+end_src
**** YES grammar
+ grammar - TODO
#+begin_src emacs-lisp :tangle ./init.el
       grammar             ; tasing grammar mistake every you make
#+end_src
*** Tools
Small modules that give Emacs access to external tools & services.
**** Tools start
#+begin_src emacs-lisp :tangle ./init.el
       :tools
#+end_src
**** NO ansible
+ ansible - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;ansible
#+end_src
**** NO biblio
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;biblio            ; Writes a PhD for you (citation needed)
#+end_src
**** NO debugger
+ debugger =+lsp= - A (nigh-)universal debugger in Emacs
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; (debugger          ; FIXME stepping through code, to help you add bugs
       ;; +lsp
       ;; )
#+end_src
**** NO direnv
+ direnv - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;direnv
#+end_src
**** NO docker
+ docker =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; (docker
       ;; +lsp
       ;; )
#+end_src
**** NO editorconfig
+ editorconfig - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;editorconfig      ; let someone else argue about tabs vs spaces
#+end_src
**** NO ein - jupyper notebooks
+ ein - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;ein               ; tame Jupyter notebooks with emacs
#+end_src
**** NO eval
+ eval =+overlay= - REPL & code evaluation support for a variety of languages
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; (eval      ; run code, run (also, repls)
      ;;  +overlay
      ;;  )
#+end_src
**** NO gist
+ gist - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;gist              ; interacting with github gists
#+end_src
**** NO lookup
+ lookup =+dictionary +docsets +offline= - Universal jump-to & documentation lookup backend
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; (lookup              ; navigate your code and its documentation
       ;; +dictionary
       ;; +docsets
       ;; +offline
       ;; )   ; Universal jump-to & documentation lookup

#+end_src
**** YES lsp
+ lsp =+peek +eglot= - Installation and configuration of language server protocol client (lsp-mode or eglot)
#+begin_src emacs-lisp :tangle ./init.el
       (lsp
        +peek          ; M-x vscode
       ;; +eglot
        )
#+end_src
**** YES magit
+ magit =+forge= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (magit             ; a git porcelain for Emacs
        +forge
        )
#+end_src
**** NO make
+ make - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; (pass              ; password manager for nerds
       ;; +auth
       ;; )
#+end_src
**** YES pdf
+ pdf - TODO
#+begin_src emacs-lisp :tangle ./init.el
       pdf               ; pdf enhancements
#+end_src
**** NO prodigy
+ prodigy - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;prodigy           ; FIXME managing external services & code builders
#+end_src
**** YES rgb
+ rgb - TODO
#+begin_src emacs-lisp :tangle ./init.el
       rgb               ; creating color strings
#+end_src
**** NO taskrunner
+ taskrunner - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;taskrunner        ; taskrunner for all your projects
#+end_src
**** NO terraform
+ terraform - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;terraform         ; infrastructure as code
#+end_src
**** NO tmux
+ tmux - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;upload            ; map local to remote projects via ssh/ftp
#+end_src

*** OS
Modules to improve integration into your OS, system, or devices.

+ macos - Improve Emacs' compatibility with macOS
+ tty =+osc= - Improves the terminal Emacs experience.

... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       :os

       (:if IS-MAC macos)  ; improve compatibility with macOS

       ;; (tty               ; improve the terminal Emacs experience
       ;; +osc
       ;; )

#+end_src
*** lang
Modules that bring support for a language or group of languages to Emacs.
**** languages start
#+begin_src emacs-lisp :tangle ./init.el
       :lang
#+end_src
**** NO Agda
+ agda =+local= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;agda              ; types of types of types of types...
#+end_src
**** NO Beancount
+ beancount =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;beancount         ; mind the GAAP
#+end_src
**** NO C/C++
+ cc =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; (cc                ; C > C++ == 1
      ;;  +lsp
      ;;  )
#+end_src
**** NO Clojure
+ clojure =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;clojure           ; java with a lisp
#+end_src
**** NO common-lisp
+ common-lisp - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
#+end_src
**** NO coq
+ coq - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;coq               ; proofs-as-programs
#+end_src
**** NO crystal
+ crystal - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;crystal           ; ruby at the speed of c
#+end_src
**** NO C#
+ csharp =+lsp +unity= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
        ;; (csharp            ; unity, .NET, and mono shenanigans
        ;; +lsp
        ;; +unity
        ;; )
#+end_src
**** NO dart / flutter
+ dart =+lsp +flutter=
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;(dart              ; paint ui and not much else
       ;; +lsp
       ;; +flutter
       ;; )
#+end_src
**** YES data
+ data - TODO
#+begin_src emacs-lisp :tangle ./init.el
       data              ; config/data formats
#+end_src
**** NO elixir
+ elixir =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;elixir            ; erlang done right
#+end_src
**** NO dhall
WTF is this?

... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;dhall
#+end_src
**** NO elm
+ elm =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;elm               ; care for a cup of TEA?
#+end_src
**** YES emacs-lisp
+ emacs-lisp - TODO
#+begin_src emacs-lisp :tangle ./init.el
       emacs-lisp        ; drown in parentheses
#+end_src
**** NO erlang
+ erlang =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;erlang            ; an elegant language for a more civilized age
#+end_src
**** NO ess
+ ess =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;ess               ; emacs speaks statistics
#+end_src
**** NO factor
+ factor - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;factor
#+end_src
**** NO faust
+ faust - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;faust             ; dsp, but you get to keep your soul
#+end_src
**** NO fortran
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
#+end_src
**** NO F#
+ fsharp =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; (fsharp            ; ML stands for Microsoft's Language
      ;;  +lsp
      ;; )
#+end_src
**** NO F*
+ fstar - F* support
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
#+end_src
**** YES gdscript
+ gdscript =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (gdscript          ; the language you waited for
        +lsp
       )
#+end_src
**** NO go
+ go =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;(go          ; the hipster dialect
       ;; +lsp
       ;; )
#+end_src
**** NO haskell
+ haskell =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; (haskell     ; a language that's lazier than I am
       ;; +lsp
       ;; )
#+end_src
**** NO hy
+ hy - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;hy                ; readability of scheme w/ speed of python
#+end_src
**** NO idris
+ idris - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;idris             ; a language you can depend on
#+end_src
**** NO java
+ java =+meghanada +eclim +lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; (java           ; the poster child for carpal tunnel syndrome
       ;; +meghanada
       ;; )
#+end_src
**** YES javascript
+ javascript =+lsp= - JavaScript, TypeScript, and CoffeeScript support
#+begin_src emacs-lisp :tangle ./init.el
       (javascript        ; all(hope(abandon(ye(who(enter(here))))))
        +slp
        )
#+end_src
**** YES json
+ json =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (json              ; At least it ain't XML
        +lsp
        )
#+end_src
**** NO julia
+ julia =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;julia             ; a better, faster MATLAB
#+end_src
**** NO kotlin
+ kotlin =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;kotlin            ; a better, slicker Java(Script)
#+end_src
**** YES latex
+ latex =+latexmk +cdlatex +fold +lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       latex             ; writing papers in Emacs has never been so fun
#+end_src
**** NO lean
+ lean - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;lean              ; for folks with too much to prove
#+end_src
**** NO ledger
+ ledger - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;ledger            ; be audit you can be
#+end_src
**** NO lua
+ lua =+fennel +moonscript= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;lua               ; one-based indices? one-based indices
#+end_src
**** YES markdown
+ markdown =+grip= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       markdown          ; writing docs for people to ignore
#+end_src
**** NO nim
+ nim - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;nim               ; python + lisp at the speed of c
#+end_src
**** NO nix
+ nix - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;nix               ; I hereby declare "nix geht mehr!"
#+end_src
**** NO ocaml
+ ocaml =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;ocaml             ; an objective camel
#+end_src
**** YES org
***** Module Flags
+ =+brain= Enables [[https://github.com/Kungsgeten/org-brain][org-brain]] integration.
+ =+dragndrop= Enables drag-and-drop support for images and files; inserts
  inline previews for images and an icon+link for other media types.
+ =+gnuplot= Installs gnuplot & gnuplot-mode, which enables rendering images
  from gnuplot src blocks or plotting tables with ~org-plot/gnuplot~ (bound to
  =SPC m b p=, by default).
+ =+hugo= Enables integration with [[https://gohugo.io][hugo]] to export from Emacs well-formed
  ([[https://github.com/russross/blackfriday][blackfriday]]) markdown.
+ =+ipython= (**DEPRECATED**) Enables ipython integration for babel.
+ =+journal= Enables [[https://github.com/bastibe/org-journal][org-journal]] integration.
+ =+jupyter= Enables Jupyter integration for babel.
+ =+noter= Enables org-noter integration. Keeps notes in sync with a document.
  Requires [[https://github.com/politza/pdf-tools][pdf-tools]] (=:tools pdf=) or [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Document-View.html][DocView]] or [[https://github.com/wasamasa/nov.el][nov.el]] to be enabled.
+ =+pandoc= Enables pandoc integration into the Org exporter.
+ =+pomodoro= Enables a pomodoro timer for clocking time on tasks.
+ =+present= Enables integration with reveal.js, beamer and org-tree-slide, so
  Emacs can be used for presentations. It automatically downloads [[https://github.com/hakimel/reveal.js][reveal.js]].
+ =+pretty= Enables pretty unicode symbols for bullets and priorities, and
  better syntax highlighting for latex. Keep in mind: this can be expensive. If
  org becomes too slow, it'd be wise to disable this flag.
+ =+roam= Enables integration with [[https://github.com/org-roam/org-roam-v1][org-roam v1]]. This requires ~sqlite3~ to be
  installed on your system. Incompatible with =+roam2=.
+ =+roam2= Enables integration with [[https://github.com/org-roam/org-roam][org-roam v2]]. This requires ~sqlite3~ to be
  installed on your system. Incompatible with =+roam=.

***** code
#+begin_src emacs-lisp :tangle ./init.el
       (org              ; organize your plain life in plain text
       ;; +brain
        +dragndrop
       ;; +gnuplot
       ;; +hugo
       ;; +ipython
        +journal
       ;; +jupyter
        +noter
       ;; +pandoc
        +pomodoro
        +present
        +pretty
        +roam2
        )
#+end_src
**** NO php
+ php =+hack +lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;php               ; perl's insecure younger brother
#+end_src
**** NO plantuml
+ plantuml - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;plantuml          ; diagrams for confusing people more
#+end_src
**** NO purescript
+ purescript =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;purescript        ; javascript, but functional
#+end_src
**** YES python
+ python =+cython +lsp +pyright +pyenv +conda +poetry= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (python            ; beautiful is better than ugly
        +lsp
        )
#+end_src
**** NO qt
+ qt - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;qt                ; the 'cutest' gui framework ever
#+end_src
**** NO racket
+ racket =+lsp +xp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;racket            ; a DSL for DSLs
#+end_src
**** NO raku
+ raku - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;raku              ; the artist formerly known as perl6
#+end_src
**** NO rest (emacs REST client)
+ rest - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;rest              ; Emacs as a REST client
#+end_src
**** NO rst
+ rst - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; rst               ; ReST in peace
#+end_src
**** NO ruby
+ ruby =+lsp +rvm +rbenv +rails +chruby=
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; (ruby      ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;; +rails
       ;; )
#+end_src
**** NO rust
+ rust =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; (rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
      ;;  +lsp
      ;;  )
#+end_src
**** NO scala
+ scala =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;scala             ; java, but good
#+end_src
**** NO scheme
+ scheme =+chez +chibi +chicken +gambit +gauche +guile +kawa +mit +racket= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; (scheme    ; a fully conniving family of lisps
       ;; +chez
       ;; +chibi
       ;; +chicken
       ;; +gambit
       ;; +gauche
       ;; +guile
       ;; +kawa
       ;; +mit
       ;; +racket
       ;; )
#+end_src
**** NO sh
+ sh =+fish +lsp +powershell= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; (sh                ; she sells {ba,z,fi}sh shells on the C xor
      ;;  +lsp
      ;;  +fish
      ;; )
#+end_src
**** NO sml
+ sml - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;sml
#+end_src
**** NO solidity
+ solidity - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;solidity          ; do you need a blockchain? No.
#+end_src
**** NO swift
+ swift =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;swift             ; who asked for emoji variables?
#+end_src
**** NO terra
+ terra - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;terra             ; Earth and Moon in alignment for performance.
#+end_src
**** YES web (html / css)
+ web =+lsp= - HTML and CSS (SCSS/SASS/LESS/Stylus) support.
#+begin_src emacs-lisp :tangle ./init.el
       (web               ; HTML and CSS (SCSS/SASS/LESS/Stylus) support.
        +lsp
        )
#+end_src
**** NO yaml
+ yaml =+lsp= - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
      ;; (yaml              ; JSON, but readable
      ;;  +lsp
      ;;  )
#+end_src
**** NO zig
+ zig =+lsp= - Zig support.
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;zig               ; C, but simpler
#+end_src
*** email
+ mu4e =+org +gmail= - TODO
+ notmuch - TODO
+ wanderlust =+gmail= - TODO

... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       :email
       ;; (mu4e
       ;; +org
       ;; +gmail
       ;; )

       ;;notmuch
       ;; (wanderlust
       ;; +gmail
       ;; )
#+end_src
*** App
Application modules are complex and opinionated modules that transform Emacs
toward a specific purpose. They may have additional dependencies and *should be
loaded last*, before =:config= modules.
**** App start
#+begin_src emacs-lisp :tangle ./init.el
       :app
#+end_src
**** YES calendar
+ calendar - TODO
#+begin_src emacs-lisp :tangle ./init.el
       calendar
#+end_src
**** NO emms - emacs multimeadia management system?
+ emms - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;emms
#+end_src
**** NO everywhere
+ everywhere - TODO
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;everywhere        ; *leave* Emacs!? You must be joking
#+end_src
**** NO irc
+ irc - how neckbeards socialize
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;irc               ; how neckbeards socialize
#+end_src
**** NO rss
+ rss =+org= - an RSS client in Emacs
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;; (rss         ; emacs as an RSS reader
       ;; +org
       ;; )
#+end_src
**** NO twitter
+ twitter - A twitter client for Emacs
... #+begin_src emacs-lisp :tangle ./init.el
#+begin_src emacs-lisp :tangle no
       ;;twitter           ; twitter client https://twitter.com/vnought
#+end_src
*** config
Modules that configure Emacs one way or another, or focus on making it easier
for you to customize it yourself. It is best to load these last.

+ literate - For users with literate configs. This will tangle+compile a
  config.org in your ~doom-private-dir~ when it changes.

+ default =+bindings +smartparens= - The default module sets reasonable defaults
  for Emacs. It also provides a Spacemacs-inspired keybinding scheme and a
  smartparens config. Use it as a reference for your own modules.

#+begin_src emacs-lisp :tangle ./init.el
       :config
       ;;literate
       (default
        +bindings
        +smartparens
        )
#+end_src

*** benchmark startup time
#+begin_src emacs-lisp :tangle no
;;(when doom-debug-p
;;  (require 'benchmark-init)
;;  (add-hook 'doom-first-input-hook #'benchmark-init/deactivate))
#+end_src
*** doom block end
#+begin_src emacs-lisp :tangle ./init.el
)
#+end_src
** config.el
#+begin_src emacs-lisp :tangle ./config.el

#+end_src
*** documentation
**** macros
***** use-package!
****** _
use-package! is a Lisp macro in ‘core-modules.el’.

(use-package! NAME &rest PLIST)

Declares and configures a package.

This is a thin wrapper around ‘use-package’, and is ignored if the NAME package
is disabled by the user (with ‘package!’).

See ‘use-package’ to see what properties can be provided. Doom adds support for
two extra properties:
****** :after-call
:after-call SYMBOL|LIST
  Takes a symbol or list of symbols representing functions or hook variables.
  The first time any of these functions or hooks are executed, the package is
  loaded.
****** :defere-incrementally
:defer-incrementally SYMBOL|LIST|t
  Takes a symbol or list of symbols representing packages that will be loaded
  incrementally at startup before this one. This is helpful for large packages
  like magit or org, which load a lot of dependencies on first load. This lets
  you load them piece-meal during idle periods, so that when you finally do need
  the package, it’ll load quicker.

  NAME is implicitly added if this property is present and non-nil. No need to
  specify it. A value of ‘t’ implies NAME.
****** code examples
#+begin_src emacs-lisp :eval no
;; Use after-call to load package before hook
(use-package! projectile
  :after-call (pre-command-hook after-find-file dired-before-readin-hook))

;; defer recentf packages one by one
(use-package! recentf
  :defer-incrementally easymenu tree-widget timer
  :after-call after-find-file)

;; This is equivalent to :defer-incrementally (abc)
(use-package! abc
  :defer-incrementally t)
#+end_src
*** _
Place your private configuration here! Remember, you do not need to run =doom
sync= after modifying this file!

#+begin_src emacs-lisp :tangle ./config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
*** Checkers
**** Grammar
***** Langtool
.. #+begin_src elisp
#+begin_src emacs-lisp :tangle ./config.el
;; start ------------------------------ Checkers / Grammar / Langtool
(use-package! langtool
  :commands (langtool-check
             langtool-check-done
             langtool-show-message-at-point
             langtool-correct-buffer)
  :init (setq langtool-default-language "pt-BR")
  :config
  (unless (or langtool-bin
              langtool-language-tool-jar
              langtool-java-classpath)
    (cond (IS-LINUX
          (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*")))))
;; end -------------------------------- Checkers / Grammar / Langtool
#+end_src
***** NO writegood
... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp :tangle no
;; start -------------------------------- Checkers / Grammar / writegood
;; Detects weasel words, passive voice and duplicates. Proselint would be a better choice.
;; (use-package! writegood-mode
;;   :hook
;;   (org-mode markdown-mode
;;             rst-mode
;;             asciidoc-mode
;;             latex-mode
;;             LaTeX-mode)
;;   :config
;;   (map! :localleader
;;         :map writegood-mode-map
;;         "g" #'writegood-grade-level
;;         "r" #'writegood-reading-ease
;;   )
;; )
;; end -------------------------------- Checkers / Grammar / writegood
#+end_src
*** Fixes
**** YES Remove exit confirmation message
Removes annoying exit confirmation message

... #+begin_src emacs-lisp :tangle ./config.el
... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle ./config.el
;; start ------------------------------ fixes / remove exit confirmation message
(setq confirm-kill-emacs nil)
;; end -------------------------------- fixes / remove exit confirmation message
#+end_src
*** Info
**** name and email
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp :tangle ./config.el
;; start personal information
(setq
      user-full-name "João Luís Teixeira Pinto"
      user-mail-address "jolitp@gmail.com"
)
;; end personal information
#+end_src

**** Additional functions/macros
Here are some additional functions/macros that could help you configure Doom:

- =load!= for loading external *.el files relative to this one

- =use-package!= for configuring packages

- =after!= for running code after a package has loaded

- =add-load-path!= for adding directories to the =load-path=, relative to this
  file. Emacs searches the =load-path= when you load packages with =require= or
  =use-package=.

- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over the
highlighted symbol at press =K= (non-evil users must press =C-c c k=). This will
open documentation for it, including demos of how they are used.

You can also try =gd= (or =C-c c d=) to jump to their definition and see how
they are implemented.
*** Looks
**** Fonts
***** info
Doom exposes five (optional) variables for controlling fonts in Doom.

Here are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations
  or streaming.
+ 'font-lock-comment-face' -- for comment
+ 'font-lcok-keyword-face' -- for keywords with special significance, like 'for'
  and 'if' in C

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font
string. You generally only need these two:
***** old code
: last working code
#+begin_src emacs-lisp
;; start -------------------------------------------------- looks / fonts config
(setq doom-font (font-spec :family "Source Code Pro"
                           :size 32
                           :weight 'medium
                )

      doom-variable-pitch-font (font-spec :family "Fira Sans"
                                          :size 32
                               )
)
;; end -------------------------------------------------- looks / fonts config
#+end_src
***** code
: new code
#+begin_src emacs-lisp :tangle ./config.el
;; start -------------------------------------------------- looks / fonts config
(setq doom-font (font-spec :family "Cascadia Code"
                           :size 32
                           :weight 'light
                )

      doom-variable-pitch-font (font-spec :family "Source Sans 3"
                                          :size 32
                                          :weight 'light
                               )
)
;; end -------------------------------------------------- looks / fonts config
#+end_src

***** font-spec documentation
font-spec is a built-in function in ‘C source code’.

(font-spec ARGS...)

Return a newly created font-spec with arguments as properties.

ARGS must come in pairs KEY VALUE of font properties. KEY must be a valid font
property name listed below:

... [properties / ARGS] ...

Probably introduced at or before Emacs version 23.1.
****** font-spec properties
******* :family
They are the same as face attributes of the same name. See ‘set-face-attribute’.
******* :weight
They are the same as face attributes of the same name. See ‘set-face-attribute’.
******* :slant
They are the same as face attributes of the same name. See ‘set-face-attribute’.
******* :width
They are the same as face attributes of the same name. See ‘set-face-attribute’.
******* :foundry
VALUE must be a string or a symbol specifying the font foundry, e.g. ‘misc’.
******* :adstyle
VALUE must be a string or a symbol specifying the additional typographic style
information of a font, e.g. ‘sans’.
******* :registry
VALUE must be a string or a symbol specifying the charset registry and encoding
of a font, e.g. ‘iso8859-1’.
******* :size
VALUE must be a non-negative integer or a floating point number specifying the
font size.

It specifies the font size in pixels (if VALUE is an integer), or in points (if
VALUE is a float).
******* :dpi
VALUE must be a non-negative number that specifies the resolution (dot per inch)
for which the font is designed.
******* :spacing
VALUE specifies the spacing of the font: mono, proportional, charcell, or dual.
It can be either a number (0 for proportional, 90 for dual, 100 for mono, 110
for charcell) or a 1-letter symbol: ‘P’, ‘D’, ‘M’, or ‘C’ (lower-case variants
are also accepted).
******* :avgwidth
VALUE must be a non-negative integer specifying the average width of the font in
1/10 pixel units.
******* :name
VALUE must be a string of XLFD-style or fontconfig-style font name.
******* :script
VALUE must be a symbol representing a script that the font must support.

It may be a symbol representing a subgroup of a script listed in the variable
‘script-representative-chars’.
******* :lang
VALUE must be a symbol whose name is a two-letter ISO-639 language name, e.g.
‘ja’.

The value is matched against the "Additional Style" field of the XLFD spec of a
font, if it’s non-empty, on X, and against the codepages supported by the font
on w32.
******* :otf
VALUE must be a list (SCRIPT-TAG LANGSYS-TAG GSUB [ GPOS ]) to specify required
OpenType features.

SCRIPT-TAG: OpenType script tag symbol (e.g. ‘deva’).

LANGSYS-TAG: OpenType language system tag symbol, or nil for the default
language system.

GSUB: List of OpenType GSUB feature tag symbols, or nil if none required.

GPOS: List of OpenType GPOS feature tag symbols, or nil if none required.

GSUB and GPOS may contain nil elements. In such a case, the font must not have
any of the remaining elements.

For instance, if the VALUE is ‘(thai nil nil (mark))’, the font must be an
OpenType font whose GPOS table of ‘thai’ script’s default language system must
contain ‘mark’ feature.
***** NO garantees italics and bold in org mode
Garantees that /italics/ and *bold* shows correctly in org mode, maybe unnecessary.

... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp :tangle no
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
  )
)
#+end_src

***** italic for comments and keywords
changes the font type for comments and keyords

#+begin_src emacs-lisp :tangle ./config.el
;; start --------------------------------------- italic for comments and keywords
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic)
)
;; end ----------------------------------------- italic for comments and keywords
#+end_src
***** custom-set-faces! documentation
custom-set-faces! is an autoloaded Lisp macro in ‘autoload/themes.el’.

(custom-set-faces! &rest SPECS)

Apply a list of face SPECS as user customizations.

This is a convenience macro alternative to ‘custom-set-face’ which allows for a
simplified face format, and takes care of load order issues, so you can use
doom-themes’ API without worry.

examples:

#+begin_src emacs-lisp :eval no
(custom-set-faces!
 '(outline-1 :weight normal)
 '(outline-2 :weight normal)
 '(outline-3 :weight normal)
 '(outline-4 :weight normal)
 '(outline-5 :weight normal)
 '(outline-6 :weight normal)
 '(default :background "red" :weight bold)
 '(region :background "red" :weight bold))

(custom-set-faces!
 '((outline-1 outline-2 outline-3 outline-4 outline-5 outline-6)
   :weight normal)
 '((default region)
   :background "red" :weight bold))

(let ((red-bg-faces '(default region)))
  (custom-set-faces!
   `(,(cl-loop for i from 0 to 6 collect (intern (format "outline-%d" i)))
     :weight normal)
   `(,red-bg-faces
     :background "red" :weight bold)))

;; You may utilise `doom-themes's theme API to fetch or tweak colors from their
;; palettes. No need to wait until the theme or package is loaded. e.g.
(custom-set-faces!
 `(outline-1 :foreground ,(doom-color 'red))
 `(outline-2 :background ,(doom-color 'blue)))
#+end_src
**** Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp :tangle ./config.el
;; start theme config
(setq doom-theme 'doom-one)
;; end theme config
#+end_src

**** Line Numbers

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp :tangle ./config.el
;; start line numbers config ------------------------- start line numbers config
(setq display-line-numbers-type 'relative)
;; end line numbers config ----------------------------- end line numbers config
#+end_src

*** Org
**** agenda
***** super agenda
****** TODO refine the agenda groups
Look for patterns in how I use the agenda. Mark missing features or
configuration in this section.
****** code
Using Jakub Neander(Zaiste Programming) agenda for now

... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle ./config.el
;; start ----------------------------------------------------- org / super agenda
(after! org-agenda
  (use-package! org-super-agenda
   :init
   (setq org-super-agenda-groups
         '(
           (:name "today"
                  :time-grid t
                  :scheduled today)
           (:name "due today"
                  :deadline today)
           (:name "overdue"
                  :deadline past)
           (:name "due soon"
                  :deadline future)
           )
   )
   :config
   (org-super-agenda-mode) ;; enable mode
  )
)
;; end ----------------------------------------------------- org / super agenda
#+end_src
****** documentation
******* github link
https://github.com/alphapapa/org-super-agenda
******* example agenda groups

#+begin_src elisp
(let ((org-super-agenda-groups
       '(;; Each group has an implicit boolean OR operator between its selectors.
         (:name "Today"  ; Optionally specify section name
                :time-grid t  ; Items that appear on the time grid
                :todo "TODAY")  ; Items that have this TODO keyword
         (:name "Important"
                ;; Single arguments given alone
                :tag "bills"
                :priority "A")
         ;; Set order of multiple groups at once
         (:order-multi (2 (:name "Shopping in town"
          ;; Boolean AND group matches items that match all subgroups
                           :and (:tag "shopping"
                                 :tag "@town"))
                          (:name "Food-related"
                                 ;; Multiple args given in list with implicit OR
                                 :tag ("food" "dinner"))
                          (:name "Personal"
                                 :habit t
                                 :tag "personal")
                          (:name "Space-related (non-moon-or-planet-related)"
                         ;; Regexps match case-insensitively on the entire entry
                                 :and (:regexp ("space" "NASA")
                         ;; Boolean NOT also has implicit OR between selectors
                                       :not (:regexp "moon" :tag "planet")))))
         ;; Groups supply their own section names when none are given
         (:todo "WAITING" :order 8)  ; Set order of this section
         (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                ;; Show this group at the end of the agenda (since it has the
                ;; highest number). If you specified this group last, items
                ;; with these todo keywords that e.g. have priority A would be
                ;; displayed in that group instead, because items are grouped
                ;; out in the order the groups are listed.
                :order 9)
         (:priority<= "B"
                      ;; Show this section after "Today" and "Important", because
                      ;; their order is unspecified, defaulting to 0. Sections
                      ;; are displayed lowest-number-first.
                      :order 1)
         ;; After the last group, the agenda will display items that didn't
         ;; match any of these groups, with the default order position of 99
         )))
  (org-agenda nil "a"))
#+end_src
**** capture templates
***** code

#+begin_src emacs-lisp :tangle ./config.el
(after! org
)
#+end_src
***** examples
****** _
from reddit post: Share your Org Capture Templates!
https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/
******* sk8ingdom
too big and messy to link here
https://github.com/sk8ingdom/.emacs.d/blob/master/org-mode-config/org-capture-templates.el
******* sugarbridalsentry
#+begin_src elisp
(setq org-capture-templates
    '(("t" "Todo" entry (file "~/Work/Org/Refile.org")
       "* TODO %?\n%U" :empty-lines 1)
      ("T" "Todo with Clipboard" entry (file "~/Work/Org/Refile.org")
       "* TODO %?\n%U\n   %c" :empty-lines 1)
      ("n" "Note" entry (file "~/Work/Org/Refile.org")
       "* NOTE %?\n%U" :empty-lines 1)
      ("N" "Note with Clipboard" entry (file "~/Work/Org/Refile.org")
       "* NOTE %?\n%U\n   %c" :empty-lines 1)
      ("e" "Event" entry (file+headline "~/Work/Org/Events.org" "Transient")
       "* EVENT %?\n%U" :empty-lines 1)
      ("E" "Event With Clipboard" entry (file+headline "~/Work/Org/Events.org" "Transient")
       "* EVENT %?\n%U\n   %c" :empty-lines 1))
    )
#+end_src
******* yantar92
#+begin_src elisp
("P" "Research project" entry (file "~/Org/inbox.org")
	 "* TODO %^{Project title} :%^G:\n:PROPERTIES:\n:CREATED: %U\n:END:\n%^{Project description}\n** TODO Literature review\n** TODO %?\n** TODO Summary\n** TODO Reports\n** Ideas\n" :clock-in t :clock-resume t)
	("e" "Email" entry (file "~/Org/inbox.org")
	 "* TODO %? email |- %:from: %:subject :EMAIL:\n:PROPERTIES:\n:CREATED: %U\n:EMAIL-SOURCE: %l\n:END:\n%U\n" :clock-in t :clock-resume t)
	("b" "Link from browser" entry (file "~/Org/inbox.org")
	 "* TODO %? |- (%:description) :BOOKMARK:\n:PROPERTIES:\n:CREATED: %U\n:Source: %:link\n:END:\n%i\n" :clock-in t :clock-resume t)
	("s" "Selection from browser" entry (file "~/Org/inbox.org")
	 "* TODO %? :BOOKMARK:\n%(replace-regexp-in-string \"\n.*\" \"\" \"%i\")\n:PROPERTIES:\n:CREATED: %U\n:Source: %:link\n:END:\n%i\n" :clock-in t :clock-resume t)
	("h" "Habit" entry (file "~/Org/inbox.org")
	 "* NEXT %?\nSCHEDULED: <%<%Y-%m-%d %a .+1d>>\n:PROPERTIES:\n:CREATED: %U\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:LOGGING: DONE(!)\n:ARCHIVE: %%s_archive::* Habits\n:END:\n%U\n")
#+end_src
******* truthling
#+begin_src elisp
(setq org-capture-templates
        '(("t" "TODO" entry (file+headline as/gtd "Collect")
        "* TODO %? %^G \n  %U" :empty-lines 1)
        ("s" "Scheduled TODO" entry (file+headline as/gtd "Collect")
        "* TODO %? %^G \nSCHEDULED: %^t\n  %U" :empty-lines 1)
        ("d" "Deadline" entry (file+headline as/gtd "Collect")
            "* TODO %? %^G \n  DEADLINE: %^t" :empty-lines 1)
        ("p" "Priority" entry (file+headline as/gtd "Collect")
        "* TODO [#A] %? %^G \n  SCHEDULED: %^t")
        ("a" "Appointment" entry (file+headline as/gtd "Collect")
        "* %? %^G \n  %^t")
        ("l" "Link" entry (file+headline as/gtd "Collect")
        "* TODO %a %? %^G\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")
        ("n" "Note" entry (file+headline as/gtd "Notes")
            "* %? %^G\n%U" :empty-lines 1)
        ("j" "Journal" entry (file+datetree "/Users/andrew/org/agenda/journal.org")
        "* %? %^G\nEntered on %U\n")))
#+end_src
******* Nebucatnetzer
#+begin_src elisp
("j" "Journal Entry" entry
    (file+headline "~/notes/work/agenda/work.org" "Clock")
    (file "~/notes/settings/templates/temp_clock_note.txt")
    :empty-lines 1)
("t" "Adds a Next entry" entry
    (file+headline "~/notes/work/agenda/work.org" "Capture")
    (file "~/notes/settings/templates/temp_work_todo.txt")
    :clock-in t :clock-resume t :empty-lines 1)
("p" "Small Project" entry
    (file+headline "~/notes/work/agenda/work.org" "Capture")
    (file "~/notes/settings/templates/temp_work_small_project.txt"))
("m" "Meeting" entry (file+headline "~/notes/work/agenda/work.org" "Capture")
    "* MEETING: with %?\n" :clock-in t :clock-resume t :empty-lines 1)
#+end_src
******* driftcrow
my capture for ledger:
#+begin_src elisp
(setq org-capture-templates
        (append '(("i" "Income Ledger Entry")

                ("ig" "Income:Gifts" plain
                (file ledger-journal-file)
                "%(org-read-date) * receive %^{Received From} %^{For why}
Assets:%^{Account|Personal|Home}  %^{Amount} %^{Currency|CNY|USD|JPY}
Income:Gifts
")
                )
                org-capture-templates))

(setq org-capture-templates
        (append '(("e" "Expense Ledger Entry ")

                ("eg" "Expense:Gifts" plain
                (file ledger-journal-file)
                "%(org-read-date) * send %^{Send to} %^{For why}
Expense:Gifts  %^{Amount}  %^{Currency|CNY|USD|JPY}
Assets:%^{Account||Personal|Home}
")
                )
                org-capture-templates))

#+end_src
****** spacebat (gist)
https://gist.github.com/spacebat/097f3e7469edf2eaa6a9
**** hide blank lines in folded view
***** code

#+begin_src emacs-lisp :tangle ./config.el
;; start ---------------------------------- org / hide blank lines in folded view
(after! org
  (setq org-cycle-separator-lines 0)
)
;; end ------------------------------------ org / hide blank lines in folded view
#+end_src
**** images

#+begin_src emacs-lisp :tangle ./config.el
;; start ------------------- org / images
(after! org
  (setq org-image-actual-width nil)
)
;; end --------------------- org / images
#+end_src
**** log completed tasks
put the completed date of a task (from TODO to DONE) into the COMPLETED drawer,
also shows the completed dates in the agenda view
***** code
... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle ./config.el
(after! org
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
)
#+end_src
**** NO notify
I don't know how to install this
.. #+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp :tangle no
;; start ------------------------------------------------ org / notify
;; (use-package! org
;;   :ensure org-plus-contrib
;; )

;; (use-package! org-notify
;;   :ensure nil
;;   :after org
;;   :config
;;   (org-notify-start)
;; )
;; end -------------------------------------------------- org / notiify
#+end_src
**** org files location
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+begin_src emacs-lisp :tangle ./config.el
;; start ------------------------------------------------------- org files location
(setq org-directory "~/Dropbox/org/")
;; end --------------------------------------------------------- org files location
#+end_src
**** NO priorities
I removed this package altogether

... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp :tangle no
;; start ---------------------------------------------------- org / priorities
(after! org
  (setq
   org-fancy-priorities-list '(
                               "[A]" . "Iimportant & Urgent"
                               "[B]" . "Un-Important & Urgent"
                               "[C]" . "Important & Non-Urgent"
                               "[D]" . "Un-Important & Non-Urgent"
                              )
   org-priority-faces '(
     (?A :foreground "red" :weight bold)
     (?B :foreground "green" :weight bold)
     (?C :foreground "orange" :weight bold)
     (?D :foreground "orange" :weight bold)
    )
   )
)
;; end ------------------------------------------------------ org / priorities
#+end_src
***** test
****** [#A] stupid priority
****** [#B] stupid priority
****** [#C] stupid priority
****** [#D] stupid priority
**** startup
***** YES folded
****** code
when oppening any org file, fold all headers, except the header the point is on

... #+begin_src emacs-lisp :tangle ./config.el
... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle ./config.el
;; start --------------------------------------------- org / startup / folded
(after! org
  (setq org-startup-folded t)
)
;; end ----------------------------------------------- org / startup / folded
#+end_src
****** documentation
=org-startup-folded= is a variable defined in ‘org.el’.

Its value is =nil=
Original value was =showeverything=

Non-nil means entering Org mode will switch to OVERVIEW.

This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:


\   #+STARTUP: fold              (or ‘overview’, this is equivalent)
\   #+STARTUP: nofold            (or ‘showall’, this is equivalent)
\   #+STARTUP: content
\   #+STARTUP: show<n>levels (<n> = 2..5)
\   #+STARTUP: showeverything
\   #+STARTUP: fold              (or ‘overview’, this is equivalent)

Set =org-agenda-inhibit-startup= to a non-nil value if you want
to ignore this option when Org opens agenda files for the first
time.

  This variable was introduced, or its default value was changed, in
  version 9.4 of the Org package that is part of Emacs 27.2.
  You can customize this variable.

[back]
***** YES not indented
****** code
when oppening any org file, fold all headers, except the header the point is on

... #+begin_src emacs-lisp :tangle ./config.el
... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle ./config.el
;; start --------------------------------------------- org / startup / folded
(after! org
  (setq org-startup-indented nil)
)
;; end ----------------------------------------------- org / startup / folded
#+end_src
****** documentation
=org-startup-indented= is a variable defined in ‘org.el’.

Its value is nil
Local in buffer README.org; global value is t

Non-nil means turn on ‘org-indent-mode’ on startup.
This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:

/   #+STARTUP: indent
/   #+STARTUP: noindent

  You can customize this variable.
**** styles
***** ellipsis
changes ... to an arrow(▼)
#+begin_src emacs-lisp :tangle ./config.el
;; start ---------------------------------------------- org / styles / ellipsis
(after! org
  (setq
    org-ellipsis " ▼ "
  )
)
;; end ------------------------------------------------ org / styles / ellipsis
#+end_src
***** NO headers (fail)
****** _
BUG : defface: Wrong number of arguments: (3 . 3), 2

error: (void-function org-compatible-face)


sets the header color to this order:
1. white
2. blue
3. green
4. red
5. yellow
6. orange
7. ???
8. purple?
9. brown?
10. (0) black/gray

****** example from stack exchange (fail)
#+begin_src emacs-lisp :tangle no
(progn
  (defface org-level-9 ;; originally copied from org-level-8
    (org-compatible-face
      nil ;; not inheriting from outline-9 because that does not exist
      '((((class color)
          (min-colors 16)
          (background light))
         (:foreground "RosyBrown")
        )
        (((class color)
          (min-colors 16)
          (background dark))
         (:foreground "LightSalmon")
        )
        (((class color)
          (min-colors 8))
         (:foreground "green")
        )
       )
    )
    "Face used for level 9 headlines."
    :group 'org-faces
  )

  (setq org-level-faces
        (append org-level-faces
                (list 'org-level-9)
        )
  )

  (setq org-n-level-faces
        (length org-level-faces)
  )
)
#+end_src
****** documentation about header faces
******* org-level-#
******* org-level-faces
org-level-faces is a variable defined in ‘org-faces.el’.

Its value is
#+begin_src elisp
(org-level-1 org-level-2 org-level-3 org-level-4 org-level-5 org-level-6
org-level-7 org-level-8)
#+end_src

Not documented as a variable.

This variable may be risky if used as a file-local variable.
******* org-n-level-faces
org-n-level-faces is a variable defined in ‘org-faces.el’.

Its value is 9

The number of different faces to be used for headlines.

Org mode defines 8 different headline faces, so this can be at most 8.

If it is less than 8, the level-1 face gets re-used for level N+1 etc.

  You can customize this variable.
******* deffface
defface is a Lisp macro in ‘custom.el’.

(defface FACE SPEC DOC &rest ARGS)

Declare FACE as a customizable face that defaults to SPEC.

FACE does not need to be quoted.

Third argument DOC is the face documentation.

If FACE has been set with ‘custom-theme-set-faces’, set the face
attributes as specified by that function, otherwise set the face
attributes according to SPEC.

The remaining arguments should have the form [KEYWORD VALUE]...
For a list of valid keywords, see the common keywords listed in
‘defcustom’.

SPEC should be a "face spec", i.e., an alist of the form

   ((DISPLAY . ATTS)...)

where DISPLAY is a form specifying conditions to match certain
terminals and ATTS is a property list (ATTR VALUE ATTR VALUE...)
specifying face attributes and values for frames on those
terminals.  On each terminal, the first element with a matching
DISPLAY specification takes effect, and the remaining elements in
SPEC are disregarded.

As a special exception, in the first element of SPEC, DISPLAY can
be the special value ‘default’.  Then the ATTS in that element
act as defaults for all the following elements.

For backward compatibility, elements of SPEC can be written
as (DISPLAY ATTS) instead of (DISPLAY . ATTS).

Each DISPLAY can have the following values:
 - ‘default’ (only in the first element).
 - The symbol t, which matches all terminals.
 - An alist of conditions.  Each alist element must have the form
   (REQ ITEM...).  A matching terminal must satisfy each
   specified condition by matching one of its ITEMs.  Each REQ
   must be one of the following:
   - ‘type’ (the terminal type).
     Each ITEM must be one of the values returned by
     ‘window-system’.  Under X, additional allowed values are
     ‘motif’, ‘lucid’, ‘gtk’ and ‘x-toolkit’.
   - ‘class’ (the terminal’s color support).
     Each ITEM should be one of ‘color’, ‘grayscale’, or ‘mono’.
   - ‘background’ (what color is used for the background text)
     Each ITEM should be one of ‘light’ or ‘dark’.
   - ‘min-colors’ (the minimum number of supported colors)
     Each ITEM should be an integer, which is compared with the
     result of ‘display-color-cells’.
   - ‘supports’ (match terminals supporting certain attributes).
     Each ITEM should be a list of face attributes.  See
     ‘display-supports-face-attributes-p’ for more information on
     exactly how testing is done.

In the ATTS property list, possible attributes are ‘:family’,
‘:width’, ‘:height’, ‘:weight’, ‘:slant’, ‘:underline’,
‘:overline’, ‘:strike-through’, ‘:box’, ‘:foreground’,
‘:background’, ‘:stipple’, ‘:inverse-video’, and ‘:inherit’.

See Info node ‘(elisp) Faces’ in the Emacs Lisp manual for more
information.

  Probably introduced at or before Emacs version 20.3.

#+BEGIN_SRC elisp
(defface highlight
  '((((class color) (min-colors 88) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 88) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 16) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 16) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 8))
     :background "green" :foreground "black")
    (t :inverse-video t))
  "Basic face for highlighting."
  :group 'basic-faces)
#+END_SRC
****** changes the 1st headers color (fail)
... #+begin_src emacs-lisp :tangle ./config.el
... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle no
;; NEW CHANGE!!!
(after! org
  (defface org-level-1
    (org-compatible-face nil
        '((( (class color)
             (min-colors 16)
             (background light)
           )
           (:foreground "red")
          )
            (((class color)
            (min-colors 16)
            (background dark))
            (:foreground "red")
            )
            (((class color)
            (min-colors 8))
            (:foreground "red")
          )
         )
        "Face used for level 1 headlines."
        :group 'org-faces
    )
  )
)
;; NEW CHANGE!!!
#+end_src

****** changes the 9th headers color (fail)
leave it for later

... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp :tangle no
;; CHANGES!!!
(after! org
  ;; (setq org-level-color-stars-only t)
  (progn
    (defface org-level-9 ;; originally copied from org-level-8
        (org-compatible-face
        nil ;; not inheriting from outline-9 because that does not exist
        '((( (class color)
             (min-colors 16)
             (background light)
           )
           (:foreground "green")
          )
            (((class color)
            (min-colors 16)
            (background dark))
            (:foreground "green")
            )
            (((class color)
            (min-colors 8))
            (:foreground "green")
          )
         )
        )
        "Face used for level 9 headlines."
        :group 'org-faces
    )
    ;; appending the 9th level heading style to the org-level-vaces list
    (setq org-level-faces
            (append org-level-faces
                    (list 'org-level-9)
            ))
    ;; setting org-n-level-faces to the length of org-level-faces
    (setq org-n-level-faces
            (length org-level-faces))
  )
)
;; CHANGES!!!
#+end_src
****** complete answer (fail)
... #+begin_src elisp
... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src elisp :tangle no
(progn
  (progn
    (face-spec-set 'org-level-5 ;; originally copied from org-level-8
      (org-compatible-face
          nil ;; not inheriting from outline-9 because that does not exist
        '((((class color) (min-colors 16) (background light))
           (:foreground "yellow"))
          (((class color) (min-colors 16) (background dark))
           (:foreground "yellow"))
          (((class color) (min-colors 8))
           (:foreground "yellow")))))

    (face-spec-set 'org-level-6 ;; originally copied from org-level-8
      (org-compatible-face
          nil ;; not inheriting from outline-9 because that does not exist
        '((((class color) (min-colors 16) (background light))
           (:foreground "orange"))
          (((class color) (min-colors 16) (background dark))
           (:foreground "orange"))
          (((class color) (min-colors 8))
           (:foreground "orange")))))

    (face-spec-set 'org-level-7 ;; originally copied from org-level-8
      (org-compatible-face
          nil ;; not inheriting from outline-9 because that does not exist
        '((((class color) (min-colors 16) (background light))
           (:foreground "purple"))
          (((class color) (min-colors 16) (background dark))
           (:foreground "purple"))
          (((class color) (min-colors 8))
           (:foreground "purple")))))

    (face-spec-set 'org-level-8 ;; originally copied from org-level-8
      (org-compatible-face
          nil ;; not inheriting from outline-9 because that does not exist
        '((((class color) (min-colors 16) (background light))
           (:foreground "gray"))
          (((class color) (min-colors 16) (background dark))
           (:foreground "gray"))
          (((class color) (min-colors 8))
           (:foreground "gray")))))

    (defface org-level-9 ;; originally copied from org-level-8
      (org-compatible-face
          nil ;; not inheriting from outline-9 because that does not exist
        '((((class color) (min-colors 16) (background light))
           (:foreground "brown"))
          (((class color) (min-colors 16) (background dark))
           (:foreground "brown"))
          (((class color) (min-colors 8))
           (:foreground "brown"))))
      "Face used for level 9 headlines."
      :group 'org-faces)
    (setq org-level-faces (append org-level-faces (list 'org-level-9)))
    (setq org-n-level-faces (length org-level-faces))))
#+end_src
***** bullets
****** info
changes the bullets at the start of the headers to roman numerals

NOTE: using more than one character in the list will use /only/ the first
character
****** code
#+begin_src emacs-lisp :tangle ./config.el
;; start ------------------------------------------------ org / styles / bullets
(after! org
  (setq
     org-superstar-headline-bullets-list
     '(
;;     "⓪"                                           ;; starts at zero?
       "①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨" "⑩" ;; empty
       "⑪" "⑫" "⑬" "⑭" "⑮" "⑯" "⑰" "⑱" "⑲" "⑳" ;; circled
       "㉑" "㉒" "㉓" "㉔" "㉕" "㉖" "㉗" "㉘" "㉙" "㉚" ;; numbers
       "㉛" "㉜" "㉝" "㉞" "㉟" "㊱" "㊲" "㊳" "㊴" "㊵"
       "㊶" "㊷" "㊸" "㊹" "㊺" "㊻" "㊼" "㊽" "㊾" "㊿"

     )
  )
)
;; end -------------------------------------------------- org / styles / bullets
#+end_src
****** other symbols
#+begin_src elisp
;;   org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")

;;     "α" "β" "γ" "δ" "ε" "ζ" "η" "θ" "ι" "κ" "λ"     ;; greek
;;     "μ" "ν" "ξ" "ο" "π" "σ" "τ" "υ" "φ" "χ" "ψ" "ω"  ;; lower letters

;;     "♠" "♥" "♦" "♣" "♤" "♡" "♢" "♧"             ;; card suits
;;    "❶" "❷" "❸" "❹" "❺" "❻" "❼" "❽" "❾" "➓" ;; filled circled numbers
#+end_src
****** greek alphabet
| Α α   | A a          | alpha   |
| Β β   | B b          | beta    |
| Γ γ   | G g          | gamma   |
| Δ δ   | D d          | delta   |
| Ε ε   | E e          | epsilon |
| Ζ ζ   | Z z          | zeta    |
| Η η   | Ē ē          | eta     |
| Θ θ   | Th th        | theta   |
| Ι ι   | I i          | iota    |
| Κ κ   | C c, K k     | kappa   |
| Λ λ   | L l          | lambda  |
| Μ μ   | M m          | mu      |
| Ν ν   | N n          | nu      |
|       |              |         |
| Ξ ξ   | X x          | xi      |
| Ο ο   | O o          | omicron |
| Π π   | P p          | pi      |
| Ρ ρ   | R r, Rh rh   | rho     |
| Σ σ/ς | S s          | sigma   |
|       |              |         |
| Τ τ   | T t          | tau     |
| Υ υ   | Y y, U u     | upsilon |
| Φ φ   | Ph ph        | phi     |
| Χ χ   | Ch ch, Kh kh | chi     |
| Ψ ψ   | Ps ps        | psi     |
| Ω ω   | Ō ō          | omega   |
***** list bullets
change the bullet points of lists

example:

- one
- two
  + a
  + b

#+begin_src emacs-lisp :tangle ./config.el
;; start -------------------------------------------- org / styles / list bullets
(after! org
  (setq
   org-superstar-item-bullet-alist '((?+ . ?✦) (?- . ?•))
  )
)
;; end ---------------------------------------------- org / styles / list bullets
#+end_src
***** emphasis markers
hides /italic/, *bold* and =code= markers for example

#+begin_src emacs-lisp :tangle ./config.el
;; start ---------------------------------------- org / styles / emphasis markers
(after! org
  (setq
   org-hide-emphasis-markers t
  )
)
;; end ------------------------------------------ org / styles / emphasis markers
#+end_src
***** org-appear
****** start after-org! block
#+begin_src emacs-lisp :tangle ./config.el
;; start --------------------------------------------- org-appear configuration
(after! org
#+end_src
****** NO show only in edit mode
toggles hiding and showing emphasis markers, links, etc. in and out of edit mode

...#+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp
(setq org-appear-trigger 'manual)
(add-hook 'evil-insert-state-entry-hook #'org-appear-manual-start nil t)
(add-hook 'evil-insert-state-exit-hook #'org-appear-manual-stop nil t)
#+end_src
****** enable mode
#+begin_src emacs-lisp :tangle ./config.el
  (add-hook 'org-mode-hook 'org-appear-mode)
#+end_src
****** enable for links
enable behavior for links also

[[http://www.google.com][link example (google)]]
#+begin_src emacs-lisp :tangle ./config.el
  (setq org-appear-autolinks t)
#+end_src
****** enable for subscripts and superscripts
******* documentation
enable behavior for subscripts and superscripts

examples:

Add #+OPTIONS: ^:{} to your org-mode file to explicitly enable superscripts and
subscripts.

You would also need to enable =pretty-entites= using the
=org-toggle-pretty-entities=. Default keychord is: =C-c C-x \=. Or set it in the
config file by: =(setq pretty-entities t)=

superscripts:

To create a superscript put ^{ characters at the start of the superscript text
and } at the end of the superscript text, e.g. word ^{superscript} will render as
word^{superscript}.

subscripts:

To create a subscript put _{ characters at the start of the subscript text and }
at the end of the subscript text, e.g. word _{subscript} will render as
word_{subscript}.

******* code
#+begin_src emacs-lisp :tangle ./config.el
  (setq org-pretty-entities t)
  (setq org-appear-autosubmarkers t)
#+end_src
****** org entities (latex syntax)
example of entity:

Pro tip: Given a circle \Gamma of diameter d, the length of its
circumference is \pi{}d.

#+begin_src emacs-lisp :tangle ./config.el
  (setq org-appear-autoentities t)
#+end_src
****** org keywords
toggle keywords in =org-hidden-keywords=

#+begin_src emacs-lisp :tangle ./config.el
  (setq org-appear-autokeywords t)
#+end_src
****** delay
1 second of delay

#+begin_src emacs-lisp :tangle ./config.el
  (setq org-appear-delay 1)
#+end_src
****** org-appear-trigger
=org-appear-trigger= can be set to =always=, =on-change=, or =manual=.

With =on-change=, elements will be toggled only when the buffer is modified or on
mouse click. This option disables delayed toggling.

With =manual=, toggling must be enabled by calling =org-appear-manual-start=.
=org-appear-manual-stop= is used to disable toggling with this option.

#+begin_src emacs-lisp :tangle ./config.el
  (setq org-appear-trigger 'always)
#+end_src
****** end after-org! block
#+begin_src emacs-lisp :tangle ./config.el
)
;; end ----------------------------------------------- org-appear configuration
#+end_src
**** TODOs states
***** YES keywords
... #+begin_src emacs-lisp :tangle ./config.el
... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle ./config.el
;; start ------------------------------------------ org / TODOs states / keywords
(after! org
  (setq org-todo-keywords
    (quote (
            (sequence "TODO(t)" "NEXT(n)" "DOING(d)" "|" "SKIP(s)" "DONE(D)")
            (sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)")
            (sequence "YES(Y)" "MAYBE(M)" "|" "NO(N)")
            )
    )
  )
)
;; end -------------------------------------------- org / TODOs states / keywords
#+end_src
***** YES colors
****** code
... #+begin_src emacs-lisp :tangle ./config.el
... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle ./config.el
;; start ------------------------------------------ org / TODOs states / colors
(after! org
  (setq org-todo-keyword-faces
    (quote (
            ("TODO" :foreground "#ff4500" :weight bold)
            ("NEXT" :foreground "#4876ff" :weight bold)
            ("DOING" :foreground "#ffd700" :weight bold)
            ("SKIP" :foreground "#00eeee"      :weight bold)
            ("DONE" :foreground "#32cd32" :weight bold)

            ("WAITING"   :foreground "#ffd700"     :weight bold)
            ("CANCELLED" :foreground "#ee82ee" :weight bold)

            ("YES"   :foreground "#2E8E27"    :weight bold)
            ("MAYBE" :foreground "#ff8700"  :weight bold)
            ("NO"    :foreground "#8b0000"     :weight bold)
           )
    )
  )
)
;; end --------------------------------------------- org / TODOs states / colors
#+end_src
****** BUG
******* 1
when a heading starts with DONE, CANCELLED and NO, AND there is no other
character after, the org-bullet styling does not show, example:

if it starts with BUG also
******** DONE
******** CANCELLED
******** NO
******** BUG
******* 2
the source blocks above are not rendered as source blocks
******* 3
Error during redisplay: (jit-lock-function 102367) signaled (error "No match 2
in highlight (2 'org-headline-done prepend)")
******* tests
******** TODO asdf
******** NEXT asdf
******** DONE asdf
******** WAITING asdf
******** CANCELLED asdf
******** YES asdf
******** MAYBE asdf
******** NO asdf
***** YES bullets
... #+begin_src emacs-lisp :tangle ./config.el
... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle ./config.el
;; start ------------------------------------------ org / TODOs states / bullets
(after! org-superstar
  (setq org-superstar-special-todo-items t)
  (setq org-superstar-todo-bullet-alist
        '(
          ("TODO" . ?⛶)
          ("NEXT" . ?➔)
          ("DOING" . ?🏃)
          ("SKIP" . ?⮫)
          ("DONE" . ?✓)

          ("WAITING" . ?✋)
          ("CANCELLED" . ?✘)

          ("YES" . ?👍)
          ("MAYBE" . ?🤷)
          ("NO" . ?👎)
         )
  )
)
;; end -------------------------------------------- org / TODOs states / bullets
#+end_src
**** roam
***** code
adds the location of the org-roam folder

=file-truename= is used to eliminate symbolic links

#+begin_src emacs-lisp :tangle ./config.el
;; start --------------------------------------------- org / roam
(use-package! org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (setq org-roam-directory (file-truename "~/Dropbox/org/roam"))
  (setq org-roam-dailies-directory "~/Dropbox/org/roam/daily")
  (org-roam-completion-everywhere t)

  (org-roam-capture-templates
    '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y-%m-%d,%H:%M:%S>-${slug}.org"
                         "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)
    )
  )

  (setq org-roam-dailies-capture-templates
    '(("d" "default" plain
       "* %<%H:%M>: %?"
       :if-new (file+head
               "%<%Y-%m-%d>.org"
               "#+title: %<%Y-%m-%d>\n")
      )
    )
  )
)
;; end --------------------------------------------- org / roam
#+end_src
****** format time string docs
format-time-string is a function defined in C source code.

Signature
(format-time-string FORMAT-STRING &optional TIME ZONE)

Documentation
Use FORMAT-STRING to format the time value TIME.

A time value that is omitted or nil stands for the current time,
a number stands for that many seconds, an integer pair (TICKS . HZ)
stands for TICKS/HZ seconds, and an integer list (HI LO US PS) stands
for HI*2**16 + LO + US/10**6 + PS/10**12 seconds.  This function
treats seconds as time since the epoch of 1970-01-01 00:00:00 UTC.

The optional ZONE is omitted or nil for Emacs local time, t for
Universal Time, wall for system wall clock time, or a string as in
the TZ environment variable.  It can also be a list (as from
current-time-zone) or an integer (as from decode-time) applied
without consideration for daylight saving time.

The value is a copy of FORMAT-STRING, but with certain constructs replaced
by text that describes the specified date and time in TIME:

%Y is the year, %y year without century, %C the century.
%G is the year corresponding to the ISO week, %g year corresponding
 to the ISO week, without century.
%m is the numeric month.
%b and %h are the locale's abbreviated month name, %B the full name.
 (%h is not supported on MS-Windows.)
%d is the day of the month, zero-padded, %e is blank-padded.
%u is the numeric day of week from 1 (Monday) to 7, %w from 0 (Sunday) to 6.
%a is the locale's abbreviated name of the day of week, %A the full name.
%U is the week number starting on Sunday, %W starting on Monday,
 %V the week number according to ISO 8601.
%j is the day of the year.

%H is the hour on a 24-hour clock, %I is on a 12-hour clock, %k is like %H
 only blank-padded, %l is like %I blank-padded.
%p is the locale's equivalent of either AM or PM.
%q is the calendar quarter (1–4).
%M is the minute (00-59).
%S is the second (00-59; 00-60 on platforms with leap seconds)
%s is the number of seconds since 1970-01-01 00:00:00 +0000.
%N is the nanosecond, %6N the microsecond, %3N the millisecond, etc.
%Z is the time zone abbreviation, %z is the numeric form.

%c is the locale's date and time format.
%x is the locale's "preferred" date format.
%D is like "%m/%d/%y".
%F is the ISO 8601 date format (like "%+4Y-%m-%d").

%R is like "%H:%M", %T is like "%H:%M:%S", %r is like "%I:%M:%S %p".
%X is the locale's "preferred" time format.

Finally, %n is a newline, %t is a tab, %% is a literal %, and
unrecognized %-sequences stand for themselves.

A %-sequence can contain optional flags, field width, and a modifier
(in that order) after the %.  The flags are:

- Do not pad the field.
_ Pad with spaces.
0 Pad with zeros.
+ Pad with zeros and put + before nonnegative year numbers with >4 digits.
^ Use upper case characters if possible.
# Use opposite case characters if possible.

A field width N is an unsigned decimal integer with a leading digit
nonzero.  %NX is like %X, but takes up at least N positions.  The
field width is (on GNU/Linux and some other systems) in measured in
bytes, not characters.  It depends on the locale what the width (in
characters) %NX will end up being, especially when there are non-ASCII
characters in %X.

The modifiers are:

E Use the locale's alternative version.
O Use the locale's number symbols.

For example, to produce full ISO 8601 format, use "%FT%T%z".

View in manual

Demos

#+BEGIN_SRC elisp
(format-time-string "%Y-%m-%d %H:%M:%S %z")
#+END_SRC

References
C code is not yet loaded.

Find all references

Debugging
Enable tracing

Aliases
gmm-format-time-string (obsolete since 26.1)
org-format-time-string (obsolete since 9.6)

Source Code
C code is not yet loaded.

Set C source directory

Symbol Properties
side-effect-free
  t
***** bug
Error in private config: config.el, (void-function org-roam-db-autosync-mode)

workaround : (require 'ucs-normalize)
**** transclusion
#+begin_src emacs-lisp :tangle ./config.el
;; start ------------------------------------------------------ org / transclusion
(use-package! org-transclusion
  :after org
  ;; :init
  ;; (map!
  ;;  :map global-map "<f12>" #'org-transclusion-add
  ;;  :leader
  ;;  :prefix "n"
  ;;  :desc "Org Transclusion Mode" "t" #'org-transclusion-mode)
)
;; start ------------------------------------------------------ org / transclusion
#+end_src
*** Projects
**** YES projectile

... #+begin_src elisp
#+begin_src emacs-lisp :tangle ./config.el
(setq projectile-indexing-method 'alien) ;; default value
(setq projectile-auto-discover t)        ;; default value
(setq projectile-sort-order 'recentf)

(setq projectile-project-search-path '(
                                       ("~/Dropbox" . 10)
                                       ("~/Config" . 3)
;;                                       ("~/github" . 1) ;; depth = 1
                                      )
)
#+end_src
***** docs for projectile-project-search-path
projectile-project-search-path is a variable defined in ‘projectile.el’.

Its value is nil

List of folders where projectile is automatically going to look for projects.
You can think of something like $PATH, but for projects instead of executables.
Examples of such paths might be ~/projects, ~/work, (~/github . 1) etc.

For elements of form (DIRECTORY . DEPTH), DIRECTORY has to be a
directory and DEPTH an integer that specifies the depth at which to
look for projects.  A DEPTH of 0 means check DIRECTORY.  A depth of 1
means check all the subdirectories of DIRECTORY.  Etc.
*** UI
**** Interface
***** NO scroll bar
****** code
put the scrollbar on the right back on
... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp
;; start ---------------------------------- UI / Interface / Scrollbar
(scroll-bar-mode t)
(setq scroll-bar ('foreground nil))
;; end ---------------------------------- UI / Interface / Scrollbar
#+end_src
****** documentation
Basic face for the scroll bar colors under X.

Defined in ‘faces.el’.


           Family: unspecified
          Foundry: unspecified
            Width: unspecified
           Height: unspecified
           Weight: unspecified
            Slant: unspecified
       Foreground: white
DistantForeground: unspecified
       Background: unspecified
        Underline: unspecified
         Overline: unspecified
   Strike-through: unspecified
              Box: unspecified
          Inverse: unspecified
          Stipple: unspecified
             Font: unspecified
          Fontset: unspecified
           Extend: unspecified
          Inherit: unspecified

  This face was introduced, or its default value was changed, in
  version 28.1 of Emacs.
***** NO yascroll
****** link
https://github.com/emacsorphanage/yascroll
****** description
scrollbar that shows only when the screen is moving
****** code
.. #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle ./config.el
;; start ---------------------------------- UI / Interface / Scrollbar
;;(global-yascroll-bar-mode t)
;; end ---------------------------------- UI / Interface / Scrollbar
#+end_src
**** lines
***** NO move point through long lines one visual line at a time
****** code
... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp
;; start ---------------------------------- UI / lines
(define-key evil-normal-state-map
  (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map
  (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map
  (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map
  (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
; Make horizontal movement cross lines
(setq-default evil-cross-lines t)
;; end ------------------------------------ UI / lines
#+end_src
****** documentation
evil-cross-lines is a variable defined in ‘evil-vars.el’.

Its value is nil

Whether horizontal motions may move to other lines.

If non-nil, certain motions that conventionally operate in a single line may
move the cursor to other lines.

Otherwise, they are restricted to the current line.

This applies to h, SPC, f, F, t, T, ~.
***** NO Evil Better Visual Line
****** site
https://github.com/YourFin/evil-better-visual-line
****** code
#+begin_src emacs-lisp :tangle ./config.el
;; start ---------------------------------- UI / lines / Evil Better Visual Line
;; (after! evil
;;   (evil-better-visual-line-on)
;; )
;; end ------------------------------------ UI / lines / Evil Better Visual Line
#+end_src
**** YES which key
***** YES bigger
****** code
... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle ./config.el
;; start ---------------------------------- UI / which key / on the right side
;;(after! which-key
;; (which-key-setup-side-window-right)

;; (setq which-key-popup-type 'side-window)
;; (setq which-key-side-window-location 'bottom)
;; (setq which-key-side-window-max-width 0.33)
;; (setq which-key-side-window-max-height 0.25)

(setq which-key-side-window-max-height 0.60)
(setq which-key-idle-delay 0)

(setq which-key-prefix-prefix "📁" )
;;)
;; end ------------------------------------ UI / which key / on the right side
#+end_src
**** NO centered-window-mode
didn't work

... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp :tangle no
;; start ------------------------------------------------------ UI / centered-window-mode
(use-package! centered-window-mode
  :init (centered-window-mode)
)
;; end -------------------------------------------------------- UI / centered-window-mode
#+end_src
**** MAYBE add margins on both sides
the problem with it is that it applies those margins everywhere

... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp :tangle no
;; start ------------------------------------------------------ UI / margins
;; (setq-default
;;   left-margin-width  5
;;   right-margin-width 5
;; )
;; (set-window-buffer nil
;;                    (current-buffer)
;; ) ; Use them now.
;; end -------------------------------------------------------- UI / margins
#+end_src
*** Keybindings
** packages.el
#+begin_src emacs-lisp :tangle ./packages.el

#+end_src
*** Example usage
**** _
To install a package with Doom you must declare them here and *run =doom sync=
on the command line*, then restart Emacs for the changes to take effect -- or
use =M-x doom/reload=.

#+begin_src emacs-lisp :tangle ./packages.el

;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

**** packages from MELPA, ELPA or emacsmirror

To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:

#+begin_src emacs-lisp :tangle ./packages.el
;(package! some-package)
#+end_src

**** package from git

To install a package directly from a remote git repo, you must specify a
`:recipe'. You'll find documentation on what `:recipe' accepts here:
https://github.com/raxod502/straight.el#the-recipe-format

#+begin_src emacs-lisp :tangle ./packages.el
;(package! another-package
;  :recipe (:host github :repo "username/repo"))
#+end_src

**** package without PACKAGENAME.el, or in subdirecotry of the repo

If the package you are trying to install does not contain a PACKAGENAME.el
file, or is located in a subdirectory of the repo, you'll need to specify
`:files' in the `:recipe':

#+begin_src emacs-lisp :tangle ./packages.el
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))
#+end_src

**** disable a package included with Doom

If you'd like to disable a package included with Doom, you can do so here
with the `:disable' property:

#+begin_src emacs-lisp :tangle ./packages.el
;(package! builtin-package :disable t)
#+end_src

**** overriding the recipe of a built in package

You can override the recipe of a built in package without having to specify
all the properties for `:recipe'. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:

#+begin_src emacs-lisp :tangle ./packages.el
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

**** package from a particular branch or tag

Specify a `:branch' to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't 'master' (which
our package manager can't deal with; see raxod502/straight.el#279)

#+begin_src emacs-lisp :tangle ./packages.el
;(package! builtin-package :recipe (:branch "develop"))
#+end_src

**** specify a particular commit
Use `:pin' to specify a particular commit to install.

#+begin_src emacs-lisp :tangle ./packages.el
;(package! builtin-package :pin "1a2b3c4d5e")
#+end_src

**** unpin (Doom) packages
***** single package

Doom's packages are pinned to a specific commit and updated from release to
release. The `unpin!' macro allows you to unpin single packages...

#+begin_src emacs-lisp :tangle ./packages.el
;(unpin! pinned-package)
#+end_src

***** multiple package

...or multiple packages

#+begin_src emacs-lisp :tangle ./packages.el
;(unpin! pinned-package another-pinned-package)
#+end_src

***** all packages

...Or *all* packages (NOT RECOMMENDED; will likely break things)

#+begin_src emacs-lisp :tangle ./packages.el
;(unpin! t)
#+end_src

*** NO benchmark startup time
... #+begin_src emacs-lisp :tangle ./packages.el
#+begin_src emacs-lisp :tangle no
;;(package! benchmark-init)
#+end_src
*** org
**** NO disable org-fancy-priorities
#+begin_src emacs-lisp :tangle ./packages.el
;; start ------------------------------------------------ org / org-fancy-priorities
(package!
  org-fancy-priorities
  :disable t
)
;; end -------------------------------------------------- org / org-fancy-priorities
#+end_src
**** YES org-appear

#+begin_src emacs-lisp :tangle ./packages.el
;; start --------------------------------------------------------- org / org-appear
(package!
  org-appear
)
;; end ----------------------------------------------------------- org / org-appear
#+end_src
**** YES org-super-agenda

#+begin_src emacs-lisp :tangle ./packages.el
;; start ---------------------------------------------- org / org-super-agenda
(package!
  org-super-agenda
)
;; end ---------------------------------------------- org / org-super-agenda
#+end_src
**** YES org-transclusion

#+begin_src emacs-lisp :tangle ./packages.el
;; start ---------------------------------------------- org / transclusion
;; ~/.doom.d/package.el
(package! org-transclusion)
;; end ---------------------------------------------- org / transclusion
#+end_src
**** YES org-ref

#+begin_src emacs-lisp :tangle ./packages.el
;; start ---------------------------------------------- org / ref
;; ~/.doom.d/package.el
(package! org-ref)
;; end ---------------------------------------------- org / ref
#+end_src
**** NO unpin org packages
... #+begin_src emacs-lisp :tangle ./packages.el
#+begin_src emacs-lisp :tangle no
;; (unpin!
;;   org
;;   org-roam
;; )
#+end_src
**** NO org-notify
... #+begin_src emacs-lisp :tangle ./packages.el
#+begin_src emacs-lisp :tangle no
;; start ---------------------------------------------- org / notify
;(package! org-plus-contrib)
;; end ---------------------------------------------- org / notify
#+end_src
*** UI
**** NO centered-window-mode
Keep your text centered when there's only one window.
...#+begin_src emacs-lisp :tangle ./packages.el
... #+begin_src emacs-lisp
#+begin_src emacs-lisp :tangle no
;; start ------------------------------------------------------- UI / centered-window-mode
(package!
  centered-window-mode
)
;; end --------------------------------------------------------- UI / centered-window-mode
#+end_src
**** NO yascroll
a better scrollbar

... #+begin_src emacs-lisp
... #+begin_src emacs-lisp :tangle ./packages.el
#+begin_src emacs-lisp :tangle no
;; start ------------------------------------------------------- UI / yascroll
;; (package!
;;   yascroll
;; )
;; end ------------------------------------------------------- UI / yascroll
#+end_src
**** NO evil-better-visual-line
creates a lot of lag

... #+begin_src emacs-lisp :tangle ./packages.el
#+begin_src emacs-lisp :tangle no
;;(package!
;;  evil-better-visual-line
;;)
#+end_src
*** Checkers
**** Grammar
***** NO writegood
... #+begin_src emacs-lisp :tangle ./packages.el
#+begin_src emacs-lisp :tangle no
;; (package! writegood-mode
;;   :disable t
;; )
#+end_src

#+print_bibliography: no
