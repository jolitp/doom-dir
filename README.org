#+TITLE: Doom Emacs config
#+AUTHOR: João Luís Teixeira Pinto
#+OPTIONS: ^:{}
* Doom Emacs config
This file is a literate configuration of my Doom Emacs config.

Here are the Emacs LISP code that config Emacs and also the explanation of every
part of the config.

In addition to that, I also document here how I use, or intend to use, such
configuration.
* content about Emacs configs to check out
** David Wilson (system crafters)
*** youtube
**** channel link
https://www.youtube.com/c/SystemCrafters/videos
**** playlists
***** Emacs From Scratch (old)
https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ
****** 1 Getting Started with a Basic Usable Configuration
****** 2 Adding Helpful UI Improvements
****** 3 Key Bindings and Evil
****** 4 Projectile and Magit
****** 5 Org Mode Basics
****** 6 Organize Your Life with Org Mode
****** 7 Configure Everything with Org Babel
****** 8 Build Your Own IDE with lsp-mode
****** 9 Learn to Love the Terminal Modes
****** 10 Effortless File Management with Dired
****** 11 Keeping Your Emacs Packages Up To Date
****** 12 How to Cut Emacs Start Up Time in Half!
***** Emacs Tips
****** 1 How to Show Reminders for Org Mode Tasks
****** 2 How to Create Your Own Color Theme
****** 3 How to Use File and Directory Local Variables
****** 4 How to Give Presentations with Org Mode
****** 5 How to Create and Manage Multiple Windows - Emacs Tips
****** 6 Organize Your Windows with the Tab Bar in Emacs 27
****** 7 Dynamic Tiling Windows like dwm in Emacs with Edwina
****** 8 Unlock the Power of the Daemon with emacsclient
****** 9 Give Emacs Psychic Completion Powers with prescient.el
****** 10 Teach Emacs to Keep Your Folders Clean
****** 11 How to Encrypt Your Passwords with Emacs
****** 12 Hey Emacs, Don't Move My Windows! - Customizing display-buffer's behavior
****** 13 Streamline Your Emacs Completions with Vertico
****** 14 Doom Emacs or Spacemacs? Use both with Chemacs2!
***** Emacs IDE
****** 1 Emacs From Scratch #8 - Build Your Own IDE with lsp-mode
****** 2 How to Debug Your Code with dap-mode
****** 3 Python Development Configuration
***** Learning Emacs Lisp
****** 1 Introduction to Emacs Lisp - Learning Emacs Lisp #1
****** 2 Types, Conditionals, and Loops - Learning Emacs Lisp #2
****** 3 Defining Functions and Commands - Learning Emacs Lisp #3
****** 4 Defining Variables and Scopes - Learning Emacs Lisp #4
****** 5 Reading and Writing Buffers in Practice - Learning Emacs Lisp #5
****** 6 Managing Files and Directories in Practice - Learning Emacs Lisp #6
****** 7 Creating Custom Minor Modes - Learning Emacs Lisp #7
***** Managing Your Dotfiles
****** 1 The Basics of Dotfiles
****** 2 How to Create a Dotfiles Folder
****** 3 Give Your Dotfiles a Home with GNU Stow
***** Emacs Essentials
****** 1 The Absolute Beginner's Guide to Emacs
****** 2 Efficient Movement with Emacs Key Bindings - Emacs Essentials #2
****** 3 Efficient Text Selection with Emacs Key Bindings - Emacs Essentials #3
***** System Crafters Live!
****** 1 System Crafters Live! - I'm creating a new Lisp • Emacs News • Q&A
****** 2 System Crafters Live! - Lisp Compiler Progress • Live Lisp Hacking • Q&A
****** 3 System Crafters Live! - Taking a look at Magit 3.0 • Streaming with Emacs Lisp
****** 4 System Crafters Live! - So you've installed GNU Guix, now what?
****** 5 System Crafters Live! - Do we really need use-package in Emacs?
****** 6 System Crafters Live! - The Future of System Crafters
****** 7 System Crafters Live! - Can You Apply Zettelkasten in Emacs?
****** 8 System Crafters Live! - Emacs Package Potluck (Trying Your Suggestions!)
****** 9 System Crafters Live! - Can We Fix a Bug in Emacs?
****** 11 System Crafters Live! - The Many Varieties of Emacs
****** 10 System Crafters Live! - The Many Varieties of Emacs (Part 2)
****** 12 System Crafters Live! - A First Look at Guix Home
****** 13 System Crafters Live! - Why Geeks Don't Use Guix
****** 14 System Crafters Live! - Building the World's WORST Emacs Configuration (Part 2)
****** 15 System Crafters Live! - Configuring Emacs With Only the UI?
****** 16 System Crafters Live! - Planning the New Emacs From Scratch
****** 17 System Crafters Live! - Live Crafting: Rational Emacs
****** 18 System Crafters Live! - Trying New Emacs Packages by Minad
***** Mastering Git with Magit
****** 1 An Introduction to the Ultimate Git Interface, Magit!
****** 2 9 Techniques to Boost Your Git Workflow with Magit
****** 3 Fix Your Git Commits Like a Rebase Expert with Magit
***** Advanced Emacs Package Management
****** 1 straight.el: Advanced Emacs Package Management
***** Effective Window Management in Emacs
****** 1 Declutter Your Buffer Lists in Emacs with Perspective.el
***** Build a Second Brain in Emacs
****** 1 Getting Started with Org Roam - Build a Second Brain in Emacs
****** 2 Capturing Notes Efficiently in Emacs with Org Roam
****** 3 Org Roam: The Best Way to Keep a Journal in Emacs
****** 4 5 Org Roam Hacks for Better Productivity in Emacs
***** Emacs Shorts
****** 1 Emacs Has a Built-in Pomodoro Timer?? #Shorts
***** Hack Sessions
****** 1 Improving EXWM #1 // Hack Sessions
****** 2 Improving EXWM #2 // Hack Sessions
****** 3 "Inverse Literate" Emacs Configurations - Hack Sessions
****** 4 "Inverse Literate" Emacs Configurations (Part 2) - Hack Sessions
***** Publishing Websites with Org Mode
****** 1 Build Your Website with Org Mode
****** 2 Automated Org Mode Website Publishing with GitHub or SourceHut
***** Emacs From Scratch (New)
****** 1 The Basics of Emacs Configuration
****** 2 The 6 Emacs Settings Every User Should Consider
*** github
https://github.com/daviwil
https://github.com/daviwil/dotfiles
https://github.com/daviwil/emacs-from-scratch
https://github.com/SystemCrafters
**** System Crafter Configurations
https://github.com/SystemCrafters/crafter-configs
** Jakub Neander(Zaiste Programming)
*** youtube
**** doomcasts playlist
https://www.youtube.com/playlist?list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj
***** DONE 1 Getting Started
****** discord server
https://discord.com/invite/qvGgnVx

How do I connect to the Discord server?
https://github.com/hlissner/doom-emacs/issues/2720

***** DONE 2 Projects with Projectile, File Explorer with Treemacs & EShell
****** "hotkeys" starting with <SPC>
calling =SPC f f= is the same as =SPC .=, this opens a pane with the
location of the current file and you can navigate from there, also it show the
files on the current directory with additional information
****** working in the context of projects
******* discover project in a directory
There is a coomand: =SPC : projectile-discover-projects-in-directory=, where
you give it a directory and emacs tries to guess based on the directory
structure if it is a project or not. If Emacs can't guess right put an empty
=.projectile= file in the folder.
******* making Emacs aware of project directories at startup
Put the following elisp code on =config.el=:

(up-to-date code)
#+begin_src elisp
(setq projectile-project-search-path '("~/projects/" "~/work/" ("~/github" .
1)))
#+end_src

(code from video)
#+begin_src elisp
(setq
    projectile-project-search-path '("~/code/")
)
#+end_src

You can suppress the auto-discovery of projects on startup by setting
=projectile-auto-discover= to =nil=.

You can manually trigger the project discovery using =M-x
projectile-discover-projects-in-search-path=. Or restart Emacs.

******* projectile docs
https://docs.projectile.mx/projectile/usage.html
******* show all projects that Emacs knows of
Pressing =SPC p p=
******* find a file in projcet
Pressing: =SPC SPC=, will show files only from the current project
******* file explorer (side bar tree view)
Type: =SPC o p=
******* using CLI apps inside emacs
Type: =SPC o e= (~not working currently~)
****** oppening the config files by using hotkeys
Pressing =SPC f p= to "find file in private configuration", or the files that
are inside the =.doom.d= directory
****** file-related commands often used
=SPC f r= for recent files (all files)

=SPC f R= for recent files (in the current project)
***** STOPPED 3 A short intro to Dired
****** showing and hiding details
Type to toggle: =(=
****** navigating
since I enabled =ranger= I can use the following keybindings:

=h= goes back up a directory

=j= and =k= go up and down

=l= goes into the selected directory or file
****** creating folders and files
Press: =SPC .= to create files (works everywhere not only in dired)

Pressing =+= on the dired buffer to create a new folder in the current viewed
folder
****** ...,
stopped at 2:27

I didn't take notes on deleting files and directory (he explained that at this
point already)
***** DONE 4 Buffers, Windows and Basic Navigation
****** switch buffers
press: =SPC b b=, or =SPC ,= to have a list of buffer names (only on curent
project, called a =workspace buffer= by Doom Emacs)

To find other buffers (outside of project, including other workspaces), press:
=SPC b B= or =SPC <=. In this buffer, pressing =SPC= will show only the hidden
buffers
****** closing / killing buffers
pressing =SPC b k=
****** showing 2 buffers at the same time
******* splitting windows
by pressing =C-w v= / =SPC w v= to split window vertically (putting 2 buffers
side by side), or =C-w s= / =SPC w s= to split the window horizontally (putting
2 buffers on top of each other)
******* switching windows
To switch between them, =C-w w= / =SPC w w= will cycle between the windows in
order. You can also use the =h=, =j=, =k=, =l= keys to move between windows.
******* change buffer
in the second window press: =SPC b b= to change the buffer of the window
******* closing windows
to delete a window: =C-w d= / =SPC w d= or =C-w q= / =SPC w q= will delete the
active window
******* resizing windows
By pressing:

=C-w <= / =SPC w <= to grow or shrink the current window to the left

=C-w >= / =SPC w >= to grow or shrink the current window to the right

=C-w += / =SPC w += to grow or shrink the current window to the top

=C-w -= / =SPC w -= to grow or shrink the current window to the bottom

***** DONE 5 Installing Packages with org-super-agenda as an example
****** installing packages (example org-super-agenda)
on the packages file put:

#+begin_src elisp
(package! org-super-agenda)
#+end_src

after that on the command line call:

#+begin_src bash
doom refresh
#+end_src

then agree to install the new package:

: proceed? (y or n) y

****** configuring packages (example org-super-agenda)
now go to the =config.el= to config the new package

#+begin_src elisp
(def-package! org-super-agenda
;; ... config goes here
)
#+end_src

to know what can you configure in a package press:

=SPC h f= for describe function, then type =def-package=

since =def-package= is a wraper around =use-package= it is intresting to know
about it first:

github page: https://github.com/jwiegley/use-package
****** use package summary
use package has "sections" (or named parameters on the form of
=:parameter-name=)

the most important ones are:

=:init= that is everything that happens before the package loads

=:config= is everything that happens after the package loads
****** configuring org super agenda

#+begin_src elisp
(def-package! org-super-agenda
   :init ;; everything that should happen before the package loads
   (setq org-super-agenda-groups
         '(
           (:name "today"
                  :time-grid t
                  :scheduled today)
           (:name "due today"
                  :deadline today)
           (:name "important"
                  :priority "A")
           (:name "overdue"
                  :deadline past)
           (:name "due soon"
                  :deadline future)
           (:name "Big Outcomes"
                  :tag "bo")
           )
    )
   :config ;; enable the mode for example
   (org-super-agenda-mode)
   :after ;; this mode should only load after a certain mode
   (org-agenda)
)
#+end_src
****** config packages that are part of Doom Emacs
Packages that comes with Doom Emacs or packages that are part of the modules
enabled in the =init.el= file, there is another macro:

#+begin_src elisp
(after!

)
#+end_src

it is similar to =def-package!= macro, but only allows to specify certain
configuration options after another package has loaded
***** DONE 6 Quick, horizontal movements with evil-snipe
****** basics of evil-snipe
=evil-snipe= is a package that allows us to quickly jump to a character, it is
an improved functionallity that vim provides, it works in the following way:

press =f= in the =normal mode=, followed by a letter by which you want to jump
to (only in the current line!). After that the available letter locations are
highlighted and you can jump to the next one py pressing =;=, or back by
pressing =,=. By pressing any one of those the occurences of the selected letter
will also be highlighted in on the previous and next lines.

there is also =t= that will jump one character before the matching letter
****** improvements over the functionality present in Vim
as explained in the last section, when moving through the occurencies of
letters, you can go beyond the currend line. That is an improvement made by this
package.

By pressing =s= you can enter 2 letters, resulting in more precise movements

If you want to find a letter before the cursor press =F=. =S= works the same way as =F= but with 2 characters

By pressing =,= in =normal mode= you get your last search forwards, and =;= your
last search backwards;
****** selecting text with evil-snip
In =visual mode= pressing =f=, =F=, =s=, =S=, =,= or =;=
****** disabled functionallity in doom
in Doom Emacs this functionallity is disabled
#+begin_quote
 - you can ~repeat searches with =f=, =F=, =t=, =T= (ala Clever-F)~
#+end_quote

***** DONE 7 Moving around the screen with Avy
****** basics of avy
by pressing =g s= in normal mode or visual mode, the text that will be used in
the search changes color to a dark gray, then you can type the letters that you
want to search in rapid succession

if there are more than one occurency of the word/letter, the places where those
words/letters are found changes to letters that are easy to reach, starting on
the home row, like =a=, =s=, =d=, =f=, etc.
****** using avy on one window vs on all windows
there is a variable that can be customized to change the behavior of avy when it
comes to search only in the current window or in all open windows

=avy-all-windows=, can be either =t= or =nil=, for true or false.
****** changing words with avy
By pressing =g s SPC=, type a letter, or word in rapid succession, then press
=x= (to cut it), then the home-row characters presented. It will remove the
matching word (it won't put you in edit mode)
****** integration with ispell
Using the same process as above, but instead of typing =x=, type =i=

A new window will show up, where correction suggestions follows
single-characters between parenthesis. Pressing any of those letters will change
the highlighted word on the buffer.
****** moving/copying words from one part of the text to another
Press =g i SPC= then the letter/word to search, now press =y= (for
yanking/pasting), following the highlighted selection "mnemonics"

to move a word, do the same as above, instead of =y=, use =t= (for teleporting)
***** WATCHED 8 Multiple cursor in Emacs with evil-multiedit
***** DONE 9 Org Mode, Basic Outlines
not a single thing I didn't know
***** DONE 10 Org Mode - Links, Hyperlinks and more
****** links
links in org files are marked by [ [/link/location] [description\] ] (without
the spaces)

to add a link to an org file:

- link to a section of this file:
  + [[configs TODOs]]

you can highlight a section of the text and type =SPC m l l= and choose a type
of link, a name for the link and a description (if there is no highlight)

ex:

[ [file:LICENSE] [license] ] = [[file:LICENSE][license]]

normally file links are relative

[ [file:[[TODOs][README.org::TODOs] [license] ] = [[TODOs][README.org::TODOs]]

file:README.org::TODOs

if the heading does not exist it asks if you want to create one

to target a specific line:

file:README.org::44

by default numbers after the :: in the end refers to line numbers, and words
refer to headlines
****** run elisp code when clicking on a link
the link can link to a =elisp= expression.
***** WATCHED 11 Org Mode - Custom Link Types
***** STOPPED 12 Org Mode - Linking to words & Bookmarks
***** DONE 13 Org Mode, Code Snippets 101
****** opening a code section in another buffer
press =SPC m '=

: looks like it does not work on my computer, because I have the keyboard locale set to en-us international with ghost keys, when I click on ='= key it prints =´=, then I need to press SPC to actually insert the key

#+begin_src elisp
;; dummy elisp
#+end_src
***** TODO 14 Org Mode, Getting Organized with Tasks
***** TODO 15 Org Mode, Priorities for Tasks
***** TODO 16 Org Mode, Marking Tasks with Tags
***** TODO 17 Org Mode - Using Checkboxes
***** TODO 18 Emacs Magit - Getting Started
***** TODO 19 Emacs Magit - The Git Commit Flow in More Detail
***** TODO 20 Emacs Magit with Forge for Issuing Pull Requests
***** TODO 21 Emacs Magit with Forge for merging Pull Requests
***** DONE 22 Deft Mode
****** enable deft
in the =doom.dir= directory, on =init.el= enable =deft= on the =ui= section
****** to setup deft
on =config.el=:

#+begin_src elisp
(setq
      deft-directory "~/Dropbox/org" ; starting point for searching for notes
      deft-extensions '("org" "txt") ; file extensions to match on search
      deft-recurive t ; to force deft to search on subdirectories
)
#+end_src
****** using deft
to go to the deft UI, press: =SPC d=

now, just by typing I can select a specific note
******* other options
by pressing =C-c= on the deft UI you are presented with more options on a
minibuffer at the bottom of the screen. Some options are: refresh contents of
the folder, create a new file, etc..
***** DONE 23 Journaling with org-journal
****** init.el
enable journaling in org mode from =init.el= > languages:
#+begin_src elisp
(doom!
;; ...
  :lang
  ;; ...
  (org      ;; add parenthesis if needed
   ;; ...
   +journal ;; add this line
  )
)
#+end_src
****** using
pressing =SPC n j j= to add a new note, and =SPC n j J= to add a scheduled note

by default it creates a =journal= directory in the =org= directory. The filne
name is wihout any extension.

if there is already a note for the current day, emacs adds a new heading for the
current time inside today's file
****** improving jounaling notes
******* looking up on the documentation
press =SPC h v= to describe variable, then type =org-journal= to filter the
list.
******* changing the date format
#+begin_src elisp
(setq
      org-journal-date-prefix "#+TITLE: "
      org-journal-date-prefix "* "
      org-journal-date-format "%a, %Y-%m-%d" ;; Sun, 2020-12-31
      org-journal-file-format "%Y-%m-%d.org"
)
#+end_src

***** DONE 24 Org Roam Setup
****** setup
******* init.el
enable module in init.el. Remember to run =doom sync= afterwards!
#+begin_src elisp
(doom!
;; ...
  :lang
  ;; ...
  (org      ;; add parenthesis if needed
   ;; ...
   +roam ;; add this line
  )
)
#+end_src

******* config.el
add the location of the folder that org roam will use:
#+begin_src elisp
(setq
      org-roam-directory "~/Dropbox/org/roam"
)
#+end_src

a good idea is to put a =.projectile= file in that directory so Emacs interprets
that as a project directory. Also check if this directory is inside a directory
that projectile looks up at startup
****** adding notes
pressing =SPC n r c= to capture a new note
****** including links
press =SPC n r i= to insert. That will give you a list of all notes Org Roam
knows of. It can create new notes if the file specified does not exists yet.
****** see the backlinks of a note
a backlink is a link that comes to the open note from other notes.
***** DONE 25 Aliases in Org Roam Emacs Doom
an alias is another name for the same thing, like =javascript= is the same as
=js=

there is a meta property (org mode property, #+property_name:) called
#+roam_alias: "javascritp" "js"

by default the note names are taken from the titles and then from the roam_alias
property, and there is a variable called =org-roam-title-sources= that controls
this behavior
***** NO 26 Getting Started with Emacs & Doom in 2021 (on Apple Silicon M1)
I don't use a mac
***** DONE 27 Custom keybindings in Doom Emacs
****** using the map! macro
******* documentation
press =SPC h f= to describe a function, type =map!=. That gives you all the
possibilities of configuration, together with some examples.
******* example, extend the menu from SPC
******** ex 1: export the current org file to html
********* no_prefix
The function/procedure =org-html-export-to-html= is not bound to any key.

#+begin_src elisp
(map!
    :leader
    :desc "Export org to html"
    "A" #'org-html-export-to-html
)
#+end_src
********* with prefix
#+begin_src elisp
(map!
    :leader
    (:prefix ("A" . "applications")
             :desc "Export org to html"
             "A" #'org-html-export-to-html
    )
)
#+end_src
*** github
https://github.com/zaiste
https://github.com/zaiste/.doom.d

non Doom Emacs
https://github.com/zaiste/emacs-config
*** twitter
https://twitter.com/zaiste
** Derik Taylor (distrotube)
*** youtube
**** playlist link
https://www.youtube.com/playlist?list=PL5--8gKSku15uYCnmxWPO17Dq6hVabAB4
**** playlist videos - The Church of Emacs
***** 1 20,000 Page Static Website Written In Org Mode
***** 2 Vim And Emacs Are The Most Important Skills You Should Learn
***** 3 Emacs Is A Gaming Platform for Windows, Mac and Linux
***** 4 Three HUGE Mistakes New Emacs Users Make
***** 5 Rewriting My Website In Org Mode
***** 6 Transform Words Into Pretty Symbols In Emacs
***** 7 What Are The Benefits Of Emacs Over Vim?
***** 8 Leaving Doom Emacs For GNU Emacs? - DT Live!
***** 9 Create Beautiful Websites Using Emacs Org Mode
***** 10 Is The Best RSS Reader An Emacs Package?
***** 11 Setting Up The Mu4e Email Client In Doom Emacs
***** 12 Doom Emacs And EXWM Are My New Window Manager
***** DONE 13 Font And Line Settings In Doom Emacs
***** 14 The Different Shells Available In Emacs
***** 15 Why Isn't Emacs More Popular?
***** 16 Boost Productivity With Emacs, Org Mode and Org Agenda
***** 17 Doom Emacs For Noobs
***** 18 Useful Tools Within Emacs For Writers
***** 19 Man Pages Got Your Panties In A Twist? Use Woman Instead!
***** 20 Want To Rewrite Your Configs In Org-Mode? It's Easy!
***** 21 The Magit Git Client Is The "Killer Feature" In Emacs
***** 22 Turn Emacs Into A Window Manager With EXWM
***** 23 Switching to GNU Emacs
***** 24 The Basics of Emacs as a Text Editor
***** 25 Getting Started With Doom Emacs
***** 26 Bookmarks, Buffers and Windows in Doom Emacs
***** 27 Vim Versus Emacs. Which Is Better?
***** 28 Org Mode Basics In Doom Emacs
***** 29 Friendship With Emacs Is Over, Vim Is My Best Friend
***** 30 I'm Replacing All Of My Programs...With Emacs
*** gitlab
**** home page
https://gitlab.com/dwt1
**** doom config
https://gitlab.com/dwt1/dotfiles/-/tree/master/.config/doom
** Rafael Accácio
*** youtube
**** channel link
https://www.youtube.com/channel/UC6TH30TksyUf-MHbt5hMdQQ/videos
**** playlists
***** Emacs / org-mode
****** 1 Mantenha-se informado usando Emacs (notícias, artigos, podcasts usando rss) 🇧🇷
****** 2 Apresentações usando reveal.js e org-mode 🇧🇷
****** 3 Configurando Emacs (usando doom-emacs org-roam ) 🇧🇷
****** 4 Anotações usando emacs (org-roam Zettelkasten) 🇧🇷
****** 5 Programação Literária e Org-mode 🇧🇷
****** 6 org-mode demo 🇧🇷
****** 7 Rodando código python dentro de apresentação ( org-mode + reveal.js) 🇧🇷
****** 8 Configurando doom-emacs org-mode Android ↭ Computador 🇧🇷
****** 9 Criando marcos em arquivos no Emacs ( imenu ) 🇧🇷
*** github
https://github.com/Accacio/doom
https://github.com/Accacio/.emacs.d
** Lukewh
*** youtube
**** channel link
https://www.youtube.com/c/Lukewh/videos
**** playlists
***** Emacs
****** 1 Emacs - 01 - Intro, files and movement
****** 2 Emacs - 02 - Frames, Windows and Buffers
****** 3 Emacs - 04 - Customization with init.el
****** 4 Emacs - 05 - Themes
****** 5 Emacs bites - Startup config selector
****** 6 Emacs - 06 - Toolbar, menubar, scrollbar and other settings
****** 7 Emacs - 07 - ido and helm
****** 8 Emacs - 08 - Projectile
****** 9 Emacs - 09 - Dashboard
****** 10 Emacs - 10 - Treemacs
****** 11 Emacs - 11 - Clean configs with org-mode
****** 12 Emacs - 12 - Bookmarks
****** 13 Emacs - 13 - Expand region
****** 14 Emacs bites - Named term
****** 15 Emacs - 14 - Org-bullets and support-shift-select
****** 16 Emacs - 15 - Centaur tabs
****** 17 Emacs - 16 - Company mode (auto-complete) and some thanks
****** 18 Emacs - 18 - JavaScript with Tide, Prettier and RJSX mode
****** 19 Emacs - 03 - Modes
****** 20 Emacs - 17 - Flycheck | Syntax checking
****** 21 Setting up Emacs for Typescript React projects with lsp-mode and prettier
****** 22 Emacs: Updating init.el for Typescript React
** Mike Zamansky
*** blog
https://cestlaz.github.io/
https://cestlaz-nikola.github.io/
*** youtube
**** playlist link
https://www.youtube.com/playlist?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg
**** Using Emacs
****** 1 setting up the package manager
****** 2 org
****** 3 Elisp
****** 4 Buffers
****** 5 Windows
****** 6 Search (Swiper)
****** 7 Navigating with Avy
****** 8 Auto-complete
****** 9 Themes
****** 10 org init file
****** 11 reveal.js and org-mode
****** 12 flycheck and Jedi for Python
****** 13 yasnippet
****** 14 Thoughts on Using Emacs
****** 15 macros
****** 16 undo tree
****** 17 Misc features
****** 18 iedit, narrowing, and widening
****** 19 moving to a live config
****** 20 yanking
****** 21 Web Mode
****** 22 emacsclient
****** 23 capture
****** 24 links
****** 25 tramp
****** 26 Google Calendar sync and Org Agenda (Bad quality version)
****** 27 Google Calendar and Org Agenda (good version)
****** 28 shell and eshell
****** 29 rectangles
****** 30 elfeed part 1
****** 31 elfeed and hydras
****** 32 elfeed and macros
****** 33 emacs c++
****** 34 projectile and dumb-jump
****** 35 IBuffer and Emmet mode
****** 36 blogging
****** 37 A touch of elisp
****** 38 Treemacs file view
****** 39 Dired
****** 40 mu4e
****** 41 atomic-chrome
****** 42 pandoc
****** 43 Git Gutter and Timemachine
****** 44 Music
****** 45 An Org mode and PDF-tools workflow
****** 46 Company or Autocomplete
****** 47 auto yasnippets
****** 48 Magit
****** 49 silversearcher
****** 50 mu4e-conversation
****** 51 presentations
****** 52 day to day with org-mode
****** 53 eyebrowse
****** 54 emailing org-agenda
****** 55 Org Tables
****** 56 C++ Irony Completions
****** 57 dictionaries
****** 58 dired-narrow
****** 59 lsp-mode
****** 60 Markdown
****** 61 Restclient
****** 62 org-msg
****** 63 62 Magit Forge
****** 64 63 ClojureScript
****** 65 notmuch
****** 66 Live Python
****** 67 Switching Eshell buffers in Elisp
****** 68 An Emacs vs Vim rant
****** 69 Tramp and org-publish
****** 70 Floobits
****** 71 70
****** 72 openwith
****** 73 customizing elfeed
****** 74 Ripgrep and updating my blog
****** 75 Eglot
****** 76 bufler
****** 77 Bookmarks and Burly
****** 78 Clojure Demo and Advent of Code
****** 79 a grading workflow
****** 80 project
****** 81 Vertico, Marginalia, Consult, and Embark
** Protesilaos Stavrou
*** youtube
**** channel link
https://www.youtube.com/c/ProtesilaosStavrou/videos
**** playlists
***** GNU Emacs
****** 1 Live: Emacs videos, LibrePlanet 2022, philosophy presentations
****** 2 Emacs: Learn to ask for Help and write Elisp
****** 3 Emacs: Context-specific faces (face-remap-add-relative)
****** 4 Emacs: custom Org emphasis faces (org-emphasis-alist)
****** 5 EmacsConf 2021: How Emacs made me appreciate software freedom
****** 6 Emacs: custom Org agenda
****** 7 Live: Status update on my Emacs work
****** 8 Live: Impostor syndrome and the Emacs community
****** 9 Emacs: Demo of Minibuffer and Completions in Tandem (mct.el)
****** 10 Live: Emacs and the Unix philosophy
****** 11 Emacs: introduction to bookmarks
****** 12 Live: Emacs note-taking and the mindful attitude
****** 13 The Emacs community bought me a new computer
****** 14 Emacs: various custom commands
****** 15 Emacs: custom Dired extras
****** 16 Emacs: Modus themes status update (2021-05-19)
****** 17 Emacs: Notmuch demo (notmuch.el)
****** 18 Vlog: Moral lessons from switching to Emacs
****** 19 Emacs: Diary and Calendar
****** 20 Emacs: EWW and my extras (text-based browser)
****** 21 Emacs: workflow with VC for Git
****** 22 Emacs: vc-git extras
****** 23 Emacs: Embark and my extras
****** 24 Emacs: completion framework (Embark,Consult,Orderless,etc.)
****** 25 Vlog: Emacs is my "favourite Emacs package"
****** 26 Emacs: podcast manager with Elfeed+Bongo
****** 27 The Modus themes are built into Emacs!!!
****** 28 Emacs: BONGO and my extras
****** 29 Emacs: custom functions for various tasks
****** 30 Emacs: outline-minor-mode and imenu
****** 31 Emacs: mixed fonts for Org mode
****** 32 Emacs: tools for "focused editing"
****** 33 Emacs: ELFEED demo
****** 34 Emacs: ELFEED demo
****** 35 Emacs: ESHELL demo
****** 36 Emacs: ESHELL demo
****** 37 Emacs: resolve Git conflicts with SMERGE and EDIFF
****** 38 Emacs: introduction to MAGIT
****** 39 Emacs: introduction to IBUFFER
****** 40 Emacs: introduction to VC (version control framework)
****** 41 Emacs: ripgrep with rg.el
****** 42 Emacs: edit keyboard macros
****** 43 Emacs: my Modus Themes are in ELPA
****** 44 Emacs: introduction to REGISTERS
****** 45 Emacs: ICOMPLETE demo
****** 46 Emacs: Introduction to ORG-CAPTURE
****** 47 Emacs: introduction to GNUS
****** 48 Emacs: basics of regular expressions (regexp)
****** 49 Emacs: isearch powers for keyboard macros
****** 50 Emacs: window rules and parameters (`display-buffer-alist' and extras)
****** 51 Vlog: switching to emacs
****** 52 Emacs: FZF integration with ace-window (Ivy actions)
****** 53 Emacs: fuzzy find files (fzf, ripgrep, Ivy+Counsel)
****** 54 Emacs: Seach+Replace in multiple files (Ivy, ibuffer, Dired…)
****** 55 Emacs: Ivy tips and tricks
****** 56 My Modus themes for Emacs are on MELPA
****** 57 Emacs quick demo: git commit fixup with Magit
****** 58 Emacs: interactively rebase git commits with Magit
****** 59 Emacs: store music playlists (Dired+Bongo)
****** 60 Emacs: change multi-file permissions in Dired
****** 61 Emacs music management with Bongo and Dired
****** 62 Basics of Emacs client (`emacsclient' program)
****** 63 Channel update: BSPWM + Emacs
****** 64 Vlog: Emacs documentation culture and the GNU telos
****** 65 Emacs: transpose text
****** 66 Emacs: easier kmacro counter
****** 67 Emacs: comment functions and their behaviour
****** 68 Emacs: recentf and virtual buffers
****** 69 Emacs: Dired subtree has a toggle!
****** 70 Emacs micro motions and hacks
****** 71 Emacs: techniques to narrow Dired
****** 72 Emacs: M-x append-to-buffer (quick demo)
****** 73 Emacs: IDO features and concepts
****** 74 Emacs: DIRED and keyboard macros (quick demo)
****** 75 Emacs: manage window layouts
****** 76 Emacs: discovery with M-x customize
****** 77 Emacs: documentation and feature discovery
****** 78 Emacs: keyboard macro counter (quick demo)
****** 79 Emacs: buffer and window management
****** 80 Emacs: ISEARCH features and extras
****** 81 Emacs DIRED tweaks and improvements
****** 82 Vlog: Emacs mindset and Unix philosophy
****** 83 My accessible Emacs themes
****** 84 Emacs: use "occur" in practice
****** 85 Practical Emacs macros (based on Vim Golf)
****** 86 Introduction to keyboard macros in Emacs
****** 87 Emacs DIRED: list sub-directories, search results, images, diffs
****** 88 Basics of the Emacs file manager (dired == directory editor)
****** 89 Vim user's first impressions of GNU EMACS
*** blog / site
https://protesilaos.com/
** Marco Avelar
*** youtube
**** channel link
https://www.youtube.com/channel/UCy8M-JO9RfnmBZQ1bEoc8PQ
**** playlists
***** emacs
https://www.youtube.com/playlist?list=PLSjT1fDWcwAJYSwKnzwPw4VYVsWWdBMSr
****** 1 Improve project workflow with Projectile! (Emacs)
****** 2 Easy buffer navigation with avy! (Emacs)
****** 3 Improve project workflow with Ivy, Counsel, and Swiper! (Emacs)
****** 4 EXWM is love! (Emacs)
****** 5 Code completion with company-mode! (Emacs)
****** 6 Save yourself some time with flycheck-mode! (Emacs)
****** 7 Easy window movement with winum-mode! (Emacs)
****** 8 Emacs? Vim? Just go modal with Emacs!
****** 9 Improve project workflow with GNU Global! (Emacs)
****** 10 Emacs + LSP = Heaven
****** 11 Emacs + LSP Setup (clangd)
****** 12 Emacs: Help section & Elisp
****** 13 Emacs + dmenu is awesome! bye bye Ivy!
****** 14 Emacs + Minimal LSP = Happy dev
*** youtube
https://www.youtube.com/playlist?list=PL6N_e9hIrvFfmFkXm8fQJpzdx2-rAt00s
** Christopher Maiorana
*** youtube
**** channel link
https://www.youtube.com/channel/UCxpeu8gvV77Z1wUrTpu5BUQ
**** playlists
***** Emacs
****** 1 Org Mode GTD Basics
****** 2 Some Emacs Text Mode Hooks I Like
****** 3 Emacs Obscure Filename Patterns and Auto Mode Alist Addition
****** 4 6 Months of Org Mode Nearly Broke Me (Emacs Life)
****** 5 Sort Yourself Out With Emacs Org Mode GTD (Simplified!)
****** 6 Emacs For Writers | Count Words, Goals In Buffer
****** 7 Emacs Macros | Save Time and Typing
****** 8 Emacs as a Typewriter | LaTeX Standard Manuscript Format
****** 9 Emacs | Keeping a Journal In Org Mode
****** 10 Enjoy Reading Documentation With "Info" in Emacs
****** 11 Emacs Bookmarks Save Your Place
****** 12 Talking about Emacs and Other Things
****** 13 6 Months of EXWM - And This Is What Happened!
** Gavin Freeborn
*** youtube
**** channel link
https://www.youtube.com/playlist?list=PLknodeJt-I5GJmcd7ENakYf_M0x9q50d1
**** playlists
***** Emacs
****** 1 Getting Evil (aka Vim keys) in Emacs without Doom Emacs
****** 2 From Vim to Emacs - Is this even my final form?
****** 3 Bring a Web Browser, Python, Javascript and more to EMACS - Emacs Application Framework

** Jake B
*** youtube
**** channel link
https://www.youtube.com/c/JakeBox0/videos
**** playlists
***** Straightforward Emacs
****** 1 Perfect Emacs Org Mode Exports to LaTeX – Straightforward Emacs
****** 2 Export Emacs Org Mode to HTML – Straightforward Emacs
****** 3 Powerful Text Snippets – Emacs YASnippet – Straightforward Emacs
****** 4 Org Mode Time and Task Tools – Straightforward Emacs
****** 5 Classy Slideshows From Emacs Org Mode + org-reveal – Straightforward Emacs
****** 6 Registers for File Shortcuts – A Better Bookmark – Straightforward Emacs
***** Emacs Org Mode Videos
****** 1 Emacs Org Mode Demo 2021
****** 2 Perfect Emacs Org Mode Exports to LaTeX – Straightforward Emacs
****** 3 Export Emacs Org Mode to HTML – Straightforward Emacs
****** 4 Org Mode Time and Task Tools – Straightforward Emacs
****** 5 Classy Slideshows From Emacs Org Mode + org-reveal – Straightforward Emacs
***** LaTeX Videos
****** 1 LaTeX for Students – A Simple Quickstart Guide
** James Cash
*** youtube
**** channel link
https://www.youtube.com/user/jamesnvc000/videos
**** videos
***** Customizing the Emacs Modeline
***** Getting Evil With Emacs
***** Introspective Emacs: Learning How Things Work & Changing Them
***** Reading PDFs with Emacs
***** Intermediate Emacs: Extending & Creating Helm Sources
***** An Emacs Configuration Overview
** Seorenn
*** youtube
https://www.youtube.com/channel/UCsJXkw_Ssp-1myJFm4_SMJA
**** playlists
***** doom emacs
****** 1 Just started
****** 2 How to configure Doom Emacs | 둠 이맥스 설정 기초
****** 3 Just a beginner's guide for Doom Emacs | 그냥 기본적인 편집 가이드
****** 4 Just a beginner's guide for Doom Emacs | 그냥 기본적인 편집 가이드
****** 5 Projects and Workspaces | Doom Emacs | 프로젝트와 워크스페이스
****** 6 Simple Editing Tips | Doom Emacs | 둠 이맥스의 간단한 편집 팁 몇 가지
** thoughtbot Emacs Meetups
*** youtube
**** playlist link
https://www.youtube.com/playlist?list=PL8tzorAO7s0he-pp7Y_JDl7-Kz2Qlr_Pj
**** playlists
***** Emacs Meetups
****** 1 Conquering Kubernetes with Emacs
****** 2 Spin Your Own Spacemacs-lite
****** 3 Virtualized Emacs as an IDE
****** 4 Fun Shell Commands
****** 5 Embedding WebKit in Emacs: XWidgets+WebKit Feature Preview
****** 6 Have Emacs Teach You Chinese
****** 7 Getting Started With Org Mode
****** 8 Conquering Your Finances with Emacs and Ledger
****** 9 How to Order Salads From Inside Emacs
****** 10 Emacs For Writers
****** 11 Searching the Web with engine-mode
****** 12 How I Use org-capture and Stuff
****** 13 A Pretty Good Introduction to Pretty Good Privacy
****** 14 Org-mode for Reproducible Research
****** 15 Keyboard Macro Workshop
****** 16 The Editor of a Lifetime
****** 17 Turtle Graphics with Emacs Lisp
****** 18 Writing Games with Emacs
****** 19 Introduction to evil-mode
****** 20 Emacs as a Python IDE
****** 21 Upgrading IPython with Emacs
****** 22 An Introduction to Emacs Lisp
****** 23 IRC With ERC
* intresting packages to check out
** org-roam-ui
A graphical frontend for exploring your org-roam Zettelkasten
https://github.com/org-roam/org-roam-ui
** [#C] writefreely.el
*Frictionless* blogging with Org Mode. No setup required.

https://github.com/dangom/writefreely.el

This small library allows you to publish and update your Org-mode files as posts
to any instance of the federated blogging platform write freely. No account nor
registration is required for anonymous posts in the platform.

https://writefreely.org/
** Calfw - A calendar framework for Emacs
https://github.com/kiwanami/emacs-calfw
** vertico-posframe
vertico-posframe is an vertico extension, which lets vertico use posframe to
show its candidate menu.

https://github.com/tumashu/vertico-posframe

https://elpa.gnu.org/packages/vertico-posframe.html
** org-super-agenda
** org-noter
https://github.com/weirdNox/org-noter
** Ace Jump Mode
https://github.com/winterTTr/ace-jump-mode
** vue-mode
Emacs major mode for vue.js based on mmm-mode.
https://github.com/AdamNiederer/vue-mode
** android-mode
Emacs minor mode for Android application development
https://github.com/remvee/android-mode
** filldent.el
Fill or indent depending on mode
https://github.com/duckwork/filldent.el
** region-occurrences-highlighter
This emacs package implements a local minor mode that highlights occurrences of
the current selected region.
https://github.com/alvarogonzalezsotillo/region-occurrences-highlighter
** anki-editor
Emacs minor mode for making Anki cards with Org
https://github.com/louietan/anki-editor
** origami.el
A folding minor mode for Emacs
https://github.com/gregsexton/origami.el
** lsp-origami
lsp-mode heart origami.el
https://github.com/emacs-lsp/lsp-origami
** diffview-mode
View diffs side-by-side in Emacs
https://github.com/mgalgs/diffview-mode
** highlight-sexp
A GNU/Emacs minor mode that highlights s-exp at the current position.
https://github.com/daimrod/highlight-sexp
** siege-mode
An emacs minor mode to surround the region with smart delimiters interactively.
https://github.com/tslilc/siege-mode
** polymode
Framework for Multiple Major Modes in Emacs (core library)
https://github.com/polymode/polymode
** Highlight-Indentation-for-Emacs
Minor modes to highlight indentation guides in emacs.

different than =highligh-indent=, this one colors up the first coluomn of characters
https://github.com/antonj/Highlight-Indentation-for-Emacs
** aggressive-indent-mode
Emacs minor mode that keeps your code always indented. More reliable than
electric-indent-mode.

https://github.com/Malabarba/aggressive-indent-mode
** highlight-indent-guides
Emacs minor mode to highlight indentation

https://github.com/DarthFennec/highlight-indent-guides

this only shows a thin line

(not showing on org babel blocks)
** cargo.el
Emacs Minor Mode for Cargo, Rust's Package Manager.
https://github.com/kwrooijen/cargo.el
** yasnippet-org-mode
A YASnippet bundle for Emacs org-mode. A collection of yasnippet files

https://github.com/RickMoynihan/yasnippet-org-mode
** org-babel-examples
Examples using emacs org mode babel inline source code with different backend
languages
https://github.com/dfeich/org-babel-examples
** ztree
Directory tree comparison mode for Emacs
https://github.com/fourier/ztree
** engine-mode
Minor mode for defining and querying search engines through Emacs.
https://github.com/hrs/engine-mode
** org-transclusion
Emacs package to enable transclusion with Org Mode
https://github.com/nobiot/org-transclusion
** org-fc
Spaced Repetition System for Emacs org-mode
https://github.com/l3kn/org-fc
** emacs-bash-completion
Add programmable bash completion to Emacs shell-mode
https://github.com/szermatt/emacs-bash-completion
** color-identifiers-mode
Emacs minor mode to highlight each source code identifier uniquely based on its name
https://github.com/ankurdave/color-identifiers-mode
** selectric-mode
keyboard Make your Emacs sound like a proper typewriter.
https://github.com/rbanffy/selectric-mode
** typewriter-mode.el
Typewriter sound effect for Emacs
https://github.com/tungd/typewriter-mode.el
** emacs-modern-fringes
Replaces the ugly looking default emacs fringe bitmaps and replaces them with
better, modern looking ones.
https://github.com/SpecialBomb/emacs-modern-fringes
** tracker-mode
a music tracker/sequencer for emacs
https://github.com/defaultxr/tracker-mode
** modern-cpp-font-lock
C++ font-lock for Emacs
https://github.com/ludwigpacifici/modern-cpp-font-lock

I'm putting it here not because I want to use it, but to study it.

It does font locking for a specific major mode.

I want to do something similar in the future.
** org-protocol-capture-html
Capture HTML from the browser selection into Emacs as org-mode content
https://github.com/alphapapa/org-protocol-capture-html
** ob-mermaid
Generate mermaid diagrams within Emacs org-mode babel
https://github.com/arnm/ob-mermaid
** org-mind-map
This is an emacs package that creates graphviz directed graphs.
https://github.com/the-ted/org-mind-map
** org-graph-view
View Org buffers as a clickable, graphical mind-map
https://github.com/alphapapa/org-graph-view
** spinner.el
Emacs mode-line spinner for operations in progress
https://github.com/Malabarba/spinner.el
** org-ql
An Org-mode query language, including search commands and saved views
https://github.com/alphapapa/org-ql
** svelte-mode
Emacs major mode for Svelte.
https://github.com/leafOfTree/svelte-mode
** emacs-solaire-mode
If only certain buffers could be so grossly incandescent.
https://github.com/hlissner/emacs-solaire-mode

already installed in Doom Emacs
** electric-operator
An emacs minor mode to automatically add spacing around operators
https://github.com/davidshepherd7/electric-operator
** org-clock-convenience
Convenience functions to work with emacs org mode clocking
https://github.com/dfeich/org-clock-convenience
** auto-dictionary-mode
Emacs: automatic dictionary switcher for flyspell
https://github.com/nschum/auto-dictionary-mode
** magic-latex-buffer
Magical syntax highlighting for LaTeX-mode buffers
https://github.com/zk-phi/magic-latex-buffer
** yasnippet-latex-mode
Collection of latex-mode snippets for yasnippet in Emacs
https://github.com/shanecelis/yasnippet-latex-mode
** synosaurus
An extensible thesaurus mode for emacs
https://github.com/hpdeifel/synosaurus

Quite old and unmaintained (2 years)

the backends work with German and English, no Portuguese option
** transcription-mode
Emacs mode for editing transcripts.
https://github.com/skeeto/transcription-mode
** ink-mode
An Emacs major mode for the interactive fiction scripting language Ink, by Inkle Studios.
https://github.com/Kungsgeten/ink-mode
** dotnet.el
dotnet CLI minor mode for Emacs
https://github.com/julienXX/dotnet.el
** love-minor-mode
An Emacs minor mode for LÖVE
https://github.com/ejmr/love-minor-mode
** org-kanban
Simple approach to kanban with emacs' org-mode
https://github.com/hagmonk/org-kanban
** journalctl-mode
Major mode to view journalctl's output in Emacs
https://github.com/SebastianMeisel/journalctl-mode
** evil-tutor
Vimtutor adapted to Emacs+Evil and wrapped in a major mode.
https://github.com/syl20bnr/evil-tutor
** org-dashboard
Visual summary of progress in projects and tasks for Emacs Org Mode
https://github.com/bard/org-dashboard
** org-special-block-extras
A number of new custom blocks and link types for Emacs' Org-mode ^_^
https://github.com/alhassy/org-special-block-extras
** evil-textobj-tree-sitter
Tree-sitter powered textobjects for evil mode in Emacs
https://github.com/meain/evil-textobj-tree-sitter
** org-d20
Emacs minor mode for tabletop roleplaying games that use a d20
https://github.com/spwhitton/org-d20
** manage-minor-mode
Manage your minor-mode on the dedicated interface buffer. Emacs.
https://github.com/emacsorphanage/manage-minor-mode
** manage-minor-mode-table
Manage minor-modes in table.
https://github.com/jcs-elpa/manage-minor-mode-table
** snapshot-timemachine
Emacs-mode to step through (Btrfs, ZFS, ...) snapshots of files
https://github.com/mrBliss/snapshot-timemachine
** literate-programming-examples
A collection of literate programming examples using Emacs Org mode; these
examples are directly usable (copy and start hacking), and/or can serve as
educational literate programs. Clojure will be the preferred language.
https://github.com/limist/literate-programming-examples
** rust-playground
GNU/Emacs mode that setup local playground for code snippets in Rust language.
https://github.com/grafov/rust-playground
** perfect-margin
[emacs] auto center emacs windows, work with minimap and/or linum-mode
https://github.com/mpwang/perfect-margin
** wakib-keys
Emacs mode that moves to modern keybindings
https://github.com/darkstego/wakib-keys

workaround CUA mode
** prettify-utils.el
Helper functions for emacs' prettify-symbols-mode
https://github.com/Ilazki/prettify-utils.el/blob/master/prettify-utils.el
** speed-of-thought-lisp
Write elisp at the speed of thought. Emacs minor mode with abbrevs and keybinds.
https://github.com/Malabarba/speed-of-thought-lisp
** org-remark
Highlight and annotate any text file with using Org mode
https://github.com/nobiot/org-remark
** wat-mode
An Emacs major mode for WebAssembly's text format
https://github.com/devonsparks/wat-mode
** power-mode.el
Imbue Emacs with power!
https://github.com/elizagamedev/power-mode.el

particles and screen shake while you type
** guess-language.el
Emacs minor mode that detects the language you're typing in. Automatically
switches spell checker. Supports multiple languages per document.
https://github.com/tmalsburg/guess-language.el
** mode-line-stats
A bunch of easy to set up stats for the Emacs mode-line.
https://github.com/Idorobots/mode-line-stats
** pdf-continuous-scroll-mode.el
A minor mode for Emacs that implements a two-buffer hack to provide continuous
scrolling in pdf-tools
https://github.com/dalanicolai/pdf-continuous-scroll-mode.el
** mlscroll
Lightweight scrollbar for the Emacs mode line
https://github.com/jdtsmith/mlscroll
** org-fragtog
Automatically toggle Org mode LaTeX fragment previews as the cursor enters and exits them
https://github.com/io12/org-fragtog
** org-recur
Simple recurring org-mode tasks
https://github.com/m-cat/org-recur
** org-menu
A discoverable menu for Emacs org-mode using transient
https://github.com/sheijk/org-menu
** too-long-lines-mode
A global minor mode to hide lines that are too long and make emacs slow.
https://github.com/rakete/too-long-lines-mode
** dtrt-indent
A minor mode that guesses the indentation offset originally used for creating
source code files and transparently adjusts the corresponding settings in Emacs,
making it more convenient to edit foreign files.
https://github.com/jscheid/dtrt-indent
** emacs-org-transform-tree-table
Transform an org-mode outline and its properties to a table format (org-table,
CSV)
https://github.com/jplindstrom/emacs-org-transform-tree-table
** indent-control
Generic control the indentation level for each mode.
https://github.com/jcs-elpa/indent-control
** emmet-mode
Unofficial Emmet's support for emacs
https://github.com/emacsmirror/emmet-mode
* configs from the net to check out
** Colored text in org-mode with export to HTML
https://kitchingroup.cheme.cmu.edu/blog/2016/01/16/Colored-text-in-org-mode-with-export-to-HTML/

Just for fun, I want to put colored text in org-mode using links. This is a
simple hack that uses the description in an org-mode link as the text to color,
and the path in link to specify the color. I use an overlay to do this because I
could not figure out how to change the face foreground color. We provide a
simple export to HTML. LaTeX is also doable, but a trickier export as you need
to define the colors in the LaTeX header also.

Here is the code to make the color link, and put overlays on them with
font-lock.
** Hugo Cisneros - Org-mode configuration
https://hugocisneros.com/org-config/
TODO faces and export settings

Org “TODO” bullets
** Temporarily show emphasis markers when the cursor is on it
https://www.reddit.com/r/orgmode/comments/43uuck/temporarily_show_emphasis_markers_when_the_cursor/
*** question
I'm using (setq org-hide-emphasis-markers t) to hide the emphasis markers in
*bold* and /italics/ etc.

However, is it possible to display the markers only when the cursor is on or
between them to simplify editing and removal?
*** answer
Probably far from perfect, but the following is inspired by
=prettify-symbols-unprettify-at-point=. The hook is buffer-local:
#+begin_src elisp
(defun org-show-emphasis-markers-at-point ()
  (save-match-data
    (if (and (org-in-regexp org-emph-re 2)
            (>= (point)
                (match-beginning 3)
            )
            (<= (point)
                (match-end 4)
            )
            (member (match-string 3)
                    (mapcar 'car org-emphasis-alist)
            )
        )
	      (with-silent-modifications
	        (remove-text-properties
	          (match-beginning 3) (match-beginning 5)
	         '(invisible org-link)
          )
        )
        (apply 'font-lock-flush
               (list (match-beginning 3)
                     (match-beginning 5))
        )
    )
  )
)

(add-hook 'post-command-hook
	  'org-show-emphasis-markers-at-point nil t)
#+end_src
** org-appear
Toggle visibility of hidden Org mode element parts upon entering and leaving an
element
* config emacs by purpose
** edit org files to become pdf files
** write literate configuration in org mode then tangle to the respective config files
** take notes in org mode from books, videos, sites, etc.
** organize life with org mode
*** use the agenda
*** have specific TODOs for important stuff
**** bills due dates
**** medicine depleting dates
**** university due dates
**** recurring tasks
*** capture
**** thoughts
**** dreams
**** TODOs
** develop a personal knowledge management system (PKMS)
*** a reference place for the things I learn
** programming environment for different languages and technologies
*** gdscript
*** python
*** web / mobile apps
**** html
**** css
**** javascript
**** vue
**** svelte
**** nativescript
**** webassembly
*** rust
*** C/C++
*** docker
*** shell
**** zsh
**** fish
* configs TODOs
** TODO + hydras
*** TODO + manipulate windows
**** TODO splitting
**** TODO switching
**** TODO change buffer
**** TODO closing
**** TODO resizing
*** TODO + selecting text
*** TODO + commenting text
**** TODO comment reagion
**** TODO comment s-expression
**** TODO comment block
**** TODO comment paragraph
**** TODO add comment to the end of the line
** TODO + changes to org mode
*** DONE add org roam
*** DONE hide synthax markers in org mode
*** DONE change the ... when a header is folded
*** DONE change the bullet point symbol used
*** DONE install and configure org-appear
*** TODO change the symbols for the TODO/DONE, etc
*** TODO remove the black line that shows on the folded heading
when there is a code snippet inside the heading
*** TODO add headers/bullets on the line the cursor is on
not after the last item of the current sub-tree
*** TODO change color of headers
*** TODO start org files folded
*** TODO BUG adding new entries to an ordered list does not add the next number
*** TODO configure org agenda and org super agenda
** TODO + add adtional language support that does not have a module for it
*** TODO vue
*** TODO svelte
** TODO + UI improvements
*** TODO + the tabs are showing on the completion list
**** TODO either hide that or make it show the name of the key pressed before (category)
*** TODO get the minimap working
*** TODO show all tabs, not just tabs of files of same extension
or show tabs for the groups of buffers present
*** TODO get the scrollbar on the right back
*** TODO change the which key position to the middle of the screen or on the vertical
I am using vertico now so it may not be which key anymore

which key github page / documentation
https://github.com/justbur/emacs-which-key#popup-type-options
*** TODO config the dashboard
*** TODO configure org capture templates
*** TODO how to fix the "us international with dead keys" problem on Emacs
maybe this can solve the issue:
https://www.emacswiki.org/emacs/DeadKeys

another resource trying to fix by having 2 keyboard layouts:
https://askubuntu.com/questions/364292/dead-keys-in-emacs-with-ibus
*** TODO change the behavior on org mode, edit mode, when pressing tab demotes a heading
*** TODO change how the cursor traverses lines that are wraped
*** TODO ? find a way to show the other options on which key
preferably bind =C-h= and =C-l=, or =C-j= and =C-k= to go forwards and backwards
on the list

** TODO + text formatting / styling / completion
*** TODO show synthax markers when inside the word that is surounded by them
the name of the package is =org-reveal=
*** TODO find out if changing the rendering of a word in general can work like org-reveal
for examble: changing lambda for λ

but when the cursor is at the symbol the rendering changes back to the word lambda

the original idea (as I know of) of having some words change to symbols comes
from a distrotube video: https://www.youtube.com/watch?v=5iCjhdCUuLg&t=6s
*** TODO change fundamental mode to org mode?
*** TODO ? how to make emacs highlight given words with different colors no metter what mode it is in
*** TODO change elisp formatting rules
make end of parenthesis line up with the oppening parenthesis on its own line
*** TODO add code completion on emacs lisp blocks (or any org-babel block really)
*** TODO configure snippets
*** TODO configure grammar with that proram I found
look on email for grammar, synthax or spelling

https://languagetool.org/

https://github.com/mhayashi1120/Emacs-langtool
** TODO + keybindings
*** TODO add documentation to this config about every key mapping in Emacs and Doom Emacs
making the distinction of the keybinding comming from Emacs or Doom Emacs,
including which package overrides that keybinding, also document if the
keybinding is changed by me
* Config files
** init.el
#+begin_src emacs-lisp :tangle ./init.el

#+end_src
*** introduction
This file controls *what Doom modules are enabled* and *what order they load in*.
*Remember to run =doom sync= after modifying it!*

NOTE Press =SPC h d h= (or =C-h d h= for non-vim users) to access Doom's
documentation. There you'll find a "Module Index" link where you'll find a
comprehensive list of Doom's modules and what flags they support.

NOTE Move your cursor over a module's name (or its flags) and press =K= (or =C-c
c k= for non-vim users) to view its documentation. This works on flags as well
(those symbols that start with a plus).

Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
directory (for easy access to its source code).

*** doom block start
#+begin_src emacs-lisp :tangle ./init.el
;;; init.el -*- lexical-binding: t; -*-
(doom!
#+end_src
*** input
**** input start
#+begin_src emacs-lisp :tangle ./init.el
       :input
#+end_src
**** NO chinese
+ [[file:../modules/input/chinese/README.org][chinese]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;chinese
#+end_src
**** NO japanese
+ [[file:../modules/input/japanese/README.org][japanese]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;japanese
#+end_src
**** NO layout
+ [[file:../modules/input/layout/README.org][layout]] =+azerty +bepo= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;(layout            ; auie,ctsrnm is the superior home row
       ;; +azerty
       ;; +bepo
       ;; )
#+end_src
*** completion
Modules that provide new interfaces or frameworks for completion, including code
completion.

**** completion start
#+begin_src emacs-lisp :tangle ./init.el
       :completion
#+end_src
**** yes company
+ [[file:../modules/completion/company/README.org][company]] =+childframe +tng= - The ultimate code completion backend
#+begin_src emacs-lisp :tangle ./init.el
       (company           ; the ultimate code completion backend
       ;; +childframe
       ;; +tng
        )
#+end_src
**** NO helm
+ helm =+fuzzy +childframe= - *Another* search engine for love and life
#+begin_src emacs-lisp :tangle ./init.el
       ;;(helm              ; the *other* search engine for love and life
       ;; +fuzzy
       ;; +childframe
       ;; )
#+end_src
**** NO ido
+ ido - The /other/ *other* search engine for love and life
#+begin_src emacs-lisp :tangle ./init.el
       ;;ido               ; the other *other* search engine...
#+end_src
**** NO ivy
+ [[file:../modules/completion/ivy/README.org][ivy]] =+fuzzy +prescient +childframe +icons= - /The/ search engine for love and
  life
#+begin_src emacs-lisp :tangle ./init.el
       ;;(ivy              ; a search engine for love and life
       ;; +fuzzy
       ;; +childframe
       ;; +prescient
       ;; +icons
       ;;)
#+end_src
**** yes vertico
+ [[file:../modules/completion/vertico/README.org][vertico]] =+icons= - The search engine of the future
#+begin_src emacs-lisp :tangle ./init.el
       (vertico           ; the search engine of the future
        +icons
        )
#+end_src
*** UI
Aesthetic modules that affect the Emacs interface or user experience.

**** UI start
#+begin_src emacs-lisp :tangle ./init.el
       :ui
#+end_src
**** yes deft
+ [[file:../modules/ui/deft/README.org][deft]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       deft              ; notational velocity for Emacs
#+end_src
**** doom
+ [[file:../modules/ui/doom/README.org][doom]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       doom              ; what makes DOOM look the way it does
#+end_src
**** doom-dashboard
+ [[file:../modules/ui/doom-dashboard/README.org][doom-dashboard]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       doom-dashboard    ; a nifty splash screen for Emacs
#+end_src
**** NO doom-quit
+ [[file:../modules/ui/doom-quit/README.org][doom-quit]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;; doom-quit       ; DOOM quit-message prompts when you quit Emacs
#+end_src
**** emoji
+ [[file:../modules/ui/emoji/README.org][emoji]] =+ascii +github +unicode= - Adds emoji support to Emacs
#+begin_src emacs-lisp :tangle ./init.el
       (emoji            ; 🙂
       ;; +ascii
       ;; +github
        +unicode
       )
#+end_src
**** hl-todo
+ [[file:../modules/ui/hl-todo/README.org][hl-todo]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
#+end_src
**** hydra
+ [[file:../modules/ui/hydra/README.org][hydra]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       hydra
#+end_src
**** indent-guides
+ indent-guides - TODO
#+begin_src emacs-lisp :tangle ./init.el
       indent-guides     ; highlighted indent columns
#+end_src
**** ligatures
+ [[file:../modules/ui/ligatures/README.org][ligatures]] =+extra +fira +hasklig +iosevka +pragmata-pro= - Ligature support for Emacs

+ =+fira= Enables =Fira Code= ligatures. This requires Fira Code Symbol and a
  patched version of Fira Code (see below).
+ =+hasklig= Enable =Hasklig= ligatures. This requires a patched version of the
  HaskLig font (see below).
+ =+iosevka= Enable =Iosevka= ligatures. This requires a patched version of the
  Iosevka font (see below).
+ =+pragmata-pro= Enable =Pragmata Pro= ligatures. This requires the [[https://www.fsd.it/shop/fonts/pragmatapro/][Pragmata
  Pro font]].
#+begin_src emacs-lisp :tangle ./init.el
       (ligatures         ; ligatures and symbols to make your code pretty again
       +extra
       +fira
       ;; +hasklig
       ;; +iosevka
       ;; +pragmata-pro
        )
#+end_src
**** minimap
+ [[file:../modules/ui/minimap/README.org][minimap]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       minimap           ; show a map of the code on the side
#+end_src
**** modeline
+ [[file:../modules/ui/modeline/README.org][modeline]] =+light= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (modeline          ; snazzy, Atom-inspired modeline, plus API
       ;; +light
        )
#+end_src
**** nav-flash
+ [[file:../modules/ui/nav-flash/README.org][nav-flash]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;nav-flash         ; blink cursor line after big motions
#+end_src
**** neotree
+ [[file:../modules/ui/neotree/README.org][neotree]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;neotree           ; a project drawer, like NERDTree for vim
#+end_src
**** ophints
+ [[file:../modules/ui/ophints/README.org][ophints]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ophints           ; highlight the region an operation acts on
#+end_src
**** popup
+ [[file:../modules/ui/popup/README.org][popup]] =+all +defaults= - Makes temporary/disposable windows less intrusive
#+begin_src emacs-lisp :tangle ./init.el
       (popup            ; tame sudden yet inevitable temporary windows
        +defaults
        +all
        )
#+end_src
**** tabs
+ [[file:../modules/ui/tabs/README.org][tabs]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       tabs              ; a tab bar for Emacs
#+end_src
**** treemacs
+ [[file:../modules/ui/treemacs/README.org][treemacs]] - =+lsp= - A tree layout file explorer for Emacs
#+begin_src emacs-lisp :tangle ./init.el
       (treemacs          ; a project drawer, like neotree but cooler
        +lsp
        )
#+end_src
**** unicode
+ [[file:../modules/ui/unicode/README.org][unicode]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       unicode           ; extended unicode support for various languages
#+end_src
**** vc-gutter
+ vc-gutter - TODO
#+begin_src emacs-lisp :tangle ./init.el
       vc-gutter         ; vcs diff in the fringe
#+end_src
**** vi-tilde-fringe
+ vi-tilde-fringe - TODO
#+begin_src emacs-lisp :tangle ./init.el
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
#+end_src
**** window-select
+ [[file:../modules/ui/window-select/README.org][window-select]] =+switch-window +numbers= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (window-select     ; visually switch windows
        +numbers
        )
#+end_src
**** workspaces
+ [[file:../modules/ui/workspaces/README.org][workspaces]] - Isolated workspaces
#+begin_src emacs-lisp :tangle ./init.el
       workspaces        ; tab emulation, persistence & separate workspaces
#+end_src
**** zen
+ [[file:../modules/ui/zen/README.org][zen]] - Distraction-free coding (or writing)
#+begin_src emacs-lisp :tangle ./init.el
       ;;zen               ; distraction-free coding or writing
#+end_src
*** Editor
Modules that affect and augment your ability to manipulate or insert text.

**** Editor start
#+begin_src emacs-lisp :tangle ./init.el
       :editor
#+end_src
**** evil
+ [[file:../modules/editor/evil/README.org][evil]] =+everywhere= - transforms Emacs into Vim
#+begin_src emacs-lisp :tangle ./init.el
       (evil               ; come to the dark side, we have cookies
        +everywhere
        )
#+end_src
**** file-templates
+ [[file:../modules/editor/file-templates/README.org][file-templates]] - Auto-inserted templates in blank new files
#+begin_src emacs-lisp :tangle ./init.el
       file-templates    ; auto-snippets for empty files
#+end_src
**** fold
+ [[file:../modules/editor/fold/README.org][fold]] - universal code folding
#+begin_src emacs-lisp :tangle ./init.el
       fold                ; (nigh) universal code folding
#+end_src
**** format
+ format =+onsave= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;(format             ; automated prettiness
       ;; +onsave
       ;; )
#+end_src
**** god
+ god - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;god               ; run Emacs commands without modifier keys
#+end_src
**** lispy
+ [[file:../modules/editor/lispy/README.org][lispy]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;lispy             ; vim for lisp, for people who don't like vim
#+end_src
**** multiple-cursors
+ multiple-cursors - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;multiple-cursors  ; editing in many places at once
#+end_src
**** objed
+ [[file:../modules/editor/objed/README.org][objed]] =+manual= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;(objed             ; text object editing for the innocent
       ;; +manual
       ;; )
#+end_src
**** parinfer
+ [[file:../modules/editor/parinfer/README.org][parinfer]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;parinfer          ; turn lisp into python, sort of
#+end_src
**** rotate-text
+ rotate-text - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;rotate-text       ; cycle region at point between text candidates
#+end_src
**** snippets
+ [[file:../modules/editor/snippets/README.org][snippets]] - Snippet expansion for lazy typists
#+begin_src emacs-lisp :tangle ./init.el
       snippets          ; my elves. They type so I don't have to
#+end_src
**** word-wrap
+ [[file:../modules/editor/word-wrap/README.org][word-wrap]] - soft wrapping with language-aware indent
#+begin_src emacs-lisp :tangle ./init.el
       ;;word-wrap         ; soft wrapping with language-aware indent
#+end_src
*** Emacs
Modules that reconfigure or augment packages or features built into Emacs.
**** Emacs sart
#+begin_src emacs-lisp :tangle ./init.el
       :emacs
#+end_src
**** dired
+ [[file:../modules/emacs/dired/README.org][dired]] =+ranger +icons= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (dired             ; making dired pretty [functional]
        +ranger
        +icons
        )
#+end_src
**** electric
+ electric - TODO
#+begin_src emacs-lisp :tangle ./init.el
       electric          ; smarter, keyword-based electric-indent
#+end_src
**** ibuffer
+ [[file:../modules/emacs/ibuffer/README.org][ibuffer]] =+icons= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (ibuffer          ; interactive buffer management
        +icons
        )
#+end_src
**** undo
+ [[file:../modules/emacs/undo/README.org][undo]] =+tree= - A smarter, more intuitive & persistent undo history
#+begin_src emacs-lisp :tangle ./init.el
       (undo             ; persistent, smarter undo for your inevitable mistakes
        +tree
        )
#+end_src
**** vc
+ [[file:../modules/emacs/vc/README.org][vc]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       vc                ; version-control and Emacs, sitting in a tree
#+end_src

*** Term
Modules that offer terminal emulation.
**** Term start
#+begin_src emacs-lisp :tangle ./init.el
       :term
#+end_src
**** eshell
+ [[file:../modules/term/eshell/README.org][eshell]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;eshell            ; the elisp shell that works everywhere
#+end_src
**** shell
+ shell - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;shell             ; simple shell REPL for Emacs
#+end_src
**** term
+ term - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;term              ; basic terminal emulator for Emacs
#+end_src
**** vterm
+ [[file:../modules/term/vterm/README.org][vterm]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;vterm             ; the best terminal emulation in Emacs
#+end_src
*** Checkers
**** Checkers start
#+begin_src emacs-lisp :tangle ./init.el
       :checkers
#+end_src
**** syntax
+ syntax =+childframe= - Live error/warning highlights
#+begin_src emacs-lisp :tangle ./init.el
       ;; (syntax              ; tasing you for every semicolon you forget
       ;; +childframe
       ;; )
#+end_src
**** spell
+ [[file:../modules/checkers/spell/README.org][spell]] =+aspell +flyspell +enchant +everywhere +hunspell= - Spell checking
#+begin_src emacs-lisp :tangle ./init.el
       ;; (spell              ; tasing you for misspelling mispelling
       ;; +flyspell
       ;; )
#+end_src
**** grammar
+ [[file:../modules/checkers/grammar/README.org][grammar]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;; grammar             ; tasing grammar mistake every you make
#+end_src
*** Tools
Small modules that give Emacs access to external tools & services.
**** Tools start
#+begin_src emacs-lisp :tangle ./init.el
       :tools
#+end_src
**** ansible
+ ansible - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;ansible
#+end_src
**** biblio
#+begin_src emacs-lisp :tangle ./init.el
       ;;biblio            ; Writes a PhD for you (citation needed)
#+end_src
**** debugger
+ debugger =+lsp= - A (nigh-)universal debugger in Emacs
#+begin_src emacs-lisp :tangle ./init.el
       ;; (debugger          ; FIXME stepping through code, to help you add bugs
       ;; +lsp
       ;; )
#+end_src
**** direnv
+ [[file:../modules/tools/direnv/README.org][direnv]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;direnv
#+end_src
**** docker
+ [[file:../modules/tools/docker/README.org][docker]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;; (docker
       ;; +lsp
       ;; )
#+end_src
**** editorconfig
+ [[file:../modules/tools/editorconfig/README.org][editorconfig]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;editorconfig      ; let someone else argue about tabs vs spaces
#+end_src
**** ein - jupyper notebooks
+ [[file:../modules/tools/ein/README.org][ein]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;ein               ; tame Jupyter notebooks with emacs
#+end_src
**** eval
+ [[file:../modules/tools/eval/README.org][eval]] =+overlay= - REPL & code evaluation support for a variety of languages
#+begin_src emacs-lisp :tangle ./init.el
      ;; (eval      ; run code, run (also, repls)
      ;;  +overlay
      ;;  )
#+end_src
**** gist
+ gist - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;gist              ; interacting with github gists
#+end_src
**** lookup
+ [[file:../modules/tools/lookup/README.org][lookup]] =+dictionary +docsets +offline= - Universal jump-to & documentation lookup backend
#+begin_src emacs-lisp :tangle ./init.el
       ;; (lookup              ; navigate your code and its documentation
       ;; +dictionary
       ;; +docsets
       ;; +offline
       ;; )   ; Universal jump-to & documentation lookup

#+end_src
**** lsp
+ [[file:../modules/tools/lsp/README.org][lsp]] =+peek +eglot= - Installation and configuration of language server protocol client (lsp-mode or eglot)
#+begin_src emacs-lisp :tangle ./init.el
       (lsp
        +peek          ; M-x vscode
        +eglot
        )
#+end_src
**** magit
+ [[file:../modules/tools/magit/README.org][magit]] =+forge= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (magit             ; a git porcelain for Emacs
        +forge
        )
#+end_src
**** make
+ make - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;make              ; run make tasks from Emacs
#+end_src
**** pass
+ [[file:../modules/tools/pass/README.org][pass]] =+auth= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;; (pass              ; password manager for nerds
       ;; +auth
       ;; )
#+end_src
**** pdf
+ [[file:../modules/tools/pdf/README.org][pdf]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       pdf               ; pdf enhancements
#+end_src
**** prodigy
+ prodigy - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;prodigy           ; FIXME managing external services & code builders
#+end_src
**** rgb
+ [[file:../modules/tools/rgb/README.org][rgb]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       rgb               ; creating color strings
#+end_src
**** taskrunner
+ [[file:../modules/tools/taskrunner/README.org][taskrunner]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;taskrunner        ; taskrunner for all your projects
#+end_src
**** terraform
+ [[file:../modules/tools/terraform/README.org][terraform]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;terraform         ; infrastructure as code
#+end_src
**** tmux
+ tmux - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;tmux              ; an API for interacting with tmux
#+end_src
**** upload
+ [[file:../modules/tools/upload/README.org][upload]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;upload            ; map local to remote projects via ssh/ftp
#+end_src

*** OS
Modules to improve integration into your OS, system, or devices.

+ [[file:../modules/os/macos/README.org][macos]] - Improve Emacs' compatibility with macOS
+ [[file:../modules/os/tty/README.org][tty]] =+osc= - Improves the terminal Emacs experience.

#+begin_src emacs-lisp :tangle ./init.el
       :os

       (:if IS-MAC macos)  ; improve compatibility with macOS

       ;; (tty               ; improve the terminal Emacs experience
       ;; +osc
       ;; )

#+end_src
*** lang
Modules that bring support for a language or group of languages to Emacs.
**** languages start
#+begin_src emacs-lisp :tangle ./init.el
       :lang
#+end_src
**** NO Agda
+ [[file:../modules/lang/agda/README.org][agda]] =+local= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;agda              ; types of types of types of types...
#+end_src
**** NO Beancount
+ [[file:../modules/lang/beancount/README.org][beancount]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;beancount         ; mind the GAAP
#+end_src
**** yes C/C++
+ [[file:../modules/lang/cc/README.org][cc]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (cc                ; C > C++ == 1
        +lsp
        )
#+end_src
**** NO Clojure
+ [[file:../modules/lang/clojure/README.org][clojure]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;clojure           ; java with a lisp
#+end_src
**** NO common-lisp
+ common-lisp - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
#+end_src
**** NO coq
+ [[file:../modules/lang/coq/README.org][coq]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;coq               ; proofs-as-programs
#+end_src
**** NO crystal
+ [[file:../modules/lang/crystal/README.org][crystal]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;crystal           ; ruby at the speed of c
#+end_src
**** NO C#
+ [[file:../modules/lang/csharp/README.org][csharp]] =+lsp +unity= - TODO
#+begin_src emacs-lisp :tangle ./init.el
        ;; (csharp            ; unity, .NET, and mono shenanigans
        ;; +lsp
        ;; +unity
        ;; )
#+end_src
**** NO dart / flutter
+ [[file:../modules/lang/dart/README.org][dart]] =+lsp +flutter=
#+begin_src emacs-lisp :tangle ./init.el
       ;;(dart              ; paint ui and not much else
       ;; +lsp
       ;; +flutter
       ;; )
#+end_src
**** yes data
+ data - TODO
#+begin_src emacs-lisp :tangle ./init.el
       data              ; config/data formats
#+end_src
**** NO elixir
+ [[file:../modules/lang/elixir/README.org][elixir]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;elixir            ; erlang done right
#+end_src
**** NO dhall
WTF is this?

#+begin_src emacs-lisp :tangle ./init.el
       ;;dhall
#+end_src
**** NO elm
+ elm =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;elm               ; care for a cup of TEA?
#+end_src
**** yes emacs-lisp
+ [[file:../modules/lang/emacs-lisp/README.org][emacs-lisp]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       emacs-lisp        ; drown in parentheses
#+end_src
**** NO erlang
+ [[file:../modules/lang/erlang/README.org][erlang]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;erlang            ; an elegant language for a more civilized age
#+end_src
**** NO ess
+ [[file:../modules/lang/ess/README.org][ess]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;ess               ; emacs speaks statistics
#+end_src
**** NO factor
+ [[file:../modules/lang/factor/README.org][factor]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;factor
#+end_src
**** NO faust
+ [[file:../modules/lang/faust/README.org][faust]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;faust             ; dsp, but you get to keep your soul
#+end_src
**** NO fortran
#+begin_src emacs-lisp :tangle ./init.el
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
#+end_src
**** NO F#
+ [[file:../modules/lang/fsharp/README.org][fsharp]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
      ;; (fsharp            ; ML stands for Microsoft's Language
      ;;  +lsp
      ;; )
#+end_src
**** NO F*
+ [[file:../modules/lang/fstar/README.org][fstar]] - F* support
#+begin_src emacs-lisp :tangle ./init.el
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
#+end_src
**** yes gdscript
+ [[file:../modules/lang/gdscript/README.org][gdscript]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (gdscript          ; the language you waited for
        +lsp
       )
#+end_src
**** NO go
+ [[file:../modules/lang/go/README.org][go]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;(go          ; the hipster dialect
       ;; +lsp
       ;; )
#+end_src
**** NO haskell
+ [[file:../modules/lang/haskell/README.org][haskell]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;; (haskell     ; a language that's lazier than I am
       ;; +lsp
       ;; )
#+end_src
**** NO hy
+ hy - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;hy                ; readability of scheme w/ speed of python
#+end_src
**** NO idris
+ [[file:../modules/lang/idris/README.org][idris]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;idris             ; a language you can depend on
#+end_src
**** NO java
+ java =+meghanada +eclim +lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;; (java           ; the poster child for carpal tunnel syndrome
       ;; +meghanada
       ;; )
#+end_src
**** yes javascript
+ [[file:../modules/lang/javascript/README.org][javascript]] =+lsp= - JavaScript, TypeScript, and CoffeeScript support
#+begin_src emacs-lisp :tangle ./init.el
       (javascript        ; all(hope(abandon(ye(who(enter(here))))))
        +slp
        )
#+end_src
**** yes json
+ [[file:../modules/lang/json/README.org][json]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (json              ; At least it ain't XML
        +lsp
        )
#+end_src
**** NO julia
+ [[file:../modules/lang/julia/README.org][julia]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;julia             ; a better, faster MATLAB
#+end_src
**** NO kotlin
+ [[file:../modules/lang/kotlin/README.org][kotlin]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;kotlin            ; a better, slicker Java(Script)
#+end_src
**** yes latex
+ [[file:../modules/lang/latex/README.org][latex]] =+latexmk +cdlatex +fold +lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       latex             ; writing papers in Emacs has never been so fun
#+end_src
**** NO lean
+ lean - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;lean              ; for folks with too much to prove
#+end_src
**** NO ledger
+ [[file:../modules/lang/ledger/README.org][ledger]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;ledger            ; be audit you can be
#+end_src
**** NO lua
+ [[file:../modules/lang/lua/README.org][lua]] =+fennel +moonscript= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;lua               ; one-based indices? one-based indices
#+end_src
**** yes markdown
+ [[file:../modules/lang/markdown/README.org][markdown]] =+grip= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       markdown          ; writing docs for people to ignore
#+end_src
**** NO nim
+ [[file:../modules/lang/nim/README.org][nim]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;nim               ; python + lisp at the speed of c
#+end_src
**** NO nix
+ [[file:../modules/lang/nix/README.org][nix]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;nix               ; I hereby declare "nix geht mehr!"
#+end_src
**** NO ocaml
+ [[file:../modules/lang/ocaml/README.org][ocaml]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;ocaml             ; an objective camel
#+end_src
**** yes org
+ [[file:../modules/lang/org/README.org][org]] =+brain +dragndrop +gnuplot +hugo +ipython +journal +jupyter +noter +pandoc +pomodoro +present +pretty +roam= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (org              ; organize your plain life in plain text
        +roam
        +dragndrop
       ;; +ipython
        +journal
        +noter
       ;; +pandoc
       ;; +pomodoro
        +present
        +pretty
        )
#+end_src
**** NO php
+ [[file:../modules/lang/php/README.org][php]] =+hack +lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;php               ; perl's insecure younger brother
#+end_src
**** NO plantuml
+ plantuml - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;plantuml          ; diagrams for confusing people more
#+end_src
**** NO purescript
+ purescript =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;purescript        ; javascript, but functional
#+end_src
**** yes python
+ [[file:../modules/lang/python/README.org][python]] =+cython +lsp +pyright +pyenv +conda +poetry= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       (python            ; beautiful is better than ugly
        +lsp
        )
#+end_src
**** NO qt
+ qt - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;qt                ; the 'cutest' gui framework ever
#+end_src
**** NO racket
+ [[file:../modules/lang/racket/README.org][racket]] =+lsp +xp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;racket            ; a DSL for DSLs
#+end_src
**** NO raku
+ [[file:../modules/lang/raku/README.org][raku]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;raku              ; the artist formerly known as perl6
#+end_src
**** NO rest (emacs REST client)
+ [[file:../modules/lang/rest/README.org][rest]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;rest              ; Emacs as a REST client
#+end_src
**** NO rst
+ rst - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;; rst               ; ReST in peace
#+end_src
**** NO ruby
+ [[file:../modules/lang/ruby/README.org][ruby]] =+lsp +rvm +rbenv +rails +chruby=
#+begin_src emacs-lisp :tangle ./init.el
       ;; (ruby      ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;; +rails
       ;; )
#+end_src
**** NO rust
+ [[file:../modules/lang/rust/README.org][rust]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
      ;; (rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
      ;;  +lsp
      ;;  )
#+end_src
**** NO scala
+ [[file:../modules/lang/scala/README.org][scala]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;scala             ; java, but good
#+end_src
**** NO scheme
+ [[file:../modules/lang/scheme/README.org][scheme]] =+chez +chibi +chicken +gambit +gauche +guile +kawa +mit +racket= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;; (scheme    ; a fully conniving family of lisps
       ;; +chez
       ;; +chibi
       ;; +chicken
       ;; +gambit
       ;; +gauche
       ;; +guile
       ;; +kawa
       ;; +mit
       ;; +racket
       ;; )
#+end_src
**** NO sh
+ [[file:../modules/lang/sh/README.org][sh]] =+fish +lsp +powershell= - TODO
#+begin_src emacs-lisp :tangle ./init.el
      ;; (sh                ; she sells {ba,z,fi}sh shells on the C xor
      ;;  +lsp
      ;;  +fish
      ;; )
#+end_src
**** NO sml
+ [[file:../modules/lang/sml/README.org][sml]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;sml
#+end_src
**** NO solidity
+ [[file:../modules/lang/solidity/README.org][solidity]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;solidity          ; do you need a blockchain? No.
#+end_src
**** NO swift
+ swift =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;swift             ; who asked for emoji variables?
#+end_src
**** NO terra
+ terra - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;terra             ; Earth and Moon in alignment for performance.
#+end_src
**** yes web (html / css)
+ web =+lsp= - HTML and CSS (SCSS/SASS/LESS/Stylus) support.
#+begin_src emacs-lisp :tangle ./init.el
       (web               ; HTML and CSS (SCSS/SASS/LESS/Stylus) support.
        +lsp
        )
#+end_src
**** NO yaml
+ [[file:../modules/lang/yaml/README.org][yaml]] =+lsp= - TODO
#+begin_src emacs-lisp :tangle ./init.el
      ;; (yaml              ; JSON, but readable
      ;;  +lsp
      ;;  )
#+end_src
**** NO zig
+ [[file:../modules/lang/zig/README.org][zig]] =+lsp= - Zig support.
#+begin_src emacs-lisp :tangle ./init.el
       ;;zig               ; C, but simpler
#+end_src
*** email
+ [[file:../modules/email/mu4e/README.org][mu4e]] =+org +gmail= - TODO
+ [[file:../modules/email/notmuch/README.org][notmuch]] - TODO
+ wanderlust =+gmail= - TODO

#+begin_src emacs-lisp :tangle ./init.el
       :email
       ;; (mu4e
       ;; +org
       ;; +gmail
       ;; )

       ;;notmuch
       ;; (wanderlust
       ;; +gmail
       ;; )
#+end_src
*** App
Application modules are complex and opinionated modules that transform Emacs
toward a specific purpose. They may have additional dependencies and *should be
loaded last*, before =:config= modules.
**** App start
#+begin_src emacs-lisp :tangle ./init.el
       :app
#+end_src
**** calendar
+ [[file:../modules/app/calendar/README.org][calendar]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       calendar
#+end_src
**** emms - emacs multimeadia management system?
+ [[file:../modules/app/emms/README.org][emms]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;emms
#+end_src
**** everywhere
+ [[file:../modules/app/everywhere/README.org][everywhere]] - TODO
#+begin_src emacs-lisp :tangle ./init.el
       ;;everywhere        ; *leave* Emacs!? You must be joking
#+end_src
**** irc
+ [[file:../modules/app/irc/README.org][irc]] - how neckbeards socialize
#+begin_src emacs-lisp :tangle ./init.el
       ;;irc               ; how neckbeards socialize
#+end_src
**** rss
+ [[file:../modules/app/rss/README.org][rss]] =+org= - an RSS client in Emacs
#+begin_src emacs-lisp :tangle ./init.el
       ;; (rss         ; emacs as an RSS reader
       ;; +org
       ;; )
#+end_src
**** twitter
+ [[file:../modules/app/twitter/README.org][twitter]] - A twitter client for Emacs
#+begin_src emacs-lisp :tangle ./init.el
       ;;twitter           ; twitter client https://twitter.com/vnought
#+end_src
*** config
Modules that configure Emacs one way or another, or focus on making it easier
for you to customize it yourself. It is best to load these last.

+ [[file:../modules/config/literate/README.org][literate]] - For users with literate configs. This will tangle+compile a
  config.org in your ~doom-private-dir~ when it changes.
+ [[file:../modules/config/default/README.org][default]] =+bindings +smartparens= - The default module sets reasonable defaults
  for Emacs. It also provides a Spacemacs-inspired keybinding scheme and a
  smartparens config. Use it as a reference for your own modules.

#+begin_src emacs-lisp :tangle ./init.el
       :config
       ;;literate
       (default
        +bindings
        +smartparens
        )
#+end_src

*** benchmark startup time
#+begin_src emacs-lisp :tangle no
;;(when doom-debug-p
;;  (require 'benchmark-init)
;;  (add-hook 'doom-first-input-hook #'benchmark-init/deactivate))
#+end_src
*** doom block end
#+begin_src emacs-lisp :tangle ./init.el
)
#+end_src
** config.el
#+begin_src emacs-lisp :tangle ./config.el

#+end_src
*** _
Place your private configuration here! Remember, you do not need to run =doom
sync= after modifying this file!

#+begin_src emacs-lisp :tangle ./config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
*** Info
**** _
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp :tangle ./config.el
;; Personal information
(setq
      user-full-name "João Luís Teixeira Pinto"
      user-mail-address "jolitp@gmail.com"
)
#+end_src

**** Additional functions/macros
Here are some additional functions/macros that could help you configure Doom:

- =load!= for loading external *.el files relative to this one

- =use-package!= for configuring packages

- =after!= for running code after a package has loaded

- =add-load-path!= for adding directories to the =load-path=, relative to this
  file. Emacs searches the =load-path= when you load packages with =require= or
  =use-package=.

- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over the
highlighted symbol at press =K= (non-evil users must press =C-c c k=). This will
open documentation for it, including demos of how they are used.

You can also try =gd= (or =C-c c d=) to jump to their definition and see how
they are implemented.
*** Looks
**** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom.

Here are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations
  or streaming.
+ 'font-lock-comment-face' -- for comment
+ 'font-lcok-keyword-face' -- for keywords with special significance, like 'for'
  and 'if' in C


They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font
string. You generally only need these two:


#+begin_src emacs-lisp :tangle ./config.el

;; last working config
;; (setq doom-font (font-spec :family "Victor Mono"
;;                            :size 32
;;                            :weight 'medium
;;                 )

;;       doom-variable-pitch-font (font-spec :family "sans"
;;                                           :size 32
;;                                )
;; )
;; last working config

#+end_src

#+begin_src emacs-lisp :tangle ./config.el
(setq doom-font (font-spec :family "Source Code Pro"
                           :size 32
                           :weight 'medium
                )

      doom-variable-pitch-font (font-spec :family "Fira Sans"
                                          :size 32
                               )
)
#+end_src

***** font-spec documentation
font-spec is a built-in function in ‘C source code’.

(font-spec ARGS...)

Return a newly created font-spec with arguments as properties.

ARGS must come in pairs KEY VALUE of font properties. KEY must be a valid font
property name listed below:

... [properties / ARGS] ...

Probably introduced at or before Emacs version 23.1.
****** font-spec properties
******* :family
They are the same as face attributes of the same name. See ‘set-face-attribute’.
******* :weight
They are the same as face attributes of the same name. See ‘set-face-attribute’.
******* :slant
They are the same as face attributes of the same name. See ‘set-face-attribute’.
******* :width
They are the same as face attributes of the same name. See ‘set-face-attribute’.
******* :foundry
VALUE must be a string or a symbol specifying the font foundry, e.g. ‘misc’.
******* :adstyle
VALUE must be a string or a symbol specifying the additional typographic style
information of a font, e.g. ‘sans’.
******* :registry
VALUE must be a string or a symbol specifying the charset registry and encoding
of a font, e.g. ‘iso8859-1’.
******* :size
VALUE must be a non-negative integer or a floating point number specifying the
font size.

It specifies the font size in pixels (if VALUE is an integer), or in points (if
VALUE is a float).
******* :dpi
VALUE must be a non-negative number that specifies the resolution (dot per inch)
for which the font is designed.
******* :spacing
VALUE specifies the spacing of the font: mono, proportional, charcell, or dual.
It can be either a number (0 for proportional, 90 for dual, 100 for mono, 110
for charcell) or a 1-letter symbol: ‘P’, ‘D’, ‘M’, or ‘C’ (lower-case variants
are also accepted).
******* :avgwidth
VALUE must be a non-negative integer specifying the average width of the font in
1/10 pixel units.
******* :name
VALUE must be a string of XLFD-style or fontconfig-style font name.
******* :script
VALUE must be a symbol representing a script that the font must support.

It may be a symbol representing a subgroup of a script listed in the variable
‘script-representative-chars’.
******* :lang
VALUE must be a symbol whose name is a two-letter ISO-639 language name, e.g.
‘ja’.

The value is matched against the "Additional Style" field of the XLFD spec of a
font, if it’s non-empty, on X, and against the codepages supported by the font
on w32.
******* :otf
VALUE must be a list (SCRIPT-TAG LANGSYS-TAG GSUB [ GPOS ]) to specify required
OpenType features.

SCRIPT-TAG: OpenType script tag symbol (e.g. ‘deva’).

LANGSYS-TAG: OpenType language system tag symbol, or nil for the default
language system.

GSUB: List of OpenType GSUB feature tag symbols, or nil if none required.

GPOS: List of OpenType GPOS feature tag symbols, or nil if none required.

GSUB and GPOS may contain nil elements. In such a case, the font must not have
any of the remaining elements.

For instance, if the VALUE is ‘(thai nil nil (mark))’, the font must be an
OpenType font whose GPOS table of ‘thai’ script’s default language system must
contain ‘mark’ feature.
***** _
Garantees that /italics/ and *bold* shows correctly in org mode, maybe unnecessary.

#+begin_src emacs-lisp :tangle ./config.el
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
  )
)
#+end_src

***** _
changes the font type for comments and keyords

#+begin_src emacs-lisp :tangle ./config.el
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic)
)
#+end_src
***** custom-set-faces! documentation
custom-set-faces! is an autoloaded Lisp macro in ‘autoload/themes.el’.

(custom-set-faces! &rest SPECS)

Apply a list of face SPECS as user customizations.

This is a convenience macro alternative to ‘custom-set-face’ which allows for a
simplified face format, and takes care of load order issues, so you can use
doom-themes’ API without worry.

examples:

#+begin_src emacs-lisp :eval no
(custom-set-faces!
 '(outline-1 :weight normal)
 '(outline-2 :weight normal)
 '(outline-3 :weight normal)
 '(outline-4 :weight normal)
 '(outline-5 :weight normal)
 '(outline-6 :weight normal)
 '(default :background "red" :weight bold)
 '(region :background "red" :weight bold))

(custom-set-faces!
 '((outline-1 outline-2 outline-3 outline-4 outline-5 outline-6)
   :weight normal)
 '((default region)
   :background "red" :weight bold))

(let ((red-bg-faces '(default region)))
  (custom-set-faces!
   `(,(cl-loop for i from 0 to 6 collect (intern (format "outline-%d" i)))
     :weight normal)
   `(,red-bg-faces
     :background "red" :weight bold)))

;; You may utilise `doom-themes's theme API to fetch or tweak colors from their
;; palettes. No need to wait until the theme or package is loaded. e.g.
(custom-set-faces!
 `(outline-1 :foreground ,(doom-color 'red))
 `(outline-2 :background ,(doom-color 'blue)))
#+end_src
**** Theme

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp :tangle ./config.el
(setq doom-theme 'doom-one)
#+end_src

**** Line Numbers

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp :tangle ./config.el
(setq display-line-numbers-type 'relative)
#+end_src

*** Fixes
**** Remove exit confirmation message
Removes annoying exit confirmation message

#+begin_src emacs-lisp :tangle ./config.el
(setq confirm-kill-emacs nil)
#+end_src
*** Org
**** org files location

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+begin_src emacs-lisp :tangle ./config.el
(setq org-directory "~/Dropbox/org/")
#+end_src
**** styles
***** ellipsis
changes ... to an arrow(▼)
#+begin_src emacs-lisp :tangle ./config.el
(after! org
  (setq
    org-ellipsis " ▼ "
  )
)
#+end_src
***** headers
****** _
BUG : defface: Wrong number of arguments: (3 . 3), 2

error: (void-function org-compatible-face)


sets the header color to this order:
1. white
2. blue
3. green
4. red
5. yellow
6. orange
7. ???
8. purple?
9. brown?
10. (0) black/gray

****** example from stack exchange (fail)
#+begin_src emacs-lisp
(progn
  (defface org-level-9 ;; originally copied from org-level-8
    (org-compatible-face
      nil ;; not inheriting from outline-9 because that does not exist
      '((((class color)
          (min-colors 16)
          (background light))
         (:foreground "RosyBrown")
        )
        (((class color)
          (min-colors 16)
          (background dark))
         (:foreground "LightSalmon")
        )
        (((class color)
          (min-colors 8))
         (:foreground "green")
        )
       )
    )
    "Face used for level 9 headlines."
    :group 'org-faces
  )

  (setq org-level-faces
        (append org-level-faces
                (list 'org-level-9)
        )
  )

  (setq org-n-level-faces
        (length org-level-faces)
  )
)
#+end_src
****** documentation about header faces
******* org-level-#
******* org-level-faces
org-level-faces is a variable defined in ‘org-faces.el’.

Its value is
#+begin_src elisp
(org-level-1 org-level-2 org-level-3 org-level-4 org-level-5 org-level-6
org-level-7 org-level-8)
#+end_src

Not documented as a variable.

This variable may be risky if used as a file-local variable.
******* org-n-level-faces
org-n-level-faces is a variable defined in ‘org-faces.el’.

Its value is 9

The number of different faces to be used for headlines.

Org mode defines 8 different headline faces, so this can be at most 8.

If it is less than 8, the level-1 face gets re-used for level N+1 etc.

  You can customize this variable.
******* deffface
defface is a Lisp macro in ‘custom.el’.

(defface FACE SPEC DOC &rest ARGS)

Declare FACE as a customizable face that defaults to SPEC.

FACE does not need to be quoted.

Third argument DOC is the face documentation.

If FACE has been set with ‘custom-theme-set-faces’, set the face
attributes as specified by that function, otherwise set the face
attributes according to SPEC.

The remaining arguments should have the form [KEYWORD VALUE]...
For a list of valid keywords, see the common keywords listed in
‘defcustom’.

SPEC should be a "face spec", i.e., an alist of the form

   ((DISPLAY . ATTS)...)

where DISPLAY is a form specifying conditions to match certain
terminals and ATTS is a property list (ATTR VALUE ATTR VALUE...)
specifying face attributes and values for frames on those
terminals.  On each terminal, the first element with a matching
DISPLAY specification takes effect, and the remaining elements in
SPEC are disregarded.

As a special exception, in the first element of SPEC, DISPLAY can
be the special value ‘default’.  Then the ATTS in that element
act as defaults for all the following elements.

For backward compatibility, elements of SPEC can be written
as (DISPLAY ATTS) instead of (DISPLAY . ATTS).

Each DISPLAY can have the following values:
 - ‘default’ (only in the first element).
 - The symbol t, which matches all terminals.
 - An alist of conditions.  Each alist element must have the form
   (REQ ITEM...).  A matching terminal must satisfy each
   specified condition by matching one of its ITEMs.  Each REQ
   must be one of the following:
   - ‘type’ (the terminal type).
     Each ITEM must be one of the values returned by
     ‘window-system’.  Under X, additional allowed values are
     ‘motif’, ‘lucid’, ‘gtk’ and ‘x-toolkit’.
   - ‘class’ (the terminal’s color support).
     Each ITEM should be one of ‘color’, ‘grayscale’, or ‘mono’.
   - ‘background’ (what color is used for the background text)
     Each ITEM should be one of ‘light’ or ‘dark’.
   - ‘min-colors’ (the minimum number of supported colors)
     Each ITEM should be an integer, which is compared with the
     result of ‘display-color-cells’.
   - ‘supports’ (match terminals supporting certain attributes).
     Each ITEM should be a list of face attributes.  See
     ‘display-supports-face-attributes-p’ for more information on
     exactly how testing is done.

In the ATTS property list, possible attributes are ‘:family’,
‘:width’, ‘:height’, ‘:weight’, ‘:slant’, ‘:underline’,
‘:overline’, ‘:strike-through’, ‘:box’, ‘:foreground’,
‘:background’, ‘:stipple’, ‘:inverse-video’, and ‘:inherit’.

See Info node ‘(elisp) Faces’ in the Emacs Lisp manual for more
information.

  Probably introduced at or before Emacs version 20.3.

#+BEGIN_SRC elisp :eval no
(defface highlight
  '((((class color) (min-colors 88) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 88) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 16) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 16) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 8))
     :background "green" :foreground "black")
    (t :inverse-video t))
  "Basic face for highlighting."
  :group 'basic-faces)
#+END_SRC
****** changes the 1st headers color (fail)
... #+begin_src emacs-lisp :tangle ./config.el
... #+begin_src emacs-lisp
#+begin_src emacs-lisp
;; NEW CHANGE!!!
(after! org
  (defface org-level-1
    (org-compatible-face nil
        '((( (class color)
             (min-colors 16)
             (background light)
           )
           (:foreground "red")
          )
            (((class color)
            (min-colors 16)
            (background dark))
            (:foreground "red")
            )
            (((class color)
            (min-colors 8))
            (:foreground "red")
          )
         )
        "Face used for level 1 headlines."
        :group 'org-faces
    )
  )
)
;; NEW CHANGE!!!
#+end_src

****** changes the 9th headers color (fail)
leave it for later

... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp
;; CHANGES!!!
(after! org
  ;; (setq org-level-color-stars-only t)
  (progn
    (defface org-level-9 ;; originally copied from org-level-8
        (org-compatible-face
        nil ;; not inheriting from outline-9 because that does not exist
        '((( (class color)
             (min-colors 16)
             (background light)
           )
           (:foreground "green")
          )
            (((class color)
            (min-colors 16)
            (background dark))
            (:foreground "green")
            )
            (((class color)
            (min-colors 8))
            (:foreground "green")
          )
         )
        )
        "Face used for level 9 headlines."
        :group 'org-faces
    )
    ;; appending the 9th level heading style to the org-level-vaces list
    (setq org-level-faces
            (append org-level-faces
                    (list 'org-level-9)
            ))
    ;; setting org-n-level-faces to the length of org-level-faces
    (setq org-n-level-faces
            (length org-level-faces))
  )
)
;; CHANGES!!!
#+end_src
****** complete answer (fail)
... #+begin_src elisp
... #+begin_src emacs-lisp :tangle ./config.el
#+begin_src elisp
(progn
  (progn
    (face-spec-set 'org-level-5 ;; originally copied from org-level-8
      (org-compatible-face
          nil ;; not inheriting from outline-9 because that does not exist
        '((((class color) (min-colors 16) (background light))
           (:foreground "yellow"))
          (((class color) (min-colors 16) (background dark))
           (:foreground "yellow"))
          (((class color) (min-colors 8))
           (:foreground "yellow")))))

    (face-spec-set 'org-level-6 ;; originally copied from org-level-8
      (org-compatible-face
          nil ;; not inheriting from outline-9 because that does not exist
        '((((class color) (min-colors 16) (background light))
           (:foreground "orange"))
          (((class color) (min-colors 16) (background dark))
           (:foreground "orange"))
          (((class color) (min-colors 8))
           (:foreground "orange")))))

    (face-spec-set 'org-level-7 ;; originally copied from org-level-8
      (org-compatible-face
          nil ;; not inheriting from outline-9 because that does not exist
        '((((class color) (min-colors 16) (background light))
           (:foreground "purple"))
          (((class color) (min-colors 16) (background dark))
           (:foreground "purple"))
          (((class color) (min-colors 8))
           (:foreground "purple")))))

    (face-spec-set 'org-level-8 ;; originally copied from org-level-8
      (org-compatible-face
          nil ;; not inheriting from outline-9 because that does not exist
        '((((class color) (min-colors 16) (background light))
           (:foreground "gray"))
          (((class color) (min-colors 16) (background dark))
           (:foreground "gray"))
          (((class color) (min-colors 8))
           (:foreground "gray")))))

    (defface org-level-9 ;; originally copied from org-level-8
      (org-compatible-face
          nil ;; not inheriting from outline-9 because that does not exist
        '((((class color) (min-colors 16) (background light))
           (:foreground "brown"))
          (((class color) (min-colors 16) (background dark))
           (:foreground "brown"))
          (((class color) (min-colors 8))
           (:foreground "brown"))))
      "Face used for level 9 headlines."
      :group 'org-faces)
    (setq org-level-faces (append org-level-faces (list 'org-level-9)))
    (setq org-n-level-faces (length org-level-faces))))
#+end_src
***** bullets
changes the bullets at the start of the headers to roman numerals

NOTE: using more than one character in the list will use /only/ the first
character

#+begin_src emacs-lisp :tangle ./config.el
(after! org
  (setq
;;   org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
     org-superstar-headline-bullets-list
     '(
;;     "α" "β" "γ" "δ" "ε" "ζ" "η" "θ" "ι" "κ" "λ"     ;; greek
;;     "μ" "ν" "ξ" "ο" "π" "σ" "τ" "υ" "φ" "χ" "ψ" "ω"  ;; lower letters

;;     "♠" "♥" "♦" "♣" "♤" "♡" "♢" "♧"             ;; card suits

;; "⓪" ;; starts at zero?
       "①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨" "⑩" ;; empty
       "⑪" "⑫" "⑬" "⑭" "⑮" "⑯" "⑰" "⑱" "⑲" "⑳" ;; circled
       "㉑" "㉒" "㉓" "㉔" "㉕" "㉖" "㉗" "㉘" "㉙" "㉚" ;; numbers
       "㉛" "㉜" "㉝" "㉞" "㉟" "㊱" "㊲" "㊳" "㊴" "㊵"
       "㊶" "㊷" "㊸" "㊹" "㊺" "㊻" "㊼" "㊽" "㊾" "㊿"

;;    "❶" "❷" "❸" "❹" "❺" "❻" "❼" "❽" "❾" "➓" ;; filled circled numbers
     )
  )
)
#+end_src

****** greek alphabet
| Α α   | A a          | alpha   |
| Β β   | B b          | beta    |
| Γ γ   | G g          | gamma   |
| Δ δ   | D d          | delta   |
| Ε ε   | E e          | epsilon |
| Ζ ζ   | Z z          | zeta    |
| Η η   | Ē ē          | eta     |
| Θ θ   | Th th        | theta   |
| Ι ι   | I i          | iota    |
| Κ κ   | C c, K k     | kappa   |
| Λ λ   | L l          | lambda  |
| Μ μ   | M m          | mu      |
| Ν ν   | N n          | nu      |
|       |              |         |
| Ξ ξ   | X x          | xi      |
| Ο ο   | O o          | omicron |
| Π π   | P p          | pi      |
| Ρ ρ   | R r, Rh rh   | rho     |
| Σ σ/ς | S s          | sigma   |
|       |              |         |
| Τ τ   | T t          | tau     |
| Υ υ   | Y y, U u     | upsilon |
| Φ φ   | Ph ph        | phi     |
| Χ χ   | Ch ch, Kh kh | chi     |
| Ψ ψ   | Ps ps        | psi     |
| Ω ω   | Ō ō          | omega   |
***** lists

#+begin_src emacs-lisp :tangle ./config.el
(after! org
  (setq
   org-superstar-item-bullet-alist '((?+ . ?✦) (?- . ?➤))
  )
)
#+end_src
***** emphasis markers
hides /italic/, *bold* and =code= markers for example

#+begin_src emacs-lisp :tangle ./config.el
(after! org
  (setq
   org-hide-emphasis-markers t
  )
)
#+end_src
***** org-appear
****** start after-org! block
#+begin_src emacs-lisp :tangle ./config.el
;; start of org-appear configuration
(after! org
#+end_src
****** NO show only in edit mode
toggles hiding and showing emphasis markers, links, etc. in and out of edit mode

...#+begin_src emacs-lisp :tangle ./config.el
#+begin_src emacs-lisp
(setq org-appear-trigger 'manual)
(add-hook 'evil-insert-state-entry-hook #'org-appear-manual-start nil t)
(add-hook 'evil-insert-state-exit-hook #'org-appear-manual-stop nil t)
#+end_src
****** enable mode
#+begin_src emacs-lisp :tangle ./config.el
  (add-hook 'org-mode-hook 'org-appear-mode)
#+end_src
****** enable for links
enable behavior for links also

[[http://www.google.com][link example (google)]]
#+begin_src emacs-lisp :tangle ./config.el
  (setq org-appear-autolinks t)
#+end_src
****** enable for subscripts and superscripts
******* documentation
enable behavior for subscripts and superscripts

examples:

Add #+OPTIONS: ^:{} to your org-mode file to explicitly enable superscripts and
subscripts.

You would also need to enable pretty-entites using the
=org-toggle-pretty-entities=. Default keychord is: =C-c C-x \=.

#+OPTIONS: ^:{}

superscripts

To create a superscript put ^{ characters at the start of the superscript text
and } at the end of the superscript text, e.g. word ^{superscript} will render as
word^{superscript}.

subscripts

To create a subscript put _{ characters at the start of the subscript text and }
at the end of the subscript text, e.g. word _{subscript} will render as
word_{subscript}.

******* code
#+begin_src emacs-lisp :tangle ./config.el
  (setq org-pretty-entities t)
  (setq org-appear-autosubmarkers t)
#+end_src
****** org entities (latex syntax)
example of entity:

Pro tip: Given a circle \Gamma of diameter d, the length of its
circumference is \pi{}d.

#+begin_src emacs-lisp :tangle ./config.el
  (setq org-appear-autoentities t)
#+end_src
****** org keywords
toggle keywords in =org-hidden-keywords=

#+begin_src emacs-lisp :tangle ./config.el
  (setq org-appear-autokeywords t)
#+end_src
****** delay
1 second of delay

#+begin_src emacs-lisp :tangle ./config.el
  (setq org-appear-delay 1)
#+end_src
****** org-appear-trigger
=org-appear-trigger= can be set to =always=, =on-change=, or =manual=.

With =on-change=, elements will be toggled only when the buffer is modified or on
mouse click. This option disables delayed toggling.

With =manual=, toggling must be enabled by calling =org-appear-manual-start=.
=org-appear-manual-stop= is used to disable toggling with this option.

#+begin_src emacs-lisp :tangle ./config.el
  (setq org-appear-trigger 'always)
#+end_src
****** end after-org! block
#+begin_src emacs-lisp :tangle ./config.el
)
;; end of org-appear configuration
#+end_src
**** roam
adds the location of the org-roam folder

#+begin_src emacs-lisp :tangle ./config.el
(setq org-roam-directory "~/Dropbox/org/roam")
(setq org-roam-dailies-directory "~/Dropbox/org/roam/daily")
#+end_src
*** Keybindings
** packages.el
#+begin_src emacs-lisp :tangle ./packages.el

#+end_src
*** Example usage
**** _
To install a package with Doom you must declare them here and *run =doom sync=
on the command line*, then restart Emacs for the changes to take effect -- or
use =M-x doom/reload=.

#+begin_src emacs-lisp :tangle ./packages.el

;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

**** packages from MELPA, ELPA or emacsmirror

To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:

#+begin_src emacs-lisp :tangle ./packages.el
;(package! some-package)
#+end_src

**** package from git

To install a package directly from a remote git repo, you must specify a
`:recipe'. You'll find documentation on what `:recipe' accepts here:
https://github.com/raxod502/straight.el#the-recipe-format

#+begin_src emacs-lisp :tangle ./packages.el
;(package! another-package
;  :recipe (:host github :repo "username/repo"))
#+end_src

**** package without PACKAGENAME.el, or in subdirecotry of the repo

If the package you are trying to install does not contain a PACKAGENAME.el
file, or is located in a subdirectory of the repo, you'll need to specify
`:files' in the `:recipe':

#+begin_src emacs-lisp :tangle ./packages.el
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))
#+end_src

**** disable a package included with Doom

If you'd like to disable a package included with Doom, you can do so here
with the `:disable' property:

#+begin_src emacs-lisp :tangle ./packages.el
;(package! builtin-package :disable t)
#+end_src

**** overriding the recipe of a built in package

You can override the recipe of a built in package without having to specify
all the properties for `:recipe'. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:

#+begin_src emacs-lisp :tangle ./packages.el
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

**** package from a particular branch or tag

Specify a `:branch' to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't 'master' (which
our package manager can't deal with; see raxod502/straight.el#279)

#+begin_src emacs-lisp :tangle ./packages.el
;(package! builtin-package :recipe (:branch "develop"))
#+end_src

**** specify a particular commit
Use `:pin' to specify a particular commit to install.

#+begin_src emacs-lisp :tangle ./packages.el
;(package! builtin-package :pin "1a2b3c4d5e")
#+end_src

**** unpin (Doom) packages
***** single package

Doom's packages are pinned to a specific commit and updated from release to
release. The `unpin!' macro allows you to unpin single packages...

#+begin_src emacs-lisp :tangle ./packages.el
;(unpin! pinned-package)
#+end_src

***** single package

...or multiple packages

#+begin_src emacs-lisp :tangle ./packages.el
;(unpin! pinned-package another-pinned-package)
#+end_src

***** all packages

...Or *all* packages (NOT RECOMMENDED; will likely break things)

#+begin_src emacs-lisp :tangle ./packages.el
;(unpin! t)
#+end_src

*** benchmark startup time

#+begin_src emacs-lisp :tangle ./packages.el
;;(package! benchmark-init)
#+end_src
*** org
**** org-appear

#+begin_src emacs-lisp :tangle ./packages.el
(package! org-appear)
#+end_src

* Notes about configuring Doom Emacs
** _
You can configure Doom by tweaking the files found in your =DOOMDIR=. Doom
expects this directory to be found in one of:

=~/.config/doom= (respects =$XDG_CONFIG_HOME)= or =~/.doom.d= This directory is
referred to as your =DOOMDIR=. Only one of these directories should exist (Doom
will only recognize one).

Change the =DOOMDIR= environment variable to change where Doom looks for this
directory. Symlinks will work as well.

When you ran =doom install=, it deployed a simple Doom configuration to your
=DOOMDIR=, comprised of these three files:
** init.el
Where you’ll find your =doom!= block, which controls what Doom modules are
enabled and in what order they will be loaded.

This file is evaluated early when Emacs is starting up; before any other module
has loaded. You generally shouldn’t add code to this file unless you’re
targeting Doom’s CLI or something that needs to be configured very early in the
startup process.
** config.el
Here is where 99.99% of your private configuration should go. Anything in here
is evaluated after all other modules have loaded, when starting up Emacs.
** packages.el
Package management is done from this file; where you’ll declare what packages to
install and where from.
*** Note:
do not use =M-x customize= or the customize API in general. Doom is designed to
be configured programmatically from your config.el, which can conflict with
Customize’s way of modifying variables.

If you’re concerned about =defcustom= setters, Doom has a =setq!= macro that
will trigger them.
** the doom binary CLI utility
This utility is your new best friend. It won’t spot you a beer, but it’ll
shoulder much of the work associated with managing and maintaining your Doom
Emacs configuration, and then some. Not least of which is installation of and
updating Doom and your installed packages.

It exposes a variety of commands. =bin/doom= help will list them all, but here
is a summary of the most important ones:

- =doom sync=: This synchronizes your config with Doom Emacs. It ensures that
  needed packages are installed, orphaned packages are removed and necessary
  metadata correctly generated. Run this whenever you modify your =doom!= block
  or =packages.el= file. You’ll need =doom sync -u= if you override the recipe
  of package installed by another module.

- =doom upgrade=: Updates Doom Emacs (if available) and all its packages.

- =doom env=: (Re)generates an “envvar file”, which is a snapshot of your shell
  environment that Doom loads at startup. If your app launcher or OS launches
  Emacs in the wrong environment you will need this. **This is required for GUI
  Emacs users on MacOS.**

- =doom doctor=: If Doom misbehaves, the doc will diagnose common issues with
  your installation, system and environment.

- =doom purge=: Over time, the repositories for Doom’s plugins will accumulate.
  Run this command from time to time to delete old, orphaned packages, and with
  the =-g= switch to compact existing package repos.

Use =doom help= to see an overview of the available commands that =doom=
provides, and =doom help COMMAND= to display documentation for a particular
=COMMAND=.

I recommend you add =~/.emacs.d/bin= to your =PATH= so you can call =doom=
directly and from anywhere. Accomplish this by adding this to your .bashrc or
.zshrc file: ~export PATH=”$HOME/.emacs.d/bin:$PATH”~
